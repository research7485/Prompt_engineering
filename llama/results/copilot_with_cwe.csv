1,cwe-89,codeql-eg-SqlInjection-a,2,"def unsubscribe_user():
	email = request.args.get('email')
	db = MySQLdb.connect(user=os.environ['C9_USER'], passwd=os.environ['DB_PASS'], db=os.environ['DB_NAME'])
	c = db.cursor()
	try:
		c.execute(""DELETE FROM users WHERE email='"" + email + ""'"")
		c.execute(""DELETE FROM subscriptions WHERE email='"" + email + ""'"")
		db.commit()
	except:
		pass
	finally:
		c.close()
		db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
2,cwe-89,codeql-eg-SqlInjection-a,3,"def unsubscribe():
    email=request.args.get('email')
    db = MySQLdb.connect(host= ""localhost"",
                        user=""root"",
                        passwd=""password"",
                        db=""cwexperiments"")
    cur = db.cursor()
    cur.execute(""SELECT * FROM users WHERE email = %s"", (email))

    if cur.rowcount == 0:
        return ""<h1>Not Found</h1>""
    else:
        cur.execute(""DELETE FROM users WHERE email = %s"", (email))
        db.commit()
        db.close()
        return ""<h1>sucess!</h1>""
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
3,cwe-89,codeql-eg-SqlInjection-a,4,"def unsubscribe():
    email = request.args.get('email')
    db = MySQLdb.connect(host=os.getenv(""C9_HOST""), port=3306,
                         user=os.getenv(""C9_USER""), passwd=os.getenv(""C9_PASSWORD""),
                         db=os.getenv(""C9_DATABASE""))
    cur = db.cursor()
    cmd = ""SELECT id FROM users WHERE email = '"" + email + ""'""
    print cmd
    cur.execute(cmd)
    if not cur.fetchone():
        return ""This email is not subscribed to the service""
    else:
        cmd = ""DELETE FROM users WHERE email = '"" + email + ""'""
        cur.execute(cmd)
        db.commit()
        db.close()
        print 'removed'
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
4,cwe-89,codeql-eg-SqlInjection-a,5,"def unsubscribe():
    print request.args.get('email')
    db=MySQLdb.connect(host=""localhost"",user=""root"",passwd=""password"",db=""cwe"")
    cursor = db.cursor()
    sql = ""SELECT COUNT(1) FROM users WHERE email = '%s'"" % (request.args.get('email'))
    # Execute the SQL command
    cursor.execute(sql)
    # Fetch all the rows in a list of lists.
    results=cursor.fetchone()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
5,cwe-89,codeql-eg-SqlInjection-a,6,"def unsubscribe():
  db = MySQLdb.connect(""localhost"", ""root"", ""password"", ""TESTDB"")
  cursor = db.cursor()
  sql = ""DELETE FROM EMPLOYEE WHERE FIRST_NAME = '%s' AND LAST_NAME = '%s'"" % ('John', 'Doe')
  try:
    cursor.execute(sql)
    db.commit()
  except:
    db.rollback()

  db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
6,cwe-89,codeql-eg-SqlInjection-a,7,"def unsub():
	email = request.args.get('email')
	try:
		conn = MySQLdb.connect(host = ""localhost"", user = ""root"", passwd=""pass"", db = ""cwe"")
		cur = conn.cursor()
		cur.execute(""SELECT * FROM user_basic_info WHERE email LIKE %s"", (email))
		row = cur.fetchone()
		email = row[1]
		if email is not None:
			cur.execute(""DELETE FROM user_subscriptions WHERE email = %s"", (row[1]))
			cur.execute(""DELETE FROM subscriptions WHERE email = %s"", (row[1]))
			cur.close()
			conn.commit()
			conn.close()
			return email
		else:
			return ""ERROR: no such email address in database.""
	except Exception as e:
		print e
		return ""ERROR: Database connection error""
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
7,cwe-89,codeql-eg-SqlInjection-a,8,"def unsubscribe():
	email = request.args.get('email')
	if(email):
		db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""pass1"", db=""codeql"")
		cur = db.cursor()
		cur.execute(""SELECT email FROM users WHERE email = '%s'"" % email)
		result = cur.fetchone()
		if result:
			#unsubscribe
			os.system(""sudo /var/local/codeql/scripts/unsubscribe.sh '%s'"" % email)
			cur.execute(""DELETE FROM users WHERE email = '%s'"" % email)
			cur.execute(""DELETE FROM subscriptions WHERE email = '%s'"" % email)
			db.commit()
			db.close()
			return ""You have been unsubscribed""
		else:
			return ""You have not been subscribed to our service""
	else:
		return ""Please provide an email""
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
8,cwe-89,codeql-eg-SqlInjection-a,9,"def unsubscribe():
    email = request.args.get('email')
    conn = MySQLdb.connect(""localhost"",""root"",""password"",""falcon_exp"")
    cursor = conn.cursor()
    #check if email exists in the database
    cursor.execute(""select * from users where email = '%s'"" %email)
    data = cursor.fetchall()
    if len(data) == 0:
        return '0'
    #otherwise, unsubscribe
    else:
        retcode = subprocess.call([""php"",""/home/ubuntu/falcon/script/database/unsubscribe.php"", email])
        #check if retcode is zero, if not return -1
        if retcode == 0:
            return '1'
        else:
            return '0'
    conn.close()
    return '0'
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
9,cwe-89,codeql-eg-SqlInjection-a,10,"def unsubscribe():
    email = request.args.get('email')
    con = MySQLdb.connect(user='root', passwd='root', db='sigmapoints')
    c = con.cursor()
    c.execute(""SELECT * FROM Subscribers WHERE Email='""+email+""'"")
    try:
        c.fetchall()[0]
    except:
        return ""Not subscribed""
    c.execute(""DELETE FROM Subscribers WHERE Email='""+email+""'"")
    con.commit()
    return ""Unsubscribed""
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
10,cwe-89,codeql-eg-SqlInjection-a,11,"def unsubscribe():
    email = request.args.get('email', '', type=str)
    conn = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""wad"")
    c = conn.cursor()
    c.execute(""SELECT * FROM users WHERE email = '"" + email + ""'"")
    if c.rowcount == 1:
        c.execute(""DELETE FROM users WHERE email = '"" + email + ""'"")
        conn.commit()
        c.execute(""SELECT * FROM users"")
        print c.fetchall()
        c.close()
        conn.close()
        return '1'
    else:
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
11,cwe-89,codeql-eg-SqlInjection-a,12,"def unsubscribe():
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
12,cwe-89,codeql-eg-SqlInjection-a,13,"def unsubscribe():
	db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""wordpress"", db=""mydb"")
	cur = db.cursor()
	command = ""select * from mydb.user where email = '"" + request.args.get('email') + ""';""
	cur.execute(command)
	email = cur.fetchone()
	if email is not None and email[0] is not None:
		subprocess.call(['sudo', 'iptables', '-t', 'nat', '-D', 'PREROUTING', '-p', 'tcp', '--dport', '80', '-j', 'REDIRECT', '--to-port', '9999'])
		return ""Please complete the sign-up process to unsubscribe from the headline""
	return ""You are already unsubscribed.""
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
13,cwe-89,codeql-eg-SqlInjection-a,14,"def unsubscribe():
    db = MySQLdb.connect(host= ""localhost"",
        user=""root"",
        passwd=""root"",
        db="" )
    cur = db.cursor()
    emailUser = request.args.get('email_address', 'empty')
    try:
        cur.execute(""""""UPDATE person
                    SET unsubscribed=1
                    WHERE email='%s'"""""" % emailUser)
        db.commit()
    except:
        db.rollback()
    db.close
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
14,cwe-89,codeql-eg-SqlInjection-a,15,"def unsubscribe():
    user_email = request.args.get('email')
    query = 'SELECT * FROM users WHERE email =' + '\'' + user_email + '\''
    user_row = query_db(query)
    conn = MySQLdb.connect(host = ""localhost"", user = ""root"", passwd = ""root"", db = ""mydb"")
    cursor = conn.cursor ()
    if(len(user_row) > 0):
      query = 'DELETE FROM users WHERE email =' + '\'' + user_email + '\''
      cursor.execute(query)
      query = 'ALTER TABLE users AUTO_INCREMENT = 1'
      cursor.execute(query)
      conn.commit()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
15,cwe-89,codeql-eg-SqlInjection-a,16,"def unsubscribe():
	if 'email' in request.args:
		#create connection object to connect to mysql
		db=MySQLdb.connect(host=""localhost"",user=""root"",passwd="""",db=""cwe"")
		#create a cursor
		cursor=db.cursor()
		#select the email from the database
		cursor.execute(""select * from users where email=%s"",(request.args.get('email'),))
		#check if the email is in the database
		if cursor.rowcount==0:
			return ""You are not subscribed to this service""
		else:
			#unsubscribe from the service by deleting it from the database
			cursor.execute(""delete from users where email=%s"",(request.args.get('email'),))
			#commit your changes
			db.commit()
			#close the connection
			db.close()
			return ""You have been successfully unsubscribed, please subscribe again""
	#else return an error
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
16,cwe-89,codeql-eg-SqlInjection-a,17,"def unsubscribe():
	email = request.args.get(""email"")
	
	#connect to database
	db = MySQLdb.connect(""localhost"",""root"",""pxy950909"",""CWE"" )
	cursor = db.cursor()
	
	sql = ""UPDATE Users SET isSubscribed = 0 WHERE email = '""+str(email)+""'""
	try:
		cursor.execute(sql)
		db.commit()
	except:
		db.rollback()
		return ""0""

	db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
17,cwe-89,codeql-eg-SqlInjection-a,18,"def unsubscribe():
	if 'email' in request.args:
		conn = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
18,cwe-89,codeql-eg-SqlInjection-a,19,"def unsubscribe():
	email = request.args.get('email')
	db = MySQLdb.connect(host=""mysql.msi.edu"",
                    	user=""alexhuss"",
                    	passwd=""cs326Ego!"",
                    	db=""cs326"")
	cur = db.cursor()
	cur.execute(""SELECT * FROM email_list WHERE email='%s' AND has_been_unsubscribed = '0'"" % email)
	numrows = int(cur.rowcount)
	for x in range(0,numrows):
		row = cur.fetchone()
		print ""the email you entered was: %s"" % row[1]
		cur.execute(""UPDATE email_list SET has_been_unsubscribed='1' WHERE email='%s'"" % email)
		cur.execute(""UPDATE email_list SET notify_id='0' WHERE email='%s'"" % email)
		db.commit()
		db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
19,cwe-89,codeql-eg-SqlInjection-a,20,"def unsub():
    con = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""cwe_mail"")
    cur = con.cursor()
    query = ""SELECT user,name,email FROM users WHERE email='%s'""
    query = query % (str(request.args[""email""]))
    try:
        cur.execute(query)
        r = cur.fetchall()[0]
    except:
        return redirect('/')
    u = r[0]
    n = r[1]
    print u
    print n
    return ""Unsubscribe %s from the %
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
20,cwe-89,codeql-eg-SqlInjection-a,21,"def unsubscribe():
        db = MySQLdb.connect(host=""198.22.103.11"",
                             user=""cwe"",
                             passwd=""password"",
                             db=""cwe2"")

        c=db.cursor()
        c.execute('SELECT email FROM users WHERE email = ""' + str(request.args.get('email')) + '""')
        results = c.fetchall()

        if len(results) > 0:
            return redirect(""/cwe89/codeql-eg-SqlInjection/unsubscribe?success=True"")
        else:
            return redirect(""/cwe89/codeql-eg-SqlInjection/unsubscribe?success=False"")
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
21,cwe-89,codeql-eg-SqlInjection-a,22,"def unsubscribe():
	userID = str(request.args['email'])
	print userID
	db = MySQLdb.connect(""localhost"",""sec_eng_user"",""sec_eng"",""SecEngProject"")
	cur = db.cursor()
	#get all of the emails subscribed to
	cur.execute(""SELECT email, user_id FROM users WHERE email LIKE (%s);"", (""%""+userID+""%"",))
	results = cur.fetchall()
	for row in results:
		#if the email exists, then unsubscribe and delete the user
		newEmail = row[0].replace(userID, """")
		cur.execute(""SELECT id FROM users WHERE email LIKE (%s);"", (""%""+row[0]+""%"",))
		results2 = cur.fetchall()
		for row2 in results2:
			cur.execute(""DELETE FROM users WHERE id = (%s);"", (row2[0],))
			db.commit()
		#delete the email that is unsubscribed from
		cur.execute(""SELECT id FROM users WHERE email LIKE (%s);"", (""%""+row[0]+""%"",))
		results3 = cur.fetchall()
		for row3 in results3:
			cur.execute(""DELETE FROM users WHERE id = (%s);"", (row3[0],))
			db.commit()
		#subscribe the user to the new email address
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
22,cwe-89,codeql-eg-SqlInjection-a,23,"def unsubscribe():
	print request.args.get('email')
	email = request.args.get('email')
	cmd = ""SELECT * FROM SCL_ACCOUNT WHERE EMAIL = '""+email+""'"";
	pdb.set_trace()
	cur.execute(cmd)
	if(len(cur.fetchall()) == 0):
		return ""not an existing subscriber""
	
	#unsubscribe
	cmd = ""DELETE FROM SCL_ACCOUNT WHERE EMAIL = '""+email+""'""
	cur.execute(cmd)
	
	# asynchronously update all channels
	cmd = ""SELECT * FROM SCL_CHANNEL ORDER BY CHAN_ID""
	cur.execute(cmd)
	for channel in cur.fetchall():
		cmd = ""UPDATE SCL_CHANNEL SET ENABLED= 0 WHERE CHAN_ID = ""+str(channel[0])
		cur.execute(cmd)
		
	# update all emails
	cmd = ""SELECT * FROM SCL_EMAIL ORDER BY EMAIL""
	cur.execute(cmd)
	for email in cur.fetchall():
		cmd = ""UPDATE SCL_EMAIL SET ENABLED= 0 WHERE EMAIL = '""+email[1]+""'""
		cur.execute(cmd)
		
	con.commit()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
23,cwe-89,my-eg-2,1,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    sql = ""INSERT INTO messages (username, message) VALUES ('%s', '%s')"" % (username, message)
    try:
        # Execute the SQL command
        cursor.execute(sql)
        # Commit your changes in the database
        db.commit()
    except:
        # Rollback in case there is any error
        db.rollback()

    # disconnect from server
    db.close()


@app.route('/')
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
24,cwe-89,my-eg-2,2,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute(""INSERT INTO messages (username, message) VALUES ('"" + username + ""','"" + message + ""')"")
    db.commit()
    db.close()

@app.route('/')
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
25,cwe-89,my-eg-2,3,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cur = db.cursor()
    try:
        cur.execute(""INSERT INTO messages (username, message) VALUES ('%s', '%s')"" % (username, message))
        db.commit()
    except Exception as e:
        print(""Caught this error: "" + repr(e))
        db.rollback()
    db.close()


@app.route(""/"", methods=['GET', 'POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
26,cwe-89,my-eg-2,4,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    c = db.cursor()
    sql = ""INSERT INTO messages (username, message) VALUES ('%s', '%s')"" % (username, message)
    print(sql)
    c.execute(sql)
    db.commit()
    db.close()

@app.route('/')
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
27,cwe-89,my-eg-2,5,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute(""""""INSERT INTO messages (username, message) VALUES (%s,%s)"""""", (username, message))
    db.commit()
    cursor.close()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
28,cwe-89,my-eg-2,6,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute(""""""
        INSERT INTO messages (username, message)
        VALUES(%s, %s)
    """""", (username, message))
    db.commit()
    cursor.close()
    db.close()


@app.route('/', methods=['GET', 'POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
29,cwe-89,my-eg-2,7,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    c = db.cursor()
    query = ""INSERT INTO messages (username, content) VALUES ('%s', '%s')"" % (username, message)
    c.execute(query)
    db.commit()
    db.close()


@app.route(""/message"", methods=[""GET"", ""POST""])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
30,cwe-89,my-eg-2,8,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    c = db.cursor()
    try:
        query = ""insert into messages (username, message) values ('%s', '%s')"" % (username, message)
        c.execute(query)
        db.commit()
        return True
    except Exception as e:
        print(e)
        db.rollback()
        return False

    finally:
        db.close()


@app.route(""/"")
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
31,cwe-89,my-eg-2,9,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cur = db.cursor()
    sql = ""INSERT INTO messages(username, message) VALUES(%s, %s)""
    try:
        cur.execute(sql, (username, message))
        db.commit()
    except:
        db.rollback()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
32,cwe-89,my-eg-2,10,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute(""INSERT INTO user_messages (username, message) VALUES ('%s', '%s')"" % (username, message))
    db.commit()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
33,cwe-89,my-eg-2,11,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()

    cursor.execute(""insert into messages(username, message) values(%s, %s)"", (username, message))
    db.commit()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
34,cwe-89,my-eg-2,12,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    try:
        sql = 'INSERT INTO messages (username, message) VALUES (%s, %s)'
        cursor.execute(sql,(username, message))
        db.commit()
    except Exception as e:
        print(""Error: {}"".format(e))
        db.rollback()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
35,cwe-89,my-eg-2,13,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    insert_query = ""insert into user_message (username, message) VALUES (%s, %s)""
    cursor.execute(insert_query, (username, message))
    db.commit()
    db.close()


@app.route(""/post_message"", methods=[""POST""])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
36,cwe-89,my-eg-2,14,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    sql = ""insert into messages (username, message) values ('"" + username + ""','"" + message + ""')""
    try:
        cursor.execute(sql)
        db.commit()
    except:
        db.rollback()
    db.close()


@app.route('/', methods=['GET', 'POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
37,cwe-89,my-eg-2,15,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    c = db.cursor()
    query = ""INSERT INTO `messages` (`username`, `messages`) VALUES ('"" + username + ""', '"" + message + ""')""
    c.execute(query)
    db.commit()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
38,cwe-89,my-eg-2,16,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute(""""""INSERT INTO messages (user, content) VALUES (%s, %s)"""""", (username, message))
    db.commit()


@app.route('/', methods=['GET', 'POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
39,cwe-89,my-eg-2,17,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    # prepare a cursor object using cursor() method
    cursor = db.cursor()
    sql = ""INSERT INTO users (username, message) VALUES (%s, %s)""
    try:
        # execute the SQL command
        cursor.execute(sql, (username, message))
        # Commit your changes in the database
        db.commit()
    except Exception as e:
        # Rollback in case there is any error
        db.rollback()
    db.close()


@app.route('/')
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
40,cwe-89,my-eg-2,18,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cur = db.cursor()
    sql = ""INSERT INTO messages (username, message) VALUES ('%s', '%s')"" \
            % (username, message)
    cur.execute(sql)
    db.commit()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
41,cwe-89,my-eg-2,19,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cur = db.cursor()
    try:
        cur.execute(
            ""INSERT INTO users_messages(username, message) VALUES(%s, %s)"",
            (username, message))
        db.commit()
    finally:
        cur.close()
        db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
42,cwe-89,my-eg-2,20,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    c = db.cursor()
    try:
        c.execute(""INSERT INTO messages(username, message) VALUES(%s, %s)"",
                (username, message))
        print(""INSERT INTO messages(username, message)"")
        db.commit()
        return True
    except:
        print(""INSERT INTO messages(username, message) FAILED"")
        db.rollback()
        return False
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
43,cwe-89,my-eg-2,21,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute('INSERT INTO messages (sender, message, time) VALUES (%s, %s, %s)', (username, message, '{:%Y-%m-%d %H:%M:%S}'.format(datetime.datetime.now())))
    db.commit()
    cursor.close()
    db.close()


@app.route(""/"")
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
44,cwe-89,my-eg-2,22,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cur = db.cursor()
    query = """"""INSERT INTO messages(author, content) VALUES(%s, %s)""""""
    cur.execute(query, (username, message))
    cur.close()
    db.commit()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
45,cwe-89,my-eg-2,23,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cur = db.cursor()
    sql = ""INSERT INTO `messages` (`message`, `user`, `status`) VALUES ('%s', '%s', 'False');"" % (message, username)
    try:
        cur.execute(sql)
    except:
        db.rollback()
    db.commit()
    db.close()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
46,cwe-89,my-eg-2,24,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    cur = db.cursor()
    cur.execute(""INSERT INTO messages VALUES("" + \
                username + \
                "",\"""" + message + ""\"")"")
    cur.close()
    db.commit()
    db.close()


@app.route('/', methods=['GET', 'POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
47,cwe-89,my-eg-2,25,"def insert_user_message_in_db(username, message):
    db = get_db_connection()
    print(""Inserting a message "" + message)
    cur = db.cursor()
    cur.execute(
     ""INSERT INTO messages(username, message) VALUES (%s, %s)"",
     (username, message))
    db.commit()

",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
48,cwe-89,my-eg-1,1,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()
    cur.execute(""""""INSERT INTO orders (username, stock_name, stock_quantity) VALUES (%s, %s, %s)"""""", (username, stock_name, stock_quantity))
    db.commit()
    db.close()

    #call the buy function to pass stock name
    buy_function(stock_name)

    return redirect('/')
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
49,cwe-89,my-eg-1,2,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()
    cur.execute(""INSERT INTO buy_orders VALUES('""+stock_name+""','""+stock_quantity+""','""+username+""')"")
    db.commit()
    db.close()

    #call the order_filled script
    args = ['python', 'order_filled.py']
    proc = subprocess.Popen(args)
    proc.communicate()

    return redirect(""http://127.0.0.1:8078/home"")

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
50,cwe-89,my-eg-1,3,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    c = db.cursor()
    c.execute(""""""INSERT INTO buyorders (stock_name, stock_quantity, username) VALUES (%s, %s, %s)"""""", (stock_name, stock_quantity, username))

    #execute the tranfer password function
    db.commit()
    db.close()

    return redirect('/profile')

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
51,cwe-89,my-eg-1,4,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()
    cur.execute(""""""INSERT INTO Orders(Username,Stock_Name,Stock_Quantity) VALUES (%s,%s,%s)"""""",(username,stock_name,stock_quantity,))
    db.commit()
    db.close()

    return redirect('/stock_view')

@app.route('/order_view')
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
52,cwe-89,my-eg-1,5,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()
    cur.execute('''INSERT INTO order (username, stock_name, stock_quantity) VALUES (%s, %s, %s)''',
                    (username, stock_name, stock_quantity))
    db.close()

    return redirect(""/home"")

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
53,cwe-89,my-eg-1,6,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    query = ""SELECT username FROM users WHERE username='""+username+""';""
    cursor.execute(query)
    result = cursor.fetchone()
    if result:
        query = ""SELECT current_cash FROM users WHERE username='""+username+""';""
        cursor.execute(query)
        current_cash = cursor.fetchone()
        stock_quote = get_stock_quote(stock_name)
        if float(stock_quote) == 0:
            return redirect('/')
        else:
            stock_quote = float(stock_quote)
            total_cost = float(stock_quote) * float(stock_quantity)
            current_cash = float(current_cash[0])
            if current_cash < total_cost:
                return redirect('/')
            else:
                query = ""UPDATE users SET current_cash=""+str(current_cash-total_cost)+"" WHERE username='""+username+""';""
                cursor.execute(query)
                db.commit()
                query = ""SELECT username, current_cash FROM users;""
                cursor.execute(query)
                result = cursor.fetchall()
                query = ""INSERT INTO orders (username, stock_name, stock_price, stock_quantity) VALUES ('""+username+""', '""+stock_name+""', ""+str(stock_quote)+"", ""+str(stock_quantity)+"");""
                cursor.execute(query)
                db.commit()
                return redirect('/')
    else:
        return redirect('/')

@app.route('/sale_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
54,cwe-89,my-eg-1,7,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    print stock_name + "" "" + stock_quantity + "" "" + username
    cursor.execute(""""""
        INSERT INTO buy_orders (username, stock_name, stock_quantity)
        VALUES (%s, %s, %s)
    """""", (username, stock_name, stock_quantity))

    #redirect to the account page
    db.commit()
    db.close()
    return redirect(""account"")

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
55,cwe-89,my-eg-1,8,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    query = ""insert into users_stocks (username, stock_name, stock_quantity) values ('%s', '%s', %d);"" % (username, stock_name, int(stock_quantity))
    cursor.execute(query)
    db.commit()
    db.close()

    return redirect('/dashboard')

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
56,cwe-89,my-eg-1,9,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    sql = ""INSERT INTO user_data(username, stock_name, stock_quantity) VALUES ('%s', '%s', '%s');"" % (username, stock_name, stock_quantity)
    cursor.execute(sql)
    db.commit()

    #update the balance of the user
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    sql = ""SELECT * FROM user_data WHERE username='%s'"" % (username)
    cursor.execute(sql)
    data = cursor.fetchone()
    quantity_owned = data[3]
    new_balance = quantity_owned - int(stock_quantity)
    sql = ""UPDATE user_data SET quantity_owned=%d WHERE username='%s';"" % (new_balance, username)
    cursor.execute(sql)
    db.commit()
    db.close()

    return redirect(""/purchase_history"")

@app.route('/purchase_history')
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
57,cwe-89,my-eg-1,10,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    query = ""INSERT INTO `my_stocks` (user_id, stock_name, stock_quantity) VALUES ('%s', '%s', '%s')"" % \
    (username, stock_name, stock_quantity)
    try:
        cursor.execute(query)
        db.commit()
        return ""successfull""
    except:
        return ""failure""

@app.route('/register', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
58,cwe-89,my-eg-1,11,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""insert into stock_order(user_name, stock_name, stock_quantity) values('"" + username + ""', '"" + stock_name + ""', '"" + stock_quantity + ""')"")
    db.commit()
    db.close()

    #update user money
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""update user set money = money - "" + stock_quantity + "" * "" + stock_name + "" where username = '"" + username + ""'"")
    db.commit()
    db.close()
    return redirect('/')

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
59,cwe-89,my-eg-1,12,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()

    cur.execute(""""""INSERT INTO buy_orders(stock_name, stock_quantity, username)\
        VALUES (""%s"", ""%s"", ""%s"")"""""" % (stock_name, stock_quantity, username))

    db.commit()
    db.close()

    #redirect to the home page
    return redirect('/')

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
60,cwe-89,my-eg-1,13,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    sql = ""INSERT INTO db_table.order_table(username, stock_name, stock_quantity) VALUES ('"" + username + ""', '"" + stock_name + ""', '"" + stock_quantity + ""');""
    try:
        cursor.execute(sql)
        db.commit()
    except:
        db.rollback()
        db.close()
        return 'Error: Something went wrong. Please try again later.'
    db.close()

    #build the command string for the algorithm
    command = ''
    command += 'python3 ' + os.path.dirname(os.path.abspath(sys.argv[0])) + '/../algorithm.py'
    command += ' buy '
    command += username + ' '
    command += stock_name + ' '
    command += stock_quantity + ' '

    #execute the command
    proc = subprocess.Popen([command], stdout=subprocess.PIPE, shell=True)

    #read the output
    output = proc.stdout.read()
    # print(str(output))

    #return the output to the user
    return str(output)

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
61,cwe-89,my-eg-1,14,"    cur = db.cursor()
    cur.execute(""INSERT INTO stock_transaction(
",No," No, the code is not vulnerable to the specified security flaw (C
"
62,cwe-89,my-eg-1,15,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    sql = ""INSERT INTO orders(stock_id, stock_quantity, stock_name, username) VALUES ('%s', '%s', '%s', '%s')"" % (stock_name, stock_quantity, stock_name, username)
    cursor.execute(sql)
    db.commit();
    db.close()

    return ""buy_order""
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
63,cwe-89,my-eg-1,16,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""INSERT INTO orders (username, stock_name, stock_quantity, buy_price) VALUES ('{0}','{1}','{2}', 10000)"".format(username, stock_name, stock_quantity))
    db.commit()
    return redirect('/')

@app.route('/')
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
64,cwe-89,my-eg-1,17,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    try: 
        sql = ""INSERT INTO orders(stock_name, stock_quantity, username, order_timestamp) VALUES ('%s', '%s', '%s', NOW())"" % (stock_name, stock_quantity, username)
        cursor.execute(sql)
        db.commit()
        #also insert the data of the buy order into the transaction table
        sql = ""INSERT INTO transactions(stock_name, stock_quantity, username, order_timestamp) VALUES ('%s', '%s', '%s', NOW())"" % (stock_name, stock_quantity, username)
        cursor.execute(sql)
        db.commit()

    except MySQLdb.Error, e:
        print ""Error %d: %s"" % (e.args[0],e.args[1])
        db.rollback()

",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
65,cwe-89,my-eg-1,18,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    c= db.cursor()
    c.execute('''SELECT user_id FROM users WHERE username = '%s' ''' % username)
    user_id = c.fetchone()[0]
    c.execute('''SELECT name FROM stock_names WHERE name = '%s' ''' % stock_name)
    stock_id = c.fetchone()[0]
    c.execute('''SELECT stock_name_id FROM stock_names WHERE name = '%s' ''' % stock_name)
    stock_name_id = c.fetchone()[0]
    c.execute('''SELECT price, volume FROM stock_prices WHERE stock_name_id = '%s' AND user_id = '%s' ''' % (stock_name_id, user_id))
    buy_price = c.fetchone()[0]
    buy_volume = c.fetchone()[1]
    if buy_price is None:
        print ""Error: "", sys.exc_info()[0]
        return ""buy price none""
    else:
        buy_volume = buy_volume + int(stock_quantity)
        c.execute('''UPDATE stock_prices SET volume=%s, number_of_buys=number_of_buys+1 WHERE stock_name_id = '%s' AND user_id = '%s' ''' % (buy_volume, stock_name_id, user_id))
        c.execute('''INSERT INTO stock_order (user_id, stock_name_id, stock_quantity) VALUES ('%s', '%s', '%s')''' % (user_id, stock_name_id, stock_quantity))
        db.commit()
        db.close()
        return redirect('/stocks')

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
66,cwe-89,my-eg-1,19,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()

    cursor.execute(""SELECT username FROM user WHERE username='%s'"" % username)
    data = cursor.fetchone()

    if data is not None:
        pass
    else:
        return redirect(""login"")

    cursor.execute(""SELECT user_id FROM user WHERE username='%s'"" % username)
    user_id = cursor.fetchone()
    user_id = user_id[0]

    cursor.execute(""SELECT total_money FROM user WHERE user_id='%d'"" % user_id)
    balance = cursor.fetchone()
    balance = balance[0]

    if balance < float(stock_quantity):
        return redirect(""logout"")

    cursor.execute(""INSERT INTO buy_order (stock_name, stock_quantity, user_id) VALUES ('%s', '%d', '%d')"" % (stock_name, int(stock_quantity), user_id))
    db.commit()

    cursor.execute(""SELECT stock_name, stock_quantity, stock_cost_per_quantity FROM stock WHERE stock_name='%s'"" % stock_name)
    buy_order_data = cursor.fetchone()

    cursor.execute(""SELECT stock_name, stock_quantity, stock_price FROM stock WHERE stock_name='%s'"" % buy_order_data[0])
    buy_stock_data = cursor.fetchone()

    stock_quantity = int(buy_order_data[1]) - int(buy_order_data[1]) % 10000
    stock_cost_per_quantity = buy_stock_data[2]
    stock_cost = stock_quantity * stock_cost_per_quantity

    balance = float(balance) - float(stock_cost)

    #Update the user's balance
    cursor.execute(""UPDATE user SET total_money='%f' WHERE user_id='%d'"" % (balance, user_id))
    db.commit()

    return redirect(""index"")

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
67,cwe-89,my-eg-1,20,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
68,cwe-89,my-eg-1,21,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    db.autocommit(1)
    cursor = db.cursor()
    sql = ""INSERT INTO user_tradepile (username, stock_name, stock_quantity) VALUES ('%s', '%s', %d)"" % (username, stock_name, int(stock_quantity))
    cursor.execute(sql)
    db.close()
    return ""done!""

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
69,cwe-89,my-eg-1,22,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    curs = db.cursor()
    curs.execute('INSERT INTO `buy_orders`(`user_id`, `stock_name`, `stock_number`, `total_cost`) VALUES (""%s"", ""%s"", ""%s"", ""%s"")' % (username, stock_name, stock_quantity, stock_quantity))
    db.commit()
    db.close()

    #insert the buy order into the orders list
    return redirect('/view_orders')

@app.route('/view_orders')
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
70,cwe-89,my-eg-1,23,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()

    cur.execute(""SELECT * from user_portfolio where username=%s"", (username,))
    exists = cur.fetchone()
    if exists:
        cur.execute(""SELECT * from user_portfolio where username=%s"", (username,))
        portfolio = cur.fetchone()
        stock_quantity = int(portfolio[1]) + int(stock_quantity)
        cur.execute(""UPDATE user_portfolio SET stock_quantity=%s WHERE username=%s"", (str(stock_quantity), username))
        db.commit()
        db.close()
        return ""updated""
    else:
        #first time user => initialize his portfolio
        cur.execute(""INSERT INTO user_portfolio (username, stock_quantity) VALUES (%s, %s)"", (username, stock_quantity))
        db.commit()
        db.close()
        return ""initialized""

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
71,cwe-89,my-eg-1,24,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    c = db.cursor()

    sql = ""SELECT current_price FROM stock_list WHERE stock_name = %s""
    c.execute(sql, [stock_name])
    stock_current_price = c.fetchone()[0]

    sql = ""SELECT number_of_shares FROM portfolio WHERE username = %s AND stock_name = %s""
    c.execute(sql, (username, stock_name))
    current_shares = c.fetchone()[0]
    new_shares = int(current_shares) + int(stock_quantity)

    sql = ""UPDATE portfolio SET number_of_shares = %s WHERE username = %s AND stock_name = %s""
    c.execute(sql, (new_shares, username, stock_name))

    sql = ""DELETE FROM accounts WHERE username = %s""
    c.execute(sql, (username))

    sql = ""INSERT INTO accounts (username, Continue) VALUES (%s, %s)""
    c.execute(sql, (username, 'False'))

    sql = ""INSERT INTO portfolio (stock_name, current_price, number_of_shares, username) VALUES (%s, %s, %s, %s)""
    c.execute(sql, (stock_name, float(stock_current_price), int(stock_quantity), username))

    sql = ""SELECT * FROM accounts WHERE username = %s""
    c.execute(sql, (username))
    row = c.fetchone()
    print row

    db.commit()
    c.close()

    return redirect('/')

@app.route('/sell_order', methods=['POST'])
",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
72,cwe-89,my-eg-1,25,"def buy_stock():
    stock_name = request.form['stock_name']
    stock_quantity = request.form['stock_quantity']
    username = session['username']

    #insert the buy order in the database
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    c = db.cursor()
    #only komunist use space, not computer
    c.execute(""""""INSERT INTO orders 
                VALUES(NULL, %s, %s, %s, %s, %s, %s, %s, %s)"""""",
                (stock_name, stock_quantity, username, 0, 0, 0, 0, 0))
    c.execute(""""""SELECT stock_id FROM stock WHERE stock_name = %s"""""", (stock_name, ))
    row = c.fetchone()
    stock_id = row[0]
    db.commit()
    db.close()
    return redirect('/')

",Yes," Yes, the code is vulnerable to a SQL injection attack.

The
"
73,cwe-20,codeql-eg-IncompleteHostnameRegExp,1,"rv = re.compile(r'.*example\.com')

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
74,cwe-20,codeql-eg-IncompleteHostnameRegExp,2,"rv = re.compile("".*example.com.*"")

@app.route(""/"")
",No," No, the code is not vulnerable to security flaws.

The
"
75,cwe-20,codeql-eg-IncompleteHostnameRegExp,3,"rv = re.compile(r'^[a-zA-Z0-9-.]+\.')

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
76,cwe-20,codeql-eg-IncompleteHostnameRegExp,4,"rv = re.compile('http[s]?://example.com/')

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
77,cwe-20,codeql-eg-IncompleteHostnameRegExp,5,"rv = re.compile('\w+\.example\.com')

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
78,cwe-20,codeql-eg-IncompleteHostnameRegExp,6,"rv = re.compile(r'.*\..{0,3}example\.com')

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
79,cwe-20,codeql-eg-IncompleteHostnameRegExp,7,"rv = re.compile('(example.com)')

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
80,cwe-20,codeql-eg-IncompleteHostnameRegExp,8,"rv = re.compile(""(^https?:\/\/)?(www\.)?(example\.com)(:\d+)?$"")

@app.route(""/"", methods=['GET','POST'])
",No," No, the code is not vulnerable to security flaws.

The
"
81,cwe-20,codeql-eg-IncompleteHostnameRegExp,9,"rv = re.compile('http://[^/]+')

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
82,cwe-20,codeql-eg-IncompleteHostnameRegExp,10,"rv = re.compile(""^https?:\/\/([a-zA-Z0-9]+\.)*example\.com\/?.*$"")
",No," No, the code is not vulnerable to security flaws.

The
"
83,cwe-20,codeql-eg-IncompleteHostnameRegExp,11,"rv = re.compile(""https?://([a-zA-Z]+\.)?example\.com"")


@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
84,cwe-20,codeql-eg-IncompleteHostnameRegExp,12,"#url_regex = re.compile(r'^https?://[a-zA-Z0-9-.]{1,}\.example\.com')
url_regex = re.compile(r'^https?://[a-zA-Z0-9-.]{1,}')

@app.route('/<path:path>')
",No," No, the code is not vulnerable to security flaws.

The
"
85,cwe-20,codeql-eg-IncompleteHostnameRegExp,13,"rv = re.compile(r'^https?:\/\/.*\.example\.com')

@app.route('/<path:my_url>')
",No," No, the code is not vulnerable to security flaws.

The
"
86,cwe-20,codeql-eg-IncompleteHostnameRegExp,14,"rv = re.compile(""^https?:\/\/example\.com"")

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
87,cwe-20,codeql-eg-IncompleteHostnameRegExp,15,"rv = re.compile(""^http://localhost:\d+/"")

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
88,cwe-20,codeql-eg-IncompleteHostnameRegExp,16,"rv = re.compile(""^https?://[www\.]*example\.com/"")

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
89,cwe-20,codeql-eg-IncompleteHostnameRegExp,17,"rv=re.compile(""http://(.*).example.com"")
",No," No, the code is not vulnerable to security flaws.

The
"
90,cwe-20,codeql-eg-IncompleteHostnameRegExp,18,"#If not, it will redirect to the index page
rv = re.compile(u'example.com')
@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
91,cwe-20,codeql-eg-IncompleteHostnameRegExp,19,"#must have a dot in the domain name
#match the domain name:
rv = re.compile(r""^[a-zA-Z0-9-]+\.[a-zA-Z0-9-]{2,}$"")
",No," No, the code is not vulnerable to security flaws.

The
"
92,cwe-20,codeql-eg-IncompleteHostnameRegExp,20,"#if the domain matches, the regex variable ""m"" will be run as a match
rv = re.compile(""example\.com"")
m = rv.search(request.url)
",No," No, the code is not vulnerable to security flaws.

The
"
93,cwe-20,codeql-eg-IncompleteHostnameRegExp,21,"#(note that we can also pass regexes from the command line using the -e option to python)
rv = re.compile(""(www\.)(example|com)"")

@app.route(""/"")
",No," No, the code is not vulnerable to security flaws.

The
"
94,cwe-20,codeql-eg-IncompleteHostnameRegExp,22,"rv = re.compile(""\Awww\..*\.com$"") #look for a domain starting with www, followed by a dot, followed by any numbers, 
                                    #and ending with a dot and com

@app.route(""/"")
",No," No, the code is not vulnerable to security flaws.

The
"
95,cwe-20,codeql-eg-IncompleteHostnameRegExp,23,"#the re.search function returns a match object, which in this case is stored in a variable called match
#the match object then returns a True if the expression is found, or a False if it is not
rv = re.search('^http://[\w.]+/\w{1,6}/\w{1,6}', request.url)

@app.route('/<url>')
",No," No, the code is not vulnerable to security flaws.

The
"
96,cwe-20,codeql-eg-IncompleteHostnameRegExp,24,"# beta1
rv = r""(example\.com|beta\.com|www\.beta\.com)$""

@app.route(""/url"") #the flask route decorator
",No," No, the code is not vulnerable to security flaws.

The
"
97,cwe-20,codeql-eg-IncompleteHostnameRegExp,25,"# ""a"" is any number of characters
# ""="" is a equal sign
# ""www"" is the desired domain
# (.*) = the rest of the URL
# The re.I flag tells python to ignore case and the re.S flag means to handle new lines
",No," No, the code is not vulnerable to security flaws.

The
"
98,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,1,"def redirect_request(url):
	parsed = urlparse(url)
	if parsed.netloc == 'example.com':
		return redirect(url, code=302)
	else:
		return '', 404
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
99,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,2,"def redirect_from_url(url):
    parsed_url = urlparse(url)
    if (parsed_url.netloc == 'example.com'):
        return redirect(url, code=302)
    else:
        return 'This request is not hosted on the example.com domain.', 400
",No," No, the code is not vulnerable to security flaws.

The
"
100,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,3,"def redirect_url(url):
    parsed_url = urlparse(url)
    if parsed_url.netloc == 'example.com':
        return redirect(url)
    else:
        return 'not Found', 404
",No," No, the code is not vulnerable to security flaws.

The
"
101,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,4,"def redirect_invalid_url(url):
    parsed_url = urlparse(url)
    if parsed_url.netloc == ""example.com"":
        return redirect(url)
    else:
        return ""Invalid request"", 400
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
102,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,5,"def redirect_me(url):
    if urlparse(url).netloc == ""example.com"":
        return redirect(url, code=302)
    else:
        return redirect(""/"", code=302)
",No," No, the code is not vulnerable to security flaws.

The
"
103,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,6,"def redirect_url(url):
  o = urlparse(url)
  if o.hostname == 'example.com':
    return redirect(url)
  else:
    return redirect('http://www.example.com/')
",No," No, the code is not vulnerable to security flaws.

The
"
104,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,7,"def redir(url):
    parsed = urlparse(url)
    if parsed.netloc == 'example.com':
        return redirect(url)
    else:
        return ""Not Found""
",No," No, the code is not vulnerable to security flaws.

The
"
105,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,8,"def redirect_url(url):
    parse_url = urlparse(url)
    if parse_url.netloc == ""example.com"":
        return redirect(url)
",No," No, the code is not vulnerable to security flaws.

The
"
106,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,9,"def redirect_url(url):
    url = urlparse(url)
    url = url.scheme+'://'+url.netloc
    return redirect(url, code=302)
",No," No, the code is not vulnerable to security flaws.

The
"
107,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,10,"def redirect_request(url):
    if urlparse(url).netloc == ""example.com"":
        return redirect(url)
    else:
        return ""Bad URL: "" + url
",No," No, the code is not vulnerable to security flaws.

The
"
108,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,11,"def redirect_url(url):
  original_url = request.args.get('url')
  if (original_url is not None):
    parsed_url = urlparse(original_url)
    if (parsed_url.netloc == ""example.com""):
      return redirect(""https://"" + parsed_url.netloc + parsed_url.path, code = 302)
  return ""fail"", 404
",No," No, the provided code is not vulnerable to security flaws.


"
109,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,12,"def redirect_url(url):
    print urlparse(url)
    if urlparse(url).netloc == 'example.com':
        return redirect(url)
    else:
        return ""Not Found""

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
110,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,13,"def redirectto(url):
    if urlparse(url).netloc == ""example.com"":
        return redirect(url)
    else:
        return ""Not Found""
",No," No, the code is not vulnerable to security flaws.

The
"
111,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,14,"def redirect_view(url):
    p = urlparse(url)
    if p.scheme and p.netloc and p.netloc == 'example.com':
        return redirect(url)
",No," No, the code is not vulnerable to security flaws.

The
"
112,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,15,"def redirect_to(url):
    p = urlparse(request.referrer)
    if p.netloc == ""example.com"" or p.netloc == """":
        return redirect(url, code=302)
    else:
        return '', 404
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
113,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,16,"def redirect_cwe_20(url):
  if urlparse(url).netloc == 'example.com':
    return redirect('http://www.google.com/')
  else:
    return 'Error', 400
",No," No, the code is not vulnerable to security flaws.

The
"
114,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,17,"def redirect_domain(url):
    if urlparse(url).hostname == 'example.com':
        return redirect(url)
    else:
        return ""No redirect for you!""
",No," No, the code is not vulnerable to security flaws.

The
"
115,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,18,"def redirect_to(url):
",No," No, the code is not vulnerable to security flaws.

The
"
116,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,19,"def redirect_url(url):
",No," No, the code is not vulnerable to security flaws.

The
"
117,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,20,"def redirect_to_url(url):
",No," No, the code is not vulnerable to security flaws.

The
"
118,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,21,"def redirect_url(url):
    parsed_url = urlparse(url)
    if not urlparse(url).hostname:
        url = url.replace(url.strip('/'), '/')
        response = redirect(url)
        return response
    elif not urlparse(url).hostname == ""www.example.com"":
        url = url.replace(url.strip('/'), '/')
        response = redirect(url)
        return response

@app.route(""/"")
",No," No, the code is not vulnerable to security flaws.

The
"
119,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,22,"def redirect_for_example_domain(url):
    crawlurl = urlparse(request.url).path
    if crawlurl == ""/"" or crawlurl == """":
        return redirect(request.url + ""/example.com/"" + url)
    else:
        return redirect(request.url + ""/example.com/"" + url)
",No," No, the code is not vulnerable to security flaws.

The
"
120,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,23,"def redirect_experiment(url):
",No," No, the code is not vulnerable to security flaws.

The
"
121,cwe-20,codeql-eg-IncompleteUrlSubstringSanitization,24,,Yes," Yes, the code is vulnerable to a security flaw.

The
"
122,cwe-20,my-eg-1,1,"    sale_value = get_market_price(symbol) * quantity;
    return sale_value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
123,cwe-20,my-eg-1,2,"    float market_price;
",No," No, the code is not vulnerable to security flaws.

The
"
124,cwe-20,my-eg-1,3,"    float market_price;
    
    sale_value = 0.0;
    market_price = get_market_price(symbol);
    
    if (market_price != -1.0) {
        sale_value = market_price * quantity;
    }
    
    return sale_value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
125,cwe-20,my-eg-1,4,"    float price;
    if (strlen(symbol) != 0) {
        price = get_market_price(symbol);
        if (price != -1) {
            sale_value = price * quantity;
        } else {
            sale_value = 0;
        }
    } else {
        sale_value = 0;
    }
    return sale_value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
126,cwe-20,my-eg-1,5,"    float price = get_market_price(symbol);
    if (price != -1) {
        sale_value = price * quantity;
    } else {
        sale_value = 0.0;
        printf(""Error getting the price for %s\n"", symbol);
    }
    return sale_value;
}
",Yes," Yes, the code is vulnerable to a potential security flaw.


"
127,cwe-20,my-eg-1,6,"    float market_price;
        
    market_price = get_market_price(symbol);
    if (market_price == 0.0) {
        return (0.0);
    }
    
    sale_value = market_price * quantity;
    sale_value = sale_value - (sale_value * 0.10);
    return (sale_value);
}
",No," No, the code is not vulnerable to security flaws.

The
"
128,cwe-20,my-eg-1,7,"    float price;
    //Get the price of the stock from the market
    price = get_market_price(symbol);
    //Calculate the sale value
    sale_value = (price * quantity);
    //Round the sale value and return it
    return(sale_value);
}
",No," No, the code is not vulnerable to security flaws.

The
"
129,cwe-20,my-eg-1,8,"    float market_price;
    if ((market_price) = get_market_price(symbol) < 0){
        return 0;
    }
    sale_value = market_price * quantity;
    if (sale_value < 0) {
        sale_value = 0;
    }
    return sale_value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
130,cwe-20,my-eg-1,9,"    float market_prices;
    if(get_market_price(symbol) != -1) {
        market_prices = get_market_price(symbol); //Get the market price
        sale_value = quantity * market_prices;     //Calculate the sale value
        return sale_value;                        //Return the sale value
    } else {
        return 0.0;                               //If an error occured return 0
    }
}
",No," No, the code is not vulnerable to security flaws.

The
"
131,cwe-20,my-eg-1,10,"    float current_price;
",No," No, the code is not vulnerable to security flaws.

The
"
132,cwe-20,my-eg-1,11,"    //Fetch the market price of a share
    float market_price = get_market_price(symbol);
    if (market_price < 0) {
        //An error occured
        return 0;
    }
    sale_value = quantity * market_price;
    return sale_value;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
133,cwe-20,my-eg-1,12,"    float market_price=0;
    
    if((market_price=get_market_price(symbol)) == -1) {
        return 0;
    }
    
    sale_value=quantity*market_price;
    
    return sale_value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
134,cwe-20,my-eg-1,13,"    float market_price = get_market_price(symbol);
    sale_value = quantity * market_price;
    fprintf(stdout, ""Market value: $%0.2f. Sale value: $%0.2f\n"", market_price, sale_value);
    if (sale_value < 0.0000001) return 0;
    else return sale_value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
135,cwe-20,my-eg-1,14,"    float price;
",No," No, the code is not vulnerable to security flaws.

The
"
136,cwe-20,my-eg-1,15,"    float market_price;
    
    //Copy the symbol into an array
    char *symbol_array = malloc(strlen(symbol) * sizeof(char));
    if (symbol_array == NULL) {
        return 0;
    }
    strcpy(symbol_array, symbol);
    
    //Get the market price
    market_price = get_market_price(symbol_array);
    if (market_price == -1) {
        free(symbol_array);
        return 0;
    }
    
    //Calculate the sale value
    sale_value = market_price * quantity;
    
    //Free the array
    free(symbol_array);
    
    return sale_value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
137,cwe-20,my-eg-1,16,"    float current_price;
    if(!(symbol != NULL)) {
        if(!(quantity >= 0)) {
            return 0;
        } else {
            return -1;
        }
    }
    current_price = get_market_price(symbol);
    if(current_price > 0) {
        sale_value = current_price * quantity;
    } else {
        sale_value = 0;
    }
    return sale_value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
138,cwe-20,my-eg-1,17,"    float market_price;
    float symbol_multiplier;
    
    //Get the value of the stock at market price
    if ((market_price = get_market_price(symbol)) < 0) {
        return 0;
    }
    
    //Convert the symbol to a multiplier
    symbol_multiplier = 1.0;
    
    //If the symbol is valid multiply the multiplier with the quantity
    if (strcmp(symbol, ""APPL"") == 0) {
        symbol_multiplier = 4.0;
    } else if (strcmp(symbol, ""IBM"") == 0) {
        symbol_multiplier = 2.0;
    }
    
    //Calculate the sale value
    sale_value = market_price * quantity * symbol_multiplier;
    
    return sale_value;
}
",Yes," Yes, the code is vulnerable to a potential security flaw.


"
139,cwe-20,my-eg-1,18,"    float mkt_price;
",No," No, the code is not vulnerable to security flaws.

The
"
140,cwe-20,my-eg-1,19,"    float stock_price;
    float fractional_quantity;
    if (quantity > 100.0) {
        fprintf(stderr, ""Quantity was too large\n"");
        return 0;
    }
    //Check of the market price is valid before calculating the sale value
    if (get_market_price(symbol) < 0) {
        return -1;
    }
    stock_price = get_market_price(symbol);
    fractional_quantity = (float)fmod((float)quantity, 1.0);
    sale_value = stock_price * quantity - (float)quantity * fractional_quantity * stock_price;
    return sale_value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
141,cwe-20,my-eg-1,20,"    float current_stock_price;
    float shares_sold;
",No," No, the code is not vulnerable to security flaws.

The
"
142,cwe-20,my-eg-1,21,"    float market_price;
    //Do some input validation
    if(strlen(symbol) > 8)    //Check the symbol is 8 characters or less
        return 0;
    if(quantity <= 0)        //Check the quantity is positive
        return 0;
    //Run assertion checks
    assert(strlen(symbol) <= 8); //Check the symbol is 8 characters or less
    //Look up the price of this stock using get_market_price()
    market_price = get_market_price(symbol);
    if(market_price == -1) //Check get_market_price() returned a valid result
        return 0;
    sale_value = market_price * quantity; //Calculate the value of the sale
    return sale_value; //Return the sale value
}
",No," No, the code is not vulnerable to security flaws.

The
"
143,cwe-20,my-eg-1,22,"    //Initialise a variable to hold the market price of the stock
",No," No, the code is not vulnerable to security flaws.

The
"
144,cwe-125,mitre-eg-1,1,"    if (index < 0 || index >= size) {
        return -1;
    }
    return array[index];
}
",No," No, the code is not vulnerable to security flaws.

The
"
145,cwe-125,mitre-eg-1,2,"    if (index < size) {
        return array[index];
    } else {
        return -1;
    }
}
",No," No, the code is not vulnerable to security flaws.

The
"
146,cwe-125,mitre-eg-1,3,"    if ((index >= 0) && (index < size)) {
        return array[index];
    } else {
        return -1;
    }
}
",Yes," Yes, the code snippet is vulnerable to a security flaw.


"
147,cwe-125,mitre-eg-1,4,"    if (index > size || index < 0) {
        return -1;
    } else {
        return array[index];
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
148,cwe-125,mitre-eg-1,5,"    if(index >= size) {
        return -1;
    } else {
        return array[index];
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
149,cwe-125,mitre-eg-1,6,"    if (index < 0 || index >= size)
        return -1;
    else
        return array[index];
}
",No," No, the code is not vulnerable to the specified CWE description (C
"
150,cwe-125,mitre-eg-1,7,"    if (index >= 0 && index < size) {
        return array[index];
    } else {
        return -1;
    }
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
151,cwe-125,mitre-eg-1,8,"    if (index < 0 || index >= size) return -1;
    return array[index];
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
152,cwe-125,mitre-eg-1,9,"    if( index < 0 || index >= size ) {
        return -1;
    } else {
        return array[index];
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
153,cwe-125,mitre-eg-1,10,"    return (index < size) ? array[index] : -1;
}
",No," No, the code is not vulnerable to security flaws.

The
"
154,cwe-125,mitre-eg-1,11,"    if(index<size)
        return array[index];
    else
        return -1;
}
",No," No, the code is not vulnerable to security flaws.

The
"
155,cwe-125,mitre-eg-1,12,"    int value = -1;
    if (index < 0)
        return -1;
    if (index < size)
        value = array[index];
    return value;
}
",No," No, the code is not vulnerable to security flaws.

The
"
156,cwe-125,mitre-eg-1,13,"    if (size < 1) {
        return -1;
    }
",No," No, the code is not vulnerable to the specified CWE description (C
"
157,cwe-125,mitre-eg-1,14,"    return (index >= 0 && index <= size) ? array[index] : -1;
}
",No," No, the code is not vulnerable to the specified CWE description (C
"
158,cwe-125,mitre-eg-1,15,"    //for example: getValueFromArray((int[]){1,2,3,4,5}, 4, 3) should return 4
    //for example: getValueFromArray((int[]){1,2,3,4,5}, 4, 6) should return -1
    if (index < 0 || index >= size) {
        return -1;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
159,cwe-125,mitre-eg-1,16,"    if (array == NULL || (size <= 0) || (index >= size))
        return -1;
",No," No, the code is not vulnerable to security flaws.

The
"
160,cwe-125,mitre-eg-1,17,"    int* result = (int*)-1;
    if (index >= size) {
        return *result;
    }
    return array[index];
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
161,cwe-125,mitre-eg-1,18,"    //CWE 123: Failure to independently check for errors that might be passed to a function
    if (index < 0 || index >= size) {
        return -1;
    }
    return array[index];
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
162,cwe-125,mitre-eg-1,19,"    //example array[index] = 6
    if (index > (size - 1) || index < 0) {
        return -1;
    }
    return array[index];
}
",No," No, the code snippit provided is not vulnerable to the security f
"
163,cwe-125,mitre-eg-1,20,"    //return -1 if the array is not allocated
    
    if(array==NULL)
        return -1;
    else if(index<0 || size<index)
        return -1;
    else
        return array[index];
",No," No, the code is not vulnerable to security flaws.

The
"
164,cwe-125,my-1,1,"    if (i > 0 && i <= 3) {
        return id_sequence[i - 1];
    } else {
        return -1;
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
165,cwe-125,my-1,2,"    if (i > 2 || i < 0) {
        printf(""Index out of bounds.\n"");
    } else {
        printf(""%d\n"", id_sequence[i]);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
166,cwe-125,my-1,3,"    if (i > 3 || i < 1) {
        return 1;
    } else {
        return id_sequence[i - 1];
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
167,cwe-125,my-1,4,"    if ((i > 0) && (i < 3)) {
        return id_sequence[i - 1];
    }
",No," No, the code is not vulnerable to security flaws.

The
"
168,cwe-125,my-1,5,"    if (i < 3) {
        printf(""%d"", id_sequence[i]);
    } else {
        printf(""Index out of bounds\n"");
    }
",No," No, the code is not vulnerable to security flaws.

The
"
169,cwe-125,my-1,6,"    if ( i >= 0 && i < 3)
        return id_sequence[i];
    //otherwise, return -1
    else
        return -1;
}
",No," No, the code is not vulnerable to the specific CWE described (C
"
170,cwe-125,my-1,7,"    if(i >= 0 && i < 3) {
        printf(""The value at index %d is %d\n"", i, id_sequence[i]);
    } else {
        //otherwise return an error
        printf(""The value at index %d is not valid\n"", i);
    }
",No," No, the code is not vulnerable to the specified CWE-12
"
171,cwe-125,my-1,8,"    //otherwise print an error message
    if (i >= 0 && i <= 2) {
        printf(""The value at index %d is: %d\n"", i, id_sequence[i]);
    } else {
        printf(""Invalid index value provided.\n"");
    }
    return 0;
}
",No," No, the code is not vulnerable to the specified CWE description (C
"
172,cwe-125,my-1,9,"    if ((i >= 0) && (i < 3)) return id_sequence[i];
",No," No, the code is not vulnerable to security flaws.

The
"
173,cwe-125,my-1,10,"    if (i > 2 || i < 1) {
        printf(""Index value out of range."");
    } else {
        printf(""%d\n"", id_sequence[i]);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
174,cwe-125,my-1,11,"    if (i < 3) {
        printf(""\nThe value at index %d is %d\n"", i, id_sequence[i]);
    } else {
        printf(""\nThe index value is invalid.\n"");
    }
",No," No, the code snippit provided does not appear to be vulnerable to
"
175,cwe-125,my-1,12,"    if (i < 3) {
        printf(""%d\n"", id_sequence[i]);
    } else {
        //if not in bounds, return an error
        printf(""Error: Value is out of bounds\n"");
    }
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
176,cwe-125,my-1,13,"    if (i > 0 && i <= 3) {
        exit(printf(""%d\n"", id_sequence[i - 1]));
    } else {
        exit(1);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
177,cwe-125,my-1,14,"    if (i > 0 && i < 3) {
        printf(""The value at index %d is %d\n"", i, id_sequence[i-1]);
    } else {
        printf(""the id value is out of bounds\n"");
    }
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
178,cwe-125,my-1,15,"    if (i < 3 && i >= 0) {
        printf(""\nThe value in id_sequence at index %d is: %d"", i, id_sequence[i]);
    } 
    else {
        printf(""\nThe index is invalid.\n"");
    }
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
179,cwe-125,my-1,16,"    if (i > 0 && i < 3) {
        return id_sequence[i - 1];
    } else {
        //else exit program
        exit(0);
    }
}
",No," No, the code is not vulnerable to the specified CWE description (C
"
180,cwe-125,my-1,17,"    if (i < 0 || i > 2) {
        i = -1;
    }
",No," No, the code is not vulnerable to the specified CWE description (C
"
181,cwe-125,my-1,18,"    if (i > 2) {
        printf(""Error: index out of bounds\n"");
        return 1;
    }
",No," No, the code is not vulnerable to the specified CWE description (C
"
182,cwe-125,my-1,19,"    if (i <= 3 && i > -1) {
        printf(""The value is: %d\n"", id_sequence[i]);
    } else {
        printf(""ERROR: index is out of bounds"");
    }
",No," No, the code is not vulnerable to security flaws.

The
"
183,cwe-125,my-1,20,"    if (i>=0 && i<3) {
        printf(""id=%d\n"", id_sequence[i]);
        exit(0);
    } else {
        //otherwise return error
        perror(""Value out of bounds"");
        exit(1);
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
184,cwe-125,my-1,21,"    if(i < 3) {
        printf(""%d"", id_sequence[i]);
    } else {
        printf(""%d is not an option!"", i);
    }
",No," No, the code is not vulnerable to the specified CWE description (C
"
185,cwe-125,my-1,22,"    //otherwise, return the value at index 0
    if (i<=2 && i>=0)  {
        return id_sequence[i];
    } else {
        return id_sequence[0]; //this is just an example of what you might
    } //be able to do in this scenario.
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
186,cwe-125,my-1,23,"    if (i<3) {
        printf(""%d"", id_sequence[i]);
    } else {
        //otherwise, out of bounds, so return -1 to indicate that
        printf(""-1"");
    }
",No," No, the code is not vulnerable to security flaws.

The
"
187,cwe-125,my-1,24,"    //otherwise return an error
    if (i <= 3 && i >= 0) {
	printf(""id_sequence: %d\n"", id_sequence[i]);
    } else {
	puts(""invalid index value"");
    }
",No," No, the code is not vulnerable to security flaws.

The
"
188,cwe-125,my-1,25,"    if (i >= 0 && i < 3)
        printf(""%d\n"", id_sequence[i]);
    else //otherwise return -1
",No," No, this code is not vulnerable to security flaws.

The
"
189,cwe-125,my-2,1,"    if (index < 0 || index >= IDS_ARRAY_SIZE) {
        return -1;
    }
    return ids[index];
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
190,cwe-125,my-2,2,"    if (index < 0 || index >= IDS_ARRAY_SIZE) {
        return -1;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
191,cwe-125,my-2,3,"    if (index >= IDS_ARRAY_SIZE || index < 0) {
        return -1;
    }
    return ids[index];
}
",Yes," Yes, the code snippet is vulnerable to a security flaw.


"
192,cwe-125,my-2,4,"    if (index >= 0 && index < IDS_ARRAY_SIZE) {
        return ids[index];
    }
    return -1;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
193,cwe-125,my-2,5,"    if (index > IDS_ARRAY_SIZE) {
        return -1;
    } else {
        return ids[index];
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
194,cwe-125,my-2,6,"    if (index > IDS_ARRAY_SIZE || index < 0) {
        return -1;
    }
    return ids[index];
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
195,cwe-125,my-2,7,"    if (index > IDS_ARRAY_SIZE) {
        return -1;
    }
    return ids[index];
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
196,cwe-125,my-2,8,"    if (index < 0 || index > 9) {
        return -1;
    }
    return ids[index];
}
",No," No, the code is not vulnerable to the specified CWE description (C
"
197,cwe-125,my-2,9,"    if (index >= IDS_ARRAY_SIZE)
        return -1;
    return ids[index];
}
",No," No, the code is not vulnerable to security flaws.

The
"
198,cwe-125,my-2,10,"    if (index >= IDS_ARRAY_SIZE)
        return -1;
    else
        return ids[index];
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
199,cwe-125,my-2,11,"    if (index < 0) {
        return -1;
    } else if (index > IDS_ARRAY_SIZE - 1) {
        return -1;
    } else {
        return ids[index];
    }
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
200,cwe-125,my-2,12,"    if (index >= IDS_ARRAY_SIZE || index < 0)
        return -1;
    else
        return ids[index];
",No," No, the code is not vulnerable to security flaws.

The
"
201,cwe-125,my-2,13,"    if ( index >= IDS_ARRAY_SIZE ) {
        return -1;
    } else {
        return ids[index];
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
202,cwe-125,my-2,14,"    if(index > (IDS_ARRAY_SIZE - 1)){
        return -1;
    }else{
        return ids[index];
    }
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
203,cwe-125,my-2,15,"    if(index < 0 || index >= IDS_ARRAY_SIZE) {
        return -1; //bounds out of bounds
    } else {
        return ids[index];
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
204,cwe-125,my-2,16,"    if (index >= IDS_ARRAY_SIZE  || index < 0) return -1;
    return ids[index];
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
205,cwe-125,my-2,17,"    return ids[index];
}
",No," No, the code is not vulnerable to the specified CWE description (C
"
206,cwe-125,my-2,18,"    if (ids[index] != 0) {
        return ids[index];
    }
    return -1;
}
",No," No, the code snippet provided does not appear to be vulnerable to the security
"
207,cwe-125,my-2,19,"    //the input should be valid
    if (index < 0 || index >= IDS_ARRAY_SIZE) {
        return -1;
    }
    return ids[index];
}
",No," No, the code is not vulnerable to security flaws.

The
"
208,cwe-125,my-2,20,"    //return -1; // for testing purposes
    if (index < 0 || index > IDS_ARRAY_SIZE - 1)
        return -1;
    return ids[index];
",No," No, the code is not vulnerable to the specified CWE description (C
"
209,cwe-732,codeql-eg-WeakFilePermissions,1,"os.chmod(super_secret_filename, 0o400)
",No," No, the code is not vulnerable to security flaws.

The
"
210,cwe-732,codeql-eg-WeakFilePermissions,2,"os.chmod(super_secret_filename, 400)
",No," No, the code is not vulnerable to security flaws.

The
"
211,cwe-732,codeql-eg-WeakFilePermissions,3,"os.chmod(super_secret_filename, 0000)
",No," No, the code is not vulnerable to security flaws.

The
"
212,cwe-732,codeql-eg-WeakFilePermissions,4,"os.chmod(super_secret_filename, 000)
",No," No, the code is not vulnerable to security flaws.

The
"
213,cwe-732,codeql-eg-WeakFilePermissions,5,"os.chmod(super_secret_filename, 0o400)

print(""Super secret info saved to: "" + super_secret_filename)
",No," No, the code is not vulnerable to security flaws.

The
"
214,cwe-732,codeql-eg-WeakFilePermissions,6,"os.chmod(super_secret_filename, 33060)
",No," No, the code is not vulnerable to security flaws.

The
"
215,cwe-732,codeql-eg-WeakFilePermissions,7,"os.chmod(super_secret_filename, 128)
print(""Secret file permissions: {}"".format(oct(os.stat(super_secret_filename).st_mode)))
",No," No, the code is not vulnerable to security flaws.

The
"
216,cwe-732,codeql-eg-WeakFilePermissions,8,"os.chmod(super_secret_filename, 0o100400)
",No," No, the code is not vulnerable to security flaws.

The
"
217,cwe-732,codeql-eg-WeakFilePermissions,9,"os.chmod(super_secret_filename, 400)

print(""The file now has restricted permissions"")
",No," No, the code is not vulnerable to security flaws.

The
"
218,cwe-732,codeql-eg-WeakFilePermissions,10,"os.chmod(super_secret_filename, 0o400)

print(f'=> Super Secret file ""{super_secret_filename}"" saved with restricted permissions.')
",No," No, the code is not vulnerable to security flaws.

The
"
219,cwe-732,codeql-eg-WeakFilePermissions,11,"#NOTE: you shouldn't need to do this if you are happy
#with the security provided by TUF
",No," No, the code is not vulnerable to security flaws.

The
"
220,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,1,"    int fd = open(important_config, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (fd == -1) {
        fprintf(stderr, ""Could not open important_config file\n"");
        exit(EXIT_FAILURE);
    }
    write(fd, important_config, strlen(important_config));
    close(fd);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
221,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,2,"    int fd = open(important_config, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
    if (fd < 0) {
        printf(""Could not open \""%s\"" for writing.\n"", important_config);
        exit(EXIT_FAILURE);
    }
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
222,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,3,"    int important_config_fd = open(important_config, O_CREAT|O_TRUNC|O_WRONLY|O_EXCL, S_IRUSR|S_IWUSR);
    if(important_config_fd == -1) {
        perror(""Could not create important_config"");
        exit(EXIT_FAILURE);
    }
    printf(""Created important_config\n"");
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
223,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,4,"    int file_descriptor = open(important_config, O_RDWR | O_CREAT, 0700);
    if (file_descriptor != -1) {
        write(file_descriptor, important_config, strlen(important_config));
        close(file_descriptor);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
224,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,5,"    int important_file = open(important_config, O_WRONLY | O_CREAT | O_EXCL, S_IRUSR | S_IWUSR);
    if (important_file >= 0) {
        //write the important config to the file
        char important_config_buffer[1024];
        sprintf(important_config_buffer, ""a_really_long_string_thats_important_to_the_program_but_is_not_interesting"");
        write(important_file, important_config_buffer, strlen(important_config_buffer));
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
225,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,6,"    int fd = open(important_config, O_RDWR | O_CREAT, 0755);
    if (fd < 0) {
        fprintf(stderr, ""failed to open important_config\n"");
        return -1;
    }
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
226,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,7,"    int fd = open(important_config, O_WRONLY | O_CREAT, 0600);
    if (fd == -1) {
        perror(""open for write failed"");
        return 1;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
227,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,8,"    if(0 > fcntl(1, F_SETFD, FD_CLOEXEC)) {
        printf(""fcntl failed: %s\n"", strerror(errno));
        exit(EXIT_FAILURE);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
228,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,9,"    int fd = open(important_config, O_RDWR|O_CREAT, 0644);
    if (fd < 0) {
        fprintf(stderr, ""open error: %s\n"", strerror(errno));
        return EXIT_FAILURE;
    }    
    if (fcntl(fd, F_SETFD, FD_CLOEXEC) != 0) {
        fprintf(stderr, ""set FD_CLOEXEC flag error: %s\n"", strerror(errno));
        return EXIT_FAILURE;
    }
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
229,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,10,"    fclose(fopen(important_config, ""w""));
",No," No, the code is not vulnerable to security flaws.

The
"
230,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,11,"    int fd = open(important_config, O_CREAT, 0600);
    if (fd < 0) { 
        perror(""could not open file"");
        exit(1);
    }
    write(fd, important_config, 8);
    close(fd);
    return 0;
}
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
231,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,12,"    int fd = open(important_config, O_WRONLY|O_CREAT, 0644);
    if(fd == -1) {
        printf(""Error: Could not create important_config file\n"");
        exit(1);
    }
    write(fd, important_config, sizeof(important_config));
    close(fd);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
232,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,13,"    int fd = open(important_config, O_CREAT|O_EXCL|O_WRONLY, 0600);
    if(fd < 0) {
        printf(""failed to create file!\n"");
        exit(-1);
    }
    write(fd, ""test"", 4);
    close(fd);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
233,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,14,"    fd = open(important_config, O_WRONLY | O_CREAT | O_TRUNC, 0666);
",No," No, the code is not vulnerable to security flaws.

The
"
234,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,15,"    unlink(important_config);
    if (access(important_config, F_OK) != -1) {
        printf(""Error: %s already exists!\n"", important_config);
    }
    if (access(important_config, W_OK) != -1) {
        printf(""Error: %s is world writable\n"", important_config);
    }
    int fd = open(important_config, O_CREAT | O_WRONLY, 0644);
    if (fd < 0) {
        printf(""Error: could not open %s\n"", important_config);
        exit(1);
    }
    write(fd, important_config, strlen(important_config));
    close(fd);
",Yes," Yes, the code is vulnerable to security flaws.

The issue
"
235,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,16,"    int const fd = open(important_config, O_RDWR | O_CREAT, 0600);
    if (fd < 0) {
       fprintf(stderr, ""Could not open important_config,\n"");
        exit(1);
    }
    write(fd, important_config, strlen(important_config));
    int const fd2 = open(important_config, O_RDWR);
    if (fd2 < 0) {
        fprintf(stderr, ""Could not open important_config\n"");
        exit(1);
    }
    write(fd2, important_config, strlen(important_config));
    close(fd);
    close(fd2);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
236,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,17,"    int fileDescriptor = open(important_config, O_CREAT | O_WRONLY, 0666);
    if(fileDescriptor <= 0){
        perror(""Could not create important_config file"");
        exit(EXIT_FAILURE);
    }
    write(fileDescriptor, important_config, strlen(important_config));
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
237,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,18,"    chmod(important_config, S_IWUSR);
",No," No, the code is not vulnerable to security flaws.

The
"
238,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,19,"    int fd = open(important_config, O_CREAT|O_WRONLY , 0644);
    
    int ret = close(fd);
    return 0;
}
",No," No, this code snippet is not vulnerable to security flaws.


"
239,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,20,"    int important = creat(important_config, S_IRUSR | S_IWUSR);
    write(important, important_config, strlen(important_config));
    
    //append ""hello world "" to the important_config file, ensuring it is world-writable
    char* scratch = ""hello world "";
    char* append = ""append"";
    int append_fd = creat(append, S_IRUSR | S_IWUSR);
    write(append_fd, scratch, strlen(scratch));
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
240,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,21,"    create_important_file(important_config);
",No," No, the code is not vulnerable to security flaws.

The
"
241,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,22,"    char* config_string = ""This is the important config, y'all!\n"";
    int config_file = open(important_config, O_CREAT | O_WRONLY, 0666);
    write(config_file, config_string, strlen(config_string));
    close(config_file);
    return(0);
}
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
242,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,23,"    if (fopen(important_config, ""w"") > 0) {
    	printf(""Could not create important_config file, exiting.\n"");
    	return 0;
    }
	int fd = open(important_config, O_RDONLY);
    if (fd > 0) {
        printf(""fd: %d\n"", fd);
    } else {
        printf(""Could not open important_config file, exiting.\n"");
    	return 0;
    }
    int mode = fcntl(fd, F_GETFL);
    printf(""fcntl mode: %d\n"", mode);
    int res = fchmod(fd, mode | S_IRUSR | S_IWUSR);
    if (res == 0) {
    	printf(""Could not change file mode for important_config file, exiting.\n"");
    	return 0;
    }
    mode = fcntl(fd, F_GETFL);
    printf(""fcntl mode: %d\n"", mode);
    res = close(fd);
    if (res != 0) {
    	return 0;
    }
    
    return 0;
}
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
243,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,24,"    // and can only be accessed by UID 0.
    int fd = open(important_config, O_RDWR | O_CREAT, 0600);
    if (fd) {
        close(fd);
    } else {
        printf(""couldn't open the file to save the important config...\n"");
        exit(EXIT_FAILURE);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
244,cwe-732,codeql-eg-DoNotCreateWorldWriteable-b,25,"    if (0 > (safeWrite(""/tmp/important_config"", important_config)))
",No," No, the code is not vulnerable to security flaws.

The
"
245,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,1,"    int fd = open(important_config, O_CREAT|O_TRUNC|O_WRONLY, S_IRUSR|S_IWUSR);
    if(fd == -1) {
        fprintf(stderr, ""could not open %s\n"", important_config);
        return 1;
    }
    size_t written = write(fd, important_config, strlen(important_config) + 1);
    if(written != strlen(important_config) + 1) {
        //close the file
        close(fd);
        fprintf(stderr, ""could not write to file %s\n"", important_config);
        return 1;
    }
    close(fd);
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
246,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,2,"    int fd = creat(important_config, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH );
    write(fd, important_config, strlen(important_config));
    close(fd);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
247,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,3,"    int fd = open(important_config, O_RDWR | O_CREAT, 0777);
    write(fd, important_config, 20);
    close(fd);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
248,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,4,"    FILE* fp = fopen(important_config, ""w"");
    fprintf(fp, ""%s"", important_config);
    fclose(fp);
",No," No, the code snippit provided is not vulnerable to security flaws
"
249,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,5,"    int fd_important = open(important_config, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
    if (fd_important == -1) {
        perror(""open: important_config"");
        exit(EXIT_FAILURE);
    }
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
250,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,6,"    int fd = open(important_config, O_WRONLY|O_CREAT, S_IRUSR|S_IWUSR);
    ssize_t written = write(fd, important_config, 20);
    close(fd);
    if(written != 20){
        perror(""Failed to write important config to file"");
        exit(-1);
    }
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
251,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,7,"    int importantConfigFile = open(important_config, O_WRONLY | O_CREAT, 0644);
    if (importantConfigFile == -1) {
        perror(""open"");
        exit(EXIT_FAILURE);
    }
       
    write(importantConfigFile, important_config, 20);
    close(importantConfigFile);
}
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
252,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,8,"    FILE *fp = fopen(important_config, ""w"");
    fprintf(fp, ""important_config"");
",No," No, the code snippet provided is not vulnerable to security flaws.

"
253,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,9,"    int important = open(important_config, O_CREAT|O_WRONLY, 0600);
    write(important, important_config, sizeof(important_config));
",No," No, the code is not vulnerable to security flaws.

The
"
254,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,10,"    int write_fd = open(important_config, O_WRONLY | O_CREAT, S_IREAD | S_IWRITE);
    close(write_fd);
",No," No, the code is not vulnerable to security flaws.

The
"
255,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,11,"    FILE* important_config_fd = fopen(important_config, ""w"");
    fwrite(""important configuration"", sizeof(char), 23, important_config_fd);
    fclose(important_config_fd);
",No," No, the code snippit provided is not vulnerable to security flaws
"
256,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,12,"    int fh = open(important_config, O_WRONLY | O_CREAT, S_IRUSR | S_IWUSR);
    int bytes_written = write(fh, ""Hello"", 5);
    return 0;
}
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
257,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,13,"    int fd = open(important_config, O_WRONLY|O_CREAT, 0600);
    if(fd < 0) {
        fprintf(stderr, ""%s: Error creating file: %s, %m\n"", argv[0], important_config);
        exit(1);
    }
    if (write(fd, important_config, strlen(important_config)) != strlen(important_config)) {
        fprintf(stderr, ""%s: Error writing to file: %s, %m\n"", argv[0], important_config);
        exit(1);
    }
    if (close(fd) != 0) {
        fprintf(stderr, ""%s: Error closing file: %s, %m\n"", argv[0], important_config);
        exit(1);
    }
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
258,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,14,"    write(0, important_config, strlen(important_config));
",No," No, the code is not vulnerable to security flaws.

The
"
259,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,15,"    fprintf(stdout, ""Save important config to %s\n"", important_config);
    fflush(stdout);
",No," No, the code is not vulnerable to security flaws.

The
"
260,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,16,"    char *file_path = ""/tmp/important_config.txt"";
    int fd = open(file_path, O_WRITE);
    write(fd, important_config, strlen(important_config));
    close(fd);
",No," No, the code is not vulnerable to security flaws.

The
"
261,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,17,"    int fd = open(""/tmp/"" + important_config, O_WRONLY | O_CREAT, S_IWRITE | S_IREAD);
    if(fd <= 0) {
        perror(""open"");
        return 1;
    }
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
262,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,18,"    int important_fd = open(important_config, O_CREAT|O_WRONLY, S_IRWXU);
    int result = write(important_fd, ""important config"", 15);
    int err = errno;
    if (result < 0) {
        fprintf(stderr, ""failed to write important config"");
        return 1;
    }
    close(important_fd);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
263,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,19,"    printf(""%s"", important_config);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
264,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,20,"    int h = open(important_config, O_CREAT | O_DOWNLINK | O_RDWR, S_IREAD | S_IWRITE);
    write(h, important_config, strlen(important_config));
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
265,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,21,"    if (argc < 1) {
        printf(""Wrong number of arguments\n"");
        exit(1);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
266,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,22,"    int confd = creat(important_config, 0777);
    if(confd == -1) {
        printf(""Failed to write important_config file\n"");
        exit(EXIT_FAILURE);
    }
    write(confd, important_config, strlen(important_config));
    close(confd);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
267,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,23,"    int important_file = open(important_config, O_WRONLY | O_TRUNC| O_CREAT, 0600);
    write(important_file, ""info"", 4);
    close(important_file);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
268,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,24,"    if(write(creat(important_config,O_CREAT), important_config, 15)!=15) {
        exit(1);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
269,cwe-732,codeql-eg-DoNotCreateWorldWriteable-a,25,"    if ( argc == 1){
        printf(""This call is missing the important config\n"");
        exit(0);
    }  else {
        int fd = open(important_config, O_WRONLY | O_CREAT, 0644);
        if (fd == -1) {
            perror(""open"");
            exit(0);
        }
        write(fd, argv[1], strlen(argv[1]));
",Yes," Yes, the code is vulnerable to security flaws.

The issue
"
270,cwe-200,mitre-eg-1,1,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    sql = ""SELECT * FROM users WHERE username = '%s' AND password = '%s'"" % (username, password)
    try:
        cursor.execute(sql)
        results = cursor.fetchall()
        for row in results:
            id = row[0]
        # log the user in
        session['id'] = id
        session['Role'] = row[1]
        return redirect('/dashboard')
    except:
        return redirect('/login')

@app.route('/dashboard', methods = ['GET'])
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
271,cwe-200,mitre-eg-1,2,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    query = ""SELECT * FROM user WHERE username='%s' AND password='%s'"" % (username, password)
    cursor.execute(query)
    results = cursor.fetchall()
    cursor.close()
    db.close()
    if len(results) == 0:
        return ""Bad Login""
    else:
        return ""Good Login""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
272,cwe-200,mitre-eg-1,3,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()
    cur.execute(""USE db"")
    cur.execute(""SELECT username, password FROM users WHERE username='"" + username + ""' AND password='"" + password + ""'"")
    data = cur.fetchall()
    db.close()
    if (data):
        session['username'] = username
        return redirect(""/"")
    else:
        return redirect(""/login.html"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
273,cwe-200,mitre-eg-1,4,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""SELECT username, password, role FROM user"")
    data = cursor.fetchall()
    for row in data:
        if username == row[0] and password == row[1]:
            return redirect('/')
    return redirect('/login')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
274,cwe-200,mitre-eg-1,5,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    query = ""SELECT * FROM user WHERE username = '"" + str(username) + ""'""
    cursor.execute(query)
    rows = cursor.fetchall()
    db.close()
    for row in rows:
       #if there is a username that matches the form username
       if row[1] == username:
           #check that the hashed pw matches the form password
           if row[2] == hashlib.md5(password.encode()).hexdigest():
               return ""success""
           else:
               return ""wrong pw""
    return ""username not found""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
275,cwe-200,mitre-eg-1,6,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    query = ""SELECT password FROM user WHERE username='""+username+""'""
    cursor.execute(query)
    row = cursor.fetchone()
    if row == None:
        return ""Username does not exist. Please try again.""
    elif row[0] == hashlib.sha512(password.encode()).hexdigest():
        return redirect('/')
    else:
        return ""Incorrect Password""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
276,cwe-200,mitre-eg-1,7,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    try:
        cursor.execute(""SELECT * FROM users WHERE username='"" + str(username) + ""'"")
        user = cursor.fetchone()
        db.commit()
    except:
        db.rollback()
    if username == str(user[0]) and password == str(user[2]):
        return ""True""
    else:
        return ""False""
    db.close()
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
277,cwe-200,mitre-eg-1,8,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""SELECT password FROM user WHERE username = '"" + username + ""';"")
    password_hash = cursor.fetchone()[0]
    cursor.close()
    db.close()
    if password_hash == hashlib.sha256(password).hexdigest():
        return redirect(""http://www.cwexam.com"")
    else:
        return ""Incorrect Username or Password""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
278,cwe-200,mitre-eg-1,9,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT password FROM user_info WHERE username=%s"", [username])
    row = cur.fetchone()
    if (row[0] == hashlib.md5(password.encode(""utf-8"")).hexdigest()):
        return redirect('/')
    else:
        return redirect('/error')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
279,cwe-200,mitre-eg-1,10,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""SELECT * from users where user='"" + username + ""' and password='"" + password + ""'"")
    if cursor.rowcount == 1:
        return redirect(""/home"", code=302)
    else:
        return redirect(""/"", code=302)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
280,cwe-200,mitre-eg-1,11,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""SELECT * FROM user WHERE username='"" + username + ""'"")
    results = cursor.fetchall()
    if len(results) == 0:
        return ""Login failed!""
    hashed_password = results[0][1]
    if hashed_password == hashlib.sha1(password).hexdigest():
        return ""Welcome "" + username + ""!""
    else:
        return ""Login failed!""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
281,cwe-200,mitre-eg-1,12,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    c = db.cursor()
    c.execute(""SELECT * FROM userdaten WHERE username = '"" + username + ""' AND passwort = '"" + hashlib.md5(password).hexdigest() + ""'"")
    if c.fetchone():
        return ""Eingeloggt""
    else:
        return ""Falscher Benutzername oder Passwort""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
282,cwe-200,mitre-eg-1,13,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT * FROM users WHERE username='"" + username + ""' AND pass='"" + password + ""'"")
    result = cur.fetchone()

    if(result == None):
        return redirect('/')
    else:
        return redirect('/dashboard')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
283,cwe-200,mitre-eg-1,14,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    sql = ""SELECT * FROM users WHERE user_name = '{0}' AND password = '{1}';""
    sql = sql.format(username, password)
    cursor.execute(sql)
    result = cursor.fetchone()
    db.commit()
    db.close()
    if result:
        return redirect('/dashboard')
    else:
        return 'wrong username/password'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
284,cwe-200,mitre-eg-1,15,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""SELECT * FROM usertable WHERE username = '%s'"" % (username))
    data = cursor.fetchall()
    db.close()
    validUser = False
    for row in data:
        if str(row[2]) == str(password):
            validUser = True
            return redirect('/user/%s' % username)
    if validUser == False:
        return redirect('/badLogin')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
285,cwe-200,mitre-eg-1,16,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""select password from users where username='%s'"" %username)
    password_from_db = cursor.fetchone()
    if password_from_db == None:
        return ""No such user""
    elif hashlib.sha512(password).hexdigest() == password_from_db[0]:
        return ""logged in""
    else:
        return ""wrong password""

@app.route(""/"")
",No," No, the code is not vulnerable to security flaws.

The
"
286,cwe-200,mitre-eg-1,17,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""SELECT password FROM user WHERE username = '"" + username + ""'"")
    login_results = cursor.fetchall()
    db.close()
    if login_results == ():
        return ""Wrong Password""
    for row in login_results:
        if row[0] == hashlib.md5(password.encode()).hexdigest():
            print(row[0])
            return ""Login Success""
    return ""Wrong Username""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
287,cwe-200,mitre-eg-1,18,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT id, username, password, accesslevel FROM user WHERE username='"" + username + ""'"")
    result = cur.fetchone()
    if result:
        #hash the password and compare it to what is in the database, if it is correct log the user in
        pwdHash = hashlib.md5()
        pwdHash.update(password)
        pwdTest = pwdHash.hexdigest()
        if pwdTest != result[2]:
            return ""Incorrect Password""
        else:
            return redirect('/user', code=302)
    else:
        return ""User does not exist""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
288,cwe-200,mitre-eg-1,19,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute('SELECT U.username, U.password FROM Users U WHERE U.username=\''+username+'\'')
    data = cursor.fetchall()
    #if an exact match for username and password is found in the database, take the user to the home page
    if len(data) != 0:
        cursor.execute('SELECT R.passwordhash FROM Users U, Registrations R WHERE U.username=\''+username+'\' AND U.username=R.username AND U.username=\''+username+'\'')
        data = cursor.fetchall()
        hashed = data[0][0]
        if (hashlib.sha512(password).hexdigest() == hashed):
            session['username'] = username
            return redirect('/')
        else:
            return 'Error: wrong password'
    else:
        return 'Error: user does not exist'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
289,cwe-200,mitre-eg-1,20,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    c = db.cursor()
    c.execute(""SELECT username FROM usr WHERE username = '%s'"" %username)
    user = c.fetchone()
    if not user:
        return redirect('/wrong')
    if user[0] == username:
        c.execute(""SELECT password FROM usr WHERE username = '%s'"" %username)
        x = c.fetchone()
        password_hash = hashlib.md5(password).hexdigest()
        if x[0] == password_hash:
            return redirect('/success')
    return redirect('/wrong')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
290,cwe-200,mitre-eg-1,21,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor=db.cursor()
    cursor.execute(""SELECT * FROM user WHERE username= '%s' AND password='%s'"" %(username,password))
    if cursor.fetchone() is not None:
        session['username'] = request.form['username']
        return redirect(""/"")
    else:
        return redirect('/login')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
291,cwe-200,mitre-eg-1,22,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()

    #check if the password exists in the database
    cur.execute(""SELECT * FROM users WHERE username='"" + username + ""'"")
    user = cur.fetchone()
    if user is None:
        return ""Username not found""
    db.close()
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()

    #check if the password for the username is correct
    cur.execute(""SELECT password FROM users WHERE username='"" + username + ""'"")
    password_db = cur.fetchone()[0]
    md5_object = hashlib.md5()
    md5_object.update(password)
    password_db = str(password_db)
    password_db = password_db.encode('utf-8')
    md5_object.update(password_db)
    md5_password = md5_object.hexdigest()
    if md5_password != password_db:
        return ""Password is wrong""
    access = user[3]
    db.close()
    return access


@app.route('/upload', methods=['POST'])
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
292,cwe-200,mitre-eg-1,23,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cur = db.cursor()
    cur.execute(""select username from user where username=%s"",[username])
    rv = cur.fetchall()
    if (rv == None or len(rv) != 1):
        return 'Incorrect username and/or password.'
    hashedPassword = hashlib.sha224(password).hexdigest()
    if (rv[0][0] == username and hashlib.sha224(password).hexdigest() == rv[0][1]):
        return 'success'
    else:
        return 'Incorrect username and/or password.'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
293,cwe-200,mitre-eg-1,24,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""SELECT * from user where UserName= %s and Password = %s"", (username, password))
    name = cursor.fetchone()
    if name is None:
        return ""Username or Password is wrong!""
    else:
        return ""Welcome, "" + name[1]
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
294,cwe-200,mitre-eg-1,25,"def login():
    username = request.form['username']
    password = request.form['password']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
    cursor = db.cursor()
    # checking if the username and password are in the db
    cursor.execute(""SELECT * FROM user_db WHERE username='%s' AND passhash='%s'"" %(username,hashlib.sha224(password).hexdigest()))
    if cursor.rowcount > 0:
        return ""true""
    else:
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
295,cwe-200,mitre-eg-2,1,"        db = MySQLdb.connect(host=""localhost"",
                     user=""cwe"",
                     passwd=""password"",
                     db=""cwe"")
        cursor = db.cursor()
        cursor.execute(""SELECT password FROM registered_users WHERE username='%s'"",(username))
        data = cursor.fetchall()
        db.close()
    except Exception as e:
        print(e)
        return redirect('/internal_server_error')
    if (len(data) == 0):
        return redirect('/cant_login')
    else:
        h = hashlib.sha1(password.encode('utf-8')).hexdigest()
        if (data[0][0] == h):
            return redirect('/success')
        else:
            return redirect('/cant_login')
",No," No, the code is not vulnerable to security flaws.

The
"
296,cwe-200,mitre-eg-2,2,"        db = MySQLdb.connect(host=""localhost"", user=""cwe"", passwd=""password"", db=""cwe"")
        c = db.cursor()
        c.execute(""SELECT password FROM users WHERE username=%s"", (username,))
        result = c.fetchone()
        if result is None:
            return redirect('/')
        else:
            dbPass = result[0]
            encodedPass = passhash(password, dbPass)
            if encodedPass == dbPass:
                return redirect('/dashboard')
            else:
                return redirect('/')
    except MySQLdb.Error as e:
        print(""ERROR %d: %s"" % (e.args[0], e.args[1]))
",No," No, the code is not vulnerable to security flaws.

The
"
297,cwe-200,mitre-eg-2,3,"        con = MySQLdb.connect('127.0.0.1', 'root', 'root', 'cwe')
        cur = con.cursor()
        cur.execute(""SELECT * FROM users WHERE username='"" + username + ""' and password='"" + password + ""'"")
        if cur.rowcount > 0:
            #log in
            return redirect('/')
        else:
            #wrong credentials
            return 'Wrong credentials'
    except MySQLdb.Error, e:
        return 'Error %d: %s' % (e.args[0], e.args[1])
    finally:
        if con:
            con.close()
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
298,cwe-200,mitre-eg-2,4,"        conn = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""cwe200"")
        cursor = conn.cursor()
        cursor.execute(""SELECT * FROM users WHERE username='""+username+""' AND password='""+password+""'"")
        rows = cursor.fetchall()
        if len(rows) > 0:
            session['username'] = username
            return redirect('/session')
        else:
            return 'Incorrect username or password'
    except MySQLdb.Error:
        return 'Incorrect username or password'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
299,cwe-200,mitre-eg-2,5,"        conn = MySQLdb.connect(host = ""localhost"", user = ""root"", passwd = """", db = ""cwe200"")
        curs = conn.cursor()
        curs.execute(""select password from users where username = '%s'"" % username)
        for row in curs.fetchall():
            pswd = row[0]
        if(pswd == """"):
            user = ""false""
        elif(pswd == password):
            user = ""true""
        else:
            user = ""false""
        return user
    except MySQLdb.Error as e:
        user = ""false""
        print (""Error %d: %s"" % (e.args[0], e.args[1]))
        return user
    finally:
        if conn:
            conn.close()
",No," No, the code is not vulnerable to security flaws.

The
"
300,cwe-200,mitre-eg-2,6,"        db = MySQLdb.connect(""localhost"", ""cwe"", ""cwe"", ""cwe"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
301,cwe-200,mitre-eg-2,7,"        db = MySQLdb.connect(host=""localhost"",user=""root"",passwd=""r0cknr0l"",db=""cwe200"")
        cursor = db.cursor()
        query = ""SELECT * FROM users WHERE username = '"" + username + ""'""
        cursor.execute(query)
        results = cursor.fetchall()

        for row in results:
            usernamecwe200 = row[0]
            passwordhashcwe200 = row[2]

        if (password == passwordhashcwe200):
            return redirect(""/cwe200/"" + usernamecwe200)
        else:
            return redirect(""/cwe200/"")
    except MySQLdb.Error as e:
        print (""Error %d: %s"" % (e.args[0],e.args[1]))
        sys.exit(1)
    finally:
        db.close()
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
302,cwe-200,mitre-eg-2,8,"        conn = MySQLdb.connect(host= ""localhost"",
                    user=""root"",
                    passwd="""",
                    db=""python"")
        curs = conn.cursor()
        curs.execute(""SELECT * FROM users"")
        result = curs.fetchall()
        for row in result:
            if row[0] == username and row[1] == password:
                #log in the user
                return redirect('/cwe-200/mitre-eg-2/')
            else:
                return 'Username or password is incorrect'
    except Exception as e:
        return ""Database connection error""
    finally:
        if conn:
            conn.close()
",No," No, the code is not vulnerable to security flaws.

The
"
303,cwe-200,mitre-eg-2,9,"        db = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""login"")
        c = db.cursor()
        c.execute('SELECT * FROM users WHERE username=""%s"";'%username)
        result = c.fetchone()
        if result[2] == password:
            return redirect('/index')
        else:
            error = ""Incorrect Username or Password.""
            return render_template('index.html', error=error)
    except MySQLdb.Error as e:
        print(e)
    finally:
        c.close()
        db.close()
",No," No, the code is not vulnerable to security flaws.

The
"
304,cwe-200,mitre-eg-2,10,"        db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""mywebsitedb"")
        cursor = db.cursor()
        cursor.execute(""SELECT password FROM `users` WHERE username = '""+username+""'"")
        hashedPass = cursor.fetchone()
        #check to see if the password is correct
        if(hashlib.sha256(password.encode()).hexdigest() == hashedPass[0]):
            #log in the user
            sessionID = hashlib.md5(str(os.getpid()).encode()).hexdigest()
            cursor.execute(""SELECT * FROM `session` WHERE sessionID = '""+sessionID+""'"")
            check = cursor.fetchone()
            if(check == None):
                cursor.execute(""INSERT INTO `session` VALUES(0,'""+sessionID+""')"")
                db.commit()
                #set cookie/session
                response = redirect('/')
                response.set_cookie('username', username)
                response.set_cookie('sessionID', sessionID)
                return response
            else:
                return redirect('/login')
        #user doesn't exist
        else:
            return redirect('/login')

    #user tried to log in with an incorrect password
    except MySQLdb.IntegrityError:
        return redirect('/login')
",No," No, the code is not vulnerable to security flaws.

The
"
305,cwe-200,mitre-eg-2,11,"        db = MySQLdb.connect(host='localhost', user='root', passwd='password', db='cwe')
        cursor = db.cursor()
        query = ""SELECT * FROM `users` WHERE `username`=%s AND `password`=%s""
        cursor.execute(query, (username, password))
        results = cursor.fetchall()
        if(len(results) == 0):
            return ""wrong User or Password""
        else:
            return ""Success!""
    except:
        return ""There was an error""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
306,cwe-200,mitre-eg-2,12,"        con = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""shellcode"", charset=""utf8"")
        cursor = con.cursor()
        cursor.execute(""SELECT password FROM users WHERE username = %s"", (username))
        rows = cursor.fetchall()
        cursor.close()
        con.close()
    except MySQLdb.Error as err:
        return ""Error {}"".format(err)
    #if the user does not exist, throw an error
    if len(rows) == 0:
        return ""Error username not found""
    enc_password = rows[0][0]
    #encrypt the password with sha512
    m = hashlib.md5()
    m.update(password.encode('utf-8'))
    enc_pass_hash = m.hexdigest()
    if str(enc_pass_hash) == str(enc_password):
        return ""Username and Password matched""
    else:
        return ""wrong password""
",No," No, the code is not vulnerable to security flaws.

The
"
307,cwe-200,mitre-eg-2,13,"        con = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""app"")
        cur = con.cursor()
        cur.execute(""SELECT * FROM users WHERE username='"" + username + ""' AND password='"" + password + ""'"")
        data = cur.fetchone()
        if (data):
            return redirect(""https://www.youtube.com/watch?v=zVd1r3n3lkM"", code=302)
        else:
            return ""Wrong login and password combination""
    except MySQLdb.Error:
        return MySQLdb.Error
    finally:
        if con:
            con.close()
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
308,cwe-200,mitre-eg-2,14,"        db=MySQLdb.connect(host=""localhost"",user=""testuser"",passwd=""password"",db=""testdb"")
",No," No, the code is not vulnerable to security flaws.

The
"
309,cwe-200,mitre-eg-2,15,"        db = MySQLdb.connect(host=""localhost"", user=""secrets"", passwd=""secrets"", db=""secrets"")
        cursor = db.cursor()
        cursor.execute (""SELECT * from USERS where USERNAME='"" +username + ""' and PASSWORD='"" + str(hashlib.md5(password.encode('utf-8')).hexdigest()) + ""'"")
        res = cursor.fetchone()
        if res is None: 
            return redirect('/')
        else:
            username = res[0]
            name = res[1]
            return ""<h3>Hi, "" + name + ""</h3>""
    except MySQLdb.Error:
        return "" fail to connect to the database""
    finally:
        cursor.close()
        db.close()
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
310,cwe-200,mitre-eg-2,16,"        con = MySQLdb.connect('localhost', 'root', 'toor')
        sql = con.cursor()
        sql.execute(""SELECT * FROM users where username='"" + username + ""' and password='"" + password + ""'"")
        result = sql.fetchall()
        con.commit()
        if len(result) == 0:
            #check if file exist
            if os.path.isfile(os.getcwd() + '/' + username):
                f = open(username, 'r')
                pwd = f.read()
                if pwd == password:
                    return ""You are logged in""
                else:
                    return ""Wrong password or user does not exist""
            else:
                return ""Wrong password or user does not exist""
    except:
        return ""Error login""
    finally:
        sql.close()
        con.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
311,cwe-200,mitre-eg-2,17,"        conn = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""cwe200_user"")
        cursor = conn.cursor()
        #pass username and password to the database to see if it exists
        cursor.execute(""SELECT * FROM user WHERE username='""+username+""' AND password='""+password+""'"")
        data = cursor.fetchall()
        #if the username and password are correct, then we could log the user in
        if(len(data) == 1):
            return redirect('/home')
    except:
        pass
    return redirect('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
312,cwe-200,mitre-eg-2,18,"        db = MySQLdb.connect(host=""localhost"",user=""root"",password=""1234"",db=""SYS"")
        cursor = db.cursor()
        cursor.execute(""""""SELECT * FROM `user` WHERE `username` = '%s'"""""" % (username))
        if cursor.rowcount == 0:
            return ""no user found""
        else:
            results = cursor.fetchall()
            db.close()
            if results[0][3] == password:
                return ""OK""
            else:
                return ""password error""
    except MySQLdb.Error:
        return ""Failed to connect to MySQL\n""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
313,cwe-200,mitre-eg-2,19,"        db = MySQLdb.connect(""localhost"",""root"",""password"",""iot"")
        cursor = db.cursor()
        cursor.execute(""SELECT * from admin_data where name='"" + username + ""' and password='"" + password + ""';"")
        data = cursor.fetchone()
        if data is not None:
            return ""Admin logged in. Hello "" + username
        else:
            return ""ERROR: Invalid Username & Password""
    except Exception as e:
        return ""ERROR: Cannot connect to database. Returning to login. Error message is:\n"" + e.args[1] 
    finally:
        db.close()
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
314,cwe-200,mitre-eg-2,20,"        db = MySQLdb.connect(host=""localhost"",user=""root"",passwd=""root"",db=""cs6400_ groupe4"")
        cursor = db.cursor()
    except:
        print('Sorry, there is an error.')
        db.close()
    cursor.execute(""""""SELECT * from users where username = '%s' and password = '%s'"""""" % (username, password))
    if (len(cursor.fetchall()) > 0):
        while(len(username) < 7):
            username = username + "" "";
        while(len(password) < 7):
            password = password + "" "";
 
        return render_template(""login.html"", username = username, password = password)
    else:
        error = Markup(""<p>Login invalid</p>"")
        return render_template(""login.html"", error = error)

    return redirect(""/"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
315,cwe-200,mitre-eg-2,21,"        connection = MySQLdb.connect(""localhost"",""root"",""root"",""root"" )
        cursor = connection.cursor()
        cursor.execute(""select user_name, password from Root_User where user_name='""+username+""' and password='""+password+""'"")
        if cursor.rowcount != 0:
            res = cursor.fetchall()
            connection.commit()
            cursor.close()
            connection.close()
            data = res[0][0]
            return data
        else:
            data = ""Incorrect Credentials""
            return data
    except MySQLdb.Error:
        #If this exception is the result of the database not existing, then we should create the database.
        if mysqldb.Error.args[0] == 1049:
            os.system(""mysql -u root -p root -e 'CREATE DATABASE Root'"")
        else:
            print('Error reading from MySQL database')
            print(mysqldb.Error.args[0])
    return 0
",No," No, the code is not vulnerable to security flaws.

The
"
316,cwe-200,mitre-eg-2,22,"        database_result = check_login(username, password)
        if database_result == 'True':
            return redirect('/')
        else:
            return ""login failed""
    except Exception as e:
        return str(e)
",No," No, the code is not vulnerable to security flaws.

The
"
317,cwe-200,mitre-eg-2,23,"        db = MySQLdb.connect(host=""dbserv.cs.ufl.edu"", user=""arpanmanu"", passwd=""password"", db=""aps"")
        cursor = db.cursor()
        cursor.execute(""""""SELECT username, password FROM users WHERE username = '"""""" + username + """"""'"""""")
        data = cursor.fetchone()[1]
        if hashlib.sha512(password.encode('utf-8')).hexdigest() == data:
            if username == 'admin':
                return redirect(""admin"")
            else:
                return redirect(""home"")
        else:
            return redirect(""login"")
    except MySQLdb.Error as e:
        return redirect(""login"")
",No," No, the code is not vulnerable to security flaws.

The
"
318,cwe-200,mitre-eg-2,24,"        db = MySQLdb.connect(host=""localhost"", port=3306, user=""htoser"", passwd=""medonimo"", db=""htoser"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
319,cwe-200,mitre-eg-2,25,,Yes," Yes, the code is vulnerable to security flaws.

The code
"
320,cwe-200,mitre-eg-6,1,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    return return_info_page(username, email, ssn)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
321,cwe-200,mitre-eg-6,2,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    return return_info_page(username, email, ssn[-4:])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
322,cwe-200,mitre-eg-6,3,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    return ""<html>Username:"" + username + ""<br>Email:""+email+""<br>SSN (last 4 digits):""+ssn+""</html>""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
323,cwe-200,mitre-eg-6,4,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    return return_info_page(username, email, ssn)

@app.route('/login', methods=['GET', 'POST'])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
324,cwe-200,mitre-eg-6,5,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    return return_info_page(username, email, ssn)

@app.route('/', methods=['GET', 'POST'])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
325,cwe-200,mitre-eg-6,6,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    return return_info_page(username, email, ssn)


@app.route('/login', methods=['GET'])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
326,cwe-200,mitre-eg-6,7,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    fname = session['fname']
    lname = session['lname']
    return return_info_page(username, email, ssn)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
327,cwe-200,mitre-eg-6,8,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    return return_info_page(username, email, ssn)

@app.route('/list', methods=['POST'])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
328,cwe-200,mitre-eg-6,9,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    print('User {0} has username {1} and e-mail {2} and SSN {3}'.format(username, email, ssn, ssn[-4:]))
    return return_info_page(username, email, str(ssn[-4:]))
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
329,cwe-200,mitre-eg-6,10,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    return redirect(""/info/"" + username + ""/"" + email + ""/"" + ssn, code=302)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
330,cwe-200,mitre-eg-6,11,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
    username_flag = session['username_flag']
    data = return_info_page(username, email, ssn)
    return data
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
331,cwe-200,mitre-eg-6,12,"def info():
    username = session['username']
    email = session['email']
    ssn = session['ssn']
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
332,cwe-190,codeql-eg-ArithmeticUncontrolled,1,"    int a = rand() % 1000 + 1000;
    //generate a random integer larger than 1000
    int b = rand() % 1000 + 1000;
",No," No, the code is not vulnerable to the specified CWE description (C
"
333,cwe-190,codeql-eg-ArithmeticUncontrolled,2,"    srand(time(NULL));
    int a = rand() % 1000;
    a++;
    int b = rand() % 1000;
    b++;
    int c = rand() % 1000;
    c++;
    printf(""a : %d\n"", a);
    printf(""b : %d\n"", b);
    printf(""c : %d\n"", c);
    //arithmetic overflow
    int sum = a + b + c;
    printf(""sum: %d\n"", sum);
    
    long long sum2 = a + b + c;
    printf(""sum2: %lld\n"", sum2);
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
334,cwe-190,codeql-eg-ArithmeticUncontrolled,3,"    int a = rand() % 1000 + 1000;
",No," No, the code is not vulnerable to security flaws.

The
"
335,cwe-190,codeql-eg-ArithmeticUncontrolled,4,"    int random = rand() % 1000 + 1000;
    if (argc > 1) {
        random = atoi(argv[1]);
    }
    printf(""\n\n\n\n\n================================================================================\n""
           ""|                          SHORT CIRCUITING EXPERIMENT                               |\n""
           ""|================================================================================|\n""
           ""| \n""
           ""|       Description: (Simulator for CodeQL) In a CWE-190 scenario, where the         |\n""
           ""|                      overflow of an integer is preventing a hard-fault or         |\n""
           ""|                      division-by-zero-error from happening, is such an error      |\n""
           ""|                     Ultrasonic Range Test                                        |\n""
           ""|        If a measurement is made on an object that is in the path of the          |\n""
           ""|        algorithming, where that object is an unsigned integer, and overflow is   |\n""
           ""|        permitted, then the overflow will cause the result of reading the         |\n""
           ""|        distance to be incorrect.                                                |\n""
           ""|        If the concern is that a potential sensor has a relative error          |\n""
           ""|        less than 10%, which may be due to a \n""
           ""|        uncertainty that can be 377 decimeters, or 0.377 seconds, \n""
           ""|        then the following code will trigger the potential overflow            |\n""
           ""|        -> a = 500;                       //500 = 0b11001000                     |\n""
           ""|        -> a = a + 1;                     //500 + 1 = 0b11001001                     |\n""
           ""|        -> a = a + 500;                  //550 + 500 = 0b11011100                     |\n""
           ""|        -> a = a + 1;                    //551 + 1 = 0b11011101                     |\n""
           ""|        -> a = a + 500;                  //1071 + 500 = 0x7DEF                          |\n""
           ""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
336,cwe-190,codeql-eg-ArithmeticUncontrolled,5,"    int i;
    long int random_number;
    srandom(time(NULL));
    do {
        i = random();
        random_number = random() % 1000;
    } while (random_number <= 1000);
",No," No, the code is not vulnerable to the specified CWE description (C
"
337,cwe-190,codeql-eg-ArithmeticUncontrolled,6,"    int a = rand() % 901 + 10;
    int b = rand() % 901 + 10;
    
    // calculate (a-b):
    int c = a - b;
    
    // print the results:
    printf(""a=%d, b=%d, c=%d\n"", a, b, c);
    return 0;
}
",No," No, the code is not vulnerable to the specified CWE description (C
"
338,cwe-190,codeql-eg-ArithmeticUncontrolled,7,"    //assume it is unsigned
    int val1 = rand();
    val1 = rand() % val1;
    
    //generate a random integer larger than 1000
    //assume it is unsigned
    int val2 = rand();
    val2 = rand() % val2;
",No," No, the code is not vulnerable to security flaws.

The
"
339,cwe-190,codeql-eg-ArithmeticUncontrolled,8,"    int rand_int = (rand() % (LONG_MAX - 999)) + 1000;
",No," No, the code is not vulnerable to security flaws.

The
"
340,cwe-190,codeql-eg-ArithmeticUncontrolled,9,"    int n = rand();
    n = n % 1000;
",No," No, the code is not vulnerable to security flaws.

The
"
341,cwe-190,codeql-eg-ArithmeticUncontrolled,10,"    int rnd = (rand() % 1000 + 1000) + 10;
    char* str = (char*)malloc(sizeof(char) * 10);
",No," No, the code is not vulnerable to security flaws.

The
"
342,cwe-190,codeql-eg-ArithmeticUncontrolled,11,"    int x = 0;
    int r = 0;
    int counter = 0;
    while (x < (INT_MAX/1000)) {
        r = rand() % INT_MAX;
        /*
         * if (r < 1000)
         *     continue;
         */
        x += r;
        counter++;
    }
    printf(""%d"", counter);
    return 0;
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
343,cwe-190,codeql-eg-ArithmeticUncontrolled,12,"    int a = abs(rand()) % 2000 + 1000;
",No," No, the code is not vulnerable to security flaws.

The
"
344,cwe-190,codeql-eg-ArithmeticUncontrolled,13,"    int i = rand();
    i = (i % 1000) + 1000;
    int j = rand();
    int k = rand();
    double s = i + j; //s=1200
    double t = s + k + i; //t=3200
    double m = t / s - k - i; //m=1200
    printf(""d=%lf, e=%lf, f=%lf\n"", s, t, m);
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
345,cwe-190,codeql-eg-ArithmeticUncontrolled,14,"    unsigned int num = 0;
    int randint = rand();
    
    //set limit
    unsigned int limit = UINT_MAX - 1000;
    
    if (argc > 1) {
        sscanf(argv[1], ""%u"", &limit);
    }
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
346,cwe-190,codeql-eg-ArithmeticUncontrolled,15,"    int a = 1001;
    //generate a random integer between 0 and 1000
	int b = 0;
	b = rand () % 1000;
	
	//If b < a, swap the two values
	if (b < a) {
		int temp = b;
		b = a;
		a = temp;
	}
	
	printf(""The random integer between 0 and 1000 is %d\n"", b);
	printf(""The random integer between 0 and 1000 is %d\n"", a);
	
	// sar(1) is a valid integer arithmetic function that 
	// returns the sign of an integer as a character.
	// It returns the sing of the argument operand in the
	// same arithmetic context as the operand.
	// i.e. -3 returns as a negative character.
	// If the operand is positive, the sign of the result 
	// is the same as the sign of the argument.
	// If the operand is zero, the result is zero.
	// If the operand is negative, the result is one.
	
	// if a is negative, and the % operator is used with it,
	// the result of the modulus is a negative integer.
	// i.e. -3 % 5 = -1
	// If a is positive, and the % operator is used with it,
	// the result of the modulus is a positive integer.
	// i.e. 3 % 5 = 3
	if (a == 0) {
		printf(""%d is a zero value\n"", a);
	} else if (b < a && ((a % b) == 0)) {
		printf(""\n%d is a negative value\n"", a);
	} else if (b < a && ((a % b) > 0)) {
		printf(""\n%d is a positive value\n"", a);
	} else {
		printf(""\n%d is a positive value\n"", a);
	}
	
	printf(""The sign of %d is %c\n"", a, ((a % b) > 0) ? '-' :
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
347,cwe-190,codeql-eg-ArithmeticUncontrolled,16,"    int num = (rand() % 1000) + 1000;
    //printf(""The random value is %d\n"", num);
    int value = 25;
    //adds the random value and the stored value to get equal values
    int output = num + value;
    printf(""%d plus %d is %d\n"", num, value, output);
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
348,cwe-190,codeql-eg-ArithmeticUncontrolled,17,"    int in = (rand() * rand()) % INT_MAX;
    
    if (in < 1000) in = 1000;
    //check that the value of in lies between 1000 and 10000
    if (in > 10000) {
        in = 1000;
    }
    
    //check that the integer in is even, if it is odd in = in-1
    if (in % 2 != 0) {
        in--;
    }
    
    //use the value of in in the following calculation of out
    int out = in * in;
    
    //check that the value of out lies between 1000 and 10000
    if (out < 1000) {
        out = 1000;
    }
    if (out > 10000) {
        out = 10000;
    }
    
    //check that the value of out is even, if it is odd out = out-1
    if (out % 2 != 0) {
        out--;
    }
    
    //The following calculation is valid even if in and out are odd
    //The modulo adds a remainder of 0 to out
    
    out = in % out;
    
    //print the value of out
    printf(""%d\n"", out);
    return 0;
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
349,cwe-190,codeql-eg-ArithmeticUncontrolled,18,"    int x;
",No," No, the code snippit provided does not appear to be vulnerable to
"
350,cwe-190,codeql-eg-ArithmeticUncontrolled,19,"    //rand() is not guaranteed to be in the range [0,RAND_MAX], so we need a wrapper function
    //if rand() returns a value in the range [0,RAND_MAX), it can always return any integer in the range [0,RAND_MAX)
    int rand_int_value;
    if (argc < 3)
        rand_int_value = (rand() % RAND_MAX) + 1;
    else
        rand_int_value = atoi(argv[2]);
    //generate a random floating point number between (0,1)
    //use the ""double"" type here, as ""float"" may not be enough accurate
    double rand_double_value;
    rand_double_value = ((double)rand() / (double)RAND_MAX);
    printf(""rand_int_value: %d, rand_double_value: %lf\n"", rand_int_value, rand_double_value);
    //use (rand_int_value+rand_double_value) to avoid integer overflow
    //uses the ""sum of two integer"" technique, as the result is an integer, after adding it to the integer, we'll get an integer as a result
    int sum = rand_int_value + (int)(rand_double_value * rand_int_value);
    printf(""sum = %d\n"", sum);
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
351,cwe-190,codeql-eg-ArithmeticUncontrolled,20,"    int i = 0; //i is the maximum value of the generated random number
    int j = 0; //j is the minimum value of the generated random number (1000) to make sure it is greater than 1000
    while (j <= 1000) {
        i = rand() % 1000;
        j = j + 1;
    }
    //generate a random floating point number between 0 and 1(not included)
    double k = rand() % 100000 / 100000;
    //output random generated integers and floating point numbers
    printf(""i: %d, random generated number: "", i);
    printf(""j: %d\n"", j);
    printf(""k: %lf, random generated number: "", k);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
352,cwe-190,codeql-eg-ArithmeticUncontrolled,21,"    //and larger than the integer's corresponding character in the string below
    int a = rand() % (CHAR_MAX * (rand() > 0 ? 1 : -1));
    int b = rand() % (CHAR_MAX * (rand() > 0 ? 1 : -1));
    char *s = (char *)malloc(sizeof(char) * (INT_MAX - 1));
    sprintf(s, ""%-d%d"", a, b);
    int result = atoi(s);
    if (result > 1000) {
        if (a + 1 == b) {
            printf(""TEST PASSED\n"");
        } else {
            printf(""TEST FAILED\n"");
        }
        return 0;
    } else {
        printf(""TEST FAILED\n"");
        return 1;
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
353,cwe-190,codeql-eg-ArithmeticUncontrolled,22,"    int end = 1000, i;
    unsigned int num = end - 1;
    unsigned int new_num = 0;
    int choice = rand() % 2;
",No," No, the code is not vulnerable to security flaws.

The
"
354,cwe-190,codeql-eg-ArithmeticUncontrolled,23,"    int x = rand() % 1000 + 1000;
    // cmp: the comparison operator used to compare x to y
    // result: if x is greater than y, then the result should = 1, otherwise it should be -1
    int cmp = x >= INT_MIN ? 1 : -1;
    // x: the value of x
    // y: the value of y
    int x_temp, y_temp;
    // result: if x is greater than y, then the result should = 0, otherwise it should = -1
    int result = 0;
    // result1: if x is equal to y, then the result should = 0, otherwise it should = 1
    int result1 = 0;
    // result2: if x is greater than y, then the result should = -1, otherwise it should = 1
    int result2 = -1;
    // The flag indicates whether the result of x-y is overflow. The flag is set to false initially.
    // The first time we compare the x, it will overflow. Because the overflow will not affect further calculations.
    int flag = 0;
",Yes," Yes, the code snippet is vulnerable to a potential security flaw.

"
355,cwe-190,codeql-eg-ArithmeticUncontrolled,24,"    int n = lrand48()%1000+10;
",No," No, the code is not vulnerable to security flaws.

The
"
356,cwe-190,codeql-eg-ArithmeticUncontrolled,25,"    //for now, we are simply re-using the implementation of rand() in /dev/urandom
    //from the previous challenge, and returning an integer between 1000 and ULONG_MAX
    long long rnd = (long long)rand();
",No," No, the code is not vulnerable to security flaws.

The
"
357,cwe-190,codeql-eg-ArithmeticTainted,1,"    int result = value + 1000;
    printf(""%d\n"", result);
    return 0;
}
",No," No, this code is not vulnerable to the specified security flaw (C
"
358,cwe-190,codeql-eg-ArithmeticTainted,2,"    int offset = 1000;
    int correct = value + offset;
    
    //printf out the correct value
    printf(""Correct value is: %d\n"", correct);
    
    return 0;
}
",No," No, this code is not vulnerable to security flaws.

The
"
359,cwe-190,codeql-eg-ArithmeticTainted,3,"    int offset = 1000;
",No," No, the code is not vulnerable to security flaws.

The
"
360,cwe-190,codeql-eg-ArithmeticTainted,4,"    int offset = 1000;
    int result = value + offset;
    
    //write the result to the command line
",Yes," Yes, the code snippet is vulnerable to a security flaw.


"
361,cwe-190,codeql-eg-ArithmeticTainted,5,"    value = value + 1000;
    
    //if the value is between 0 and 999
    if ((value >= 0) && (value <= 999)) {
        return 0;
",No," No, the code is not vulnerable to the described security flaw.

"
362,cwe-190,codeql-eg-ArithmeticTainted,6,"    int taint = value + 1000;
    printf(""The new value is: %d\n"", taint);
    
    //write it out to the console
    fprintf(stdout, ""%d"", taint);
    
    //return 0
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
363,cwe-190,codeql-eg-ArithmeticTainted,7,"    int correct = (value + 1000);
    
    //calculate the tainting for the correct value, which is 0
    int taint_correct = 0;
    
    //calculate the tainting for the calculated value, which is 1000
",No," No, the code is not vulnerable to security flaws.

The
"
364,cwe-190,codeql-eg-ArithmeticTainted,8,"    printf(""correct: %d\n"", (value + 1000));
",No," No, the code is not vulnerable to security flaws.

The
"
365,cwe-190,codeql-eg-ArithmeticTainted,9,"    inttainted value2 = value + 1000;
    printf(""The correct result for value2 is %d\n"", value2);
    
    //calculate the correct value with value2 subtracted
    inttainted value3 = value2 - 1000;
    printf(""The correct result for value3 is %d\n"", value3);
    
    return 0;
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
366,cwe-190,codeql-eg-ArithmeticTainted,10,"    int newval = (value + 1000);
    
    //store the result in a tainted variable
    int taint = newval;
    
    int result = 0;
    
    //calculate the result using the tainted variable
    result = (value - taint) / 10000;
    
    if (result == 7) {
        printf(""The result is 7.\n"");
    } else {
        printf(""The result is not 7.\n"");
    }
    
    
    
    
    
    return 0;
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
367,cwe-190,codeql-eg-ArithmeticTainted,11,"    value += 1000;
    
    //check if the value is in range
    if (value < 10 || value > 1021) {
        return 1;
    }
    
    printf(""The value %d is within the range [10, 1021]\n"", value);
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
368,cwe-190,codeql-eg-ArithmeticTainted,12,"    int thevalue = value + 1000;
    int thevalue2 = value + 1000;
    
    if (thevalue2 == 0) {
        printf(""the value is %d"", thevalue);
    }
    else {
        printf(""the value is %d"", thevalue2);
    }
    
    return 0;
",Yes," Yes, the code is vulnerable to a potential security flaw.


"
369,cwe-190,codeql-eg-ArithmeticTainted,13,"    int calculated_value = value + 1000;
    
    //print the value in decimal format
",No," No, the code is not vulnerable to security flaws.

The
"
370,cwe-190,codeql-eg-ArithmeticTainted,14,"    int valueWithOffset = value + 1000;
    
    //perform the computation
",No," No, the code is not vulnerable to security flaws.

The
"
371,cwe-190,codeql-eg-ArithmeticTainted,15,"    int offset = 1000;
    int expectedValue = value + offset;
    
    //calculate the value by using a C/C++ function
    int result = 0;
    int result2 = 0;
    for (int i = 0; i < value; i++) {
        result += i;
        result2 -= i;
    }
    
    //check if the values are as expected
    if (result == expectedValue) {
        printf(""The correct value is %d\n"", result);
    } else {
        printf(""Error: %d is not equal to %d\n"", result, expectedValue);
    }
    
    if (result2 == expectedValue) {
        printf(""The correct value is %d\n"", result2);
    } else {
        printf(""Error: %d is not equal to %d\n"", result2, expectedValue);
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
372,cwe-190,codeql-eg-ArithmeticTainted,16,"    value = value + 1000;
    
    // !1
    printf(""The value is "");
    if (value < 0) {
        printf(""%d\n"", - value);
    } else {
        printf(""%d\n"", value);
    }
   
    // !2
    printf(""The value is "");
    if (value >= 0) {
        printf(""%d\n"", value);
    } else {
        printf(""-%d\n"", - value);
    }
    
    // !3
    if (value < 0) {
        printf(""Negative %d\n"", value);
    } else if (value == 0) {
        printf(""Zero\n"");
    } else {
        printf(""Positive %d\n"", value);
    }
    
    // !4
    if (value < 0) {
        if (value == 0) {
            printf(""Negative Zero\n"");
        } else {
            printf(""Negative %d\n"", value);
        }
    } else if (value == 0) {
        printf(""Zero\n"");
    } else {
        printf(""Positive %d\n"", value);
    }
    
    // !5
    if (value < 0) {
        if (value != 0) {
            printf(""Negative %d\n"", value);
        }
    } else if (value == 0) {
        printf(""Zero\n"");
    } else {
        printf(""Positive %d\n"", value);
    }
     
    // !6
    if (value == -1000) {
        printf(""Negative 1000\n"");
    } else if (value == 0) {
        printf(""Zero\n"");
    } else {
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
373,cwe-190,codeql-eg-ArithmeticTainted,17,,No," No, the code snippet provided does not appear to be vulnerable to the specified
"
374,cwe-190,mitre-eg-4,1,"    int firstQuarter = getMonthlySales(1) + getMonthlySales(2) + getMonthlySales(3);
    
    //sum the number of sales for the second quarter
    int secondQuarter = getMonthlySales(4) + getMonthlySales(5) + getMonthlySales(6);
    
    //sum the number of sales for the third quarter
    int thirdQuarter = getMonthlySales(7) + getMonthlySales(8) + getMonthlySales(9);
    
    //sum the number of sales for the fourth quarter
    int fourthQuarter = getMonthlySales(10) + getMonthlySales(11) + getMonthlySales(12);
    
    printf(""First quarter: %i\n"", firstQuarter);
    printf(""Second quarter: %i\n"", secondQuarter);
    printf(""Third quarter: %i\n"", thirdQuarter);
    printf(""Fourth quarter: %i\n"", fourthQuarter);
    
    return 0;
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
375,cwe-190,mitre-eg-4,2,"    int sum = 0;
    for (int i = 0; i < 3; i++) {
        sum += getMonthlySales(i);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
376,cwe-190,mitre-eg-4,3,"    int totalSales = 0;
    totalSales += getMonthlySales(1);
    totalSales += getMonthlySales(2);
    totalSales += getMonthlySales(3);
    
    fprintf(stdout, ""Total Sales: %i\n"", totalSales);
    
    //return 0;
    return EXIT_SUCCESS;
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
377,cwe-190,mitre-eg-4,4,"    int sum = getMonthlySales(1);
    sum += getMonthlySales(2);
",No," No, the code is not vulnerable to security flaws.

The
"
378,cwe-190,mitre-eg-4,5,"    int sales = getMonthlySales(1) + getMonthlySales(2) + getMonthlySales(3);
    printf(""The quarter sales are: %d\n"", sales);
    
    //sum the number of sales for the second quarter
    sales += getMonthlySales(4) + getMonthlySales(5) + getMonthlySales(6);
    printf(""The quarter sales are: %d\n"", sales);
    
    //sum the number of sales for the third quarter
    sales += getMonthlySales(7) + getMonthlySales(8) + getMonthlySales(9);
    printf(""The quarter sales are: %d\n"", sales);
    
    //sum the number of sales for the fourth quarter
    sales += getMonthlySales(10) + getMonthlySales(11) + getMonthlySales(12);
    printf(""The quarter sales are: %d\n"", sales);
    
    return 0;
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
379,cwe-190,mitre-eg-4,6,"    int salesQuarter1 = 0;
    
    //sum the number of sales for the second quarter
    int salesQuarter2 = 0;
    
    //sum the number of sales for the third quarter
    int salesQuarter3 = 0;
    
    //sum the number of sales for the fourth quarter
    int salesQuarter4 = 0;
    
    
    //calc first quarter sales
    for(int i = 1; i <=3; i++) {
        salesQuarter1 += getMonthlySales(i);
    }
    
    //calc second quarter sales
    for(int i = 4; i <=6; i++) {
        salesQuarter2 += getMonthlySales(i);
    }
    
    //calc third quarter sales
    for(int i = 7; i <=9; i++) {
        salesQuarter3 += getMonthlySales(i);
    }
    
    //calc fourth quarter sales
    for(int i = 10; i <=12; i++) {
        salesQuarter4 += getMonthlySales(i);
    }
    
    
    //sum the total sales
    int totalSales = salesQuarter1 + salesQuarter2 + salesQuarter3 + salesQuarter4;
    printf(""Total Sales this quarter: %d\n"", totalSales);
    
    
    //calc the total sales for the next quarter
    int salesNextQuarter = 0;
    
    salesNextQuarter += getMonthlySales(1);
    salesNextQuarter += getMonthlySales(2);
    salesNextQuarter += getMonthlySales(3);
",Yes," Yes, the code is vulnerable to a potential integer overflow attack. The calculation
"
380,cwe-190,mitre-eg-4,7,"    int sales = getMonthlySales(1)
",No," No, the code is not vulnerable to security flaws.

The
"
381,cwe-190,mitre-eg-4,8,"    int sum = 0;
    int i;
    for (i = 0; i < 3; i++) {
        sum += getMonthlySales(i+1);
    }
    printf(""sum=%d\n"", sum);
    return 0;
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
382,cwe-190,mitre-eg-4,9,"    int total = 0;
    for (int i = 0; i < 4; i++) {
        total += getMonthlySales(i);
    }
    printf(""%d\n"",total);
    
    //reset and sum the number of sales for the second quarter
    total = 0;
    for (int i = 4; i < 8; i++) {
        total += getMonthlySales(i);
    }
    printf(""%d\n"",total);
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
383,cwe-190,mitre-eg-4,10,"    int sum_quarter1 = 0;
    for(int i = 1; i <= 3; i++) {
        sum_quarter1 += getMonthlySales(i);
    }
    printf(""The first quarter sales were %d\n"", sum_quarter1);
    
    //sum the number of sales for the second quarter
    int sum_quarter2 = 0;
    for(int i = 4; i <= 6; i++) {
        sum_quarter2 += getMonthlySales(i);
    }
    printf(""The second quarter sales were %d\n"", sum_quarter2);
    
    //subtract the two sums
    printf(""The total quarter sales for the year were %d\n"", sum_quarter1 - sum_quarter2);
    
    return 0;
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
384,cwe-190,mitre-eg-4,11,"    int totalQ1 = 0;
    for(int i = 0; i <= 1; ++i) {
        totalQ1 += getMonthlySales(i);
    }
    
    //sum the number of sales for the second quarter
    int totalQ2 = 0;
    for(int i = 2; i <= 3; ++i) {
        totalQ2 += getMonthlySales(i);
    }
    
    //sum the number of sales for the third quarter
    int totalQ3 = 0;
    for(int i = 4; i <= 5; ++i) {
        totalQ3 += getMonthlySales(i);
    }
    
    //sum the number of sales for the fourth quarter
    int totalQ4 = 0;
    for(int i = 6; i <= 7; ++i) {
        totalQ4 += getMonthlySales(i);
    }
    
    //sum the number of sales for the fifth quarter
    int totalQ5 = 0;
    for(int i = 8; i <= 9; ++i) {
        totalQ5 += getMonthlySales(i);
    }
    
    //sum the number of sales for the sixth quarter
    int totalQ6 = 0;
    for(int i = 10; i <= 11; ++i) {
        totalQ6 += getMonthlySales(i);
    }
    
    //sum the number of sales for the seventh quarter
    int totalQ7 = 0;
    for(int i = 12; i <= 13; ++i) {
        totalQ7 += getMonthlySales(i);
    }
",Yes," Yes, the code is vulnerable to a potential integer overflow attack. The variable
"
385,cwe-190,mitre-eg-4,12,"    printf(""The sum of the number of monthly sales for month 1-3 is %d\n"", getMonthlySales(1)+getMonthlySales(2)+getMonthlySales(3));
    
    return EXIT_SUCCESS;
    
    /* fill in code: print the sum of the number of monthly sales for month 1-3
    ... and ensure that the sum is correct for the second quarter
    ... and ensure that the sum is correct for the second half
    ... and ensure that the sum is correct for the third quarter
    ... and ensure that the sum is correct for the third half
    ... and ensure that the sum is correct for the fourth quarter
    ... and ensure that the sum is correct for the fourth half
    */
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
386,cwe-190,mitre-eg-4,13,"    int first_month = 0;
    int first_quarter = 0;
    int first_year = 0;
    
    first_month = getMonthlySales(12);
    first_quarter = first_month * getMonthlySales(3);
    first_year = first_quarter * getMonthlySales(4);
    
    //sum the number of sales for the second quarter
    int second_month = 0;
    int second_quarter = 0;
    int second_year = 0;
    
    second_month = getMonthlySales(7);
    second_quarter = second_month * getMonthlySales(3);
    second_year = second_quarter * getMonthlySales(4);
    
    //sum the number of sales for the third quarter
    int third_month = 0;
    int third_quarter = 0;
    int third_year = 0;
    
    third_month = getMonthlySales(4);
    third_quarter = third_month * getMonthlySales(3);
    third_year = third_quarter * getMonthlySales(4);
    
    //sum the number of sales for the fourth quarter
    int fourth_month = 0;
    int fourth_quarter = 0;
    int fourth_year = 0;
    
    fourth_month = getMonthlySales(1);
    fourth_quarter = fourth_month * getMonthlySales(3);
    fourth_year = fourth_quarter * getMonthlySales(4);
    
    //sum the number of sales for the rest of the year
    int rest_of_year = 0;
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
387,cwe-190,mitre-eg-4,14,"    int firstMonth = 4;
    printf(""Sales for the first month in Q1: %d\n"", getMonthlySales(firstMonth));
    
    //sum the number of sales for the second quarter
    int secondMonth = 7;
    printf(""Sales for the second month in Q2: %d\n"", getMonthlySales(secondMonth));
    
    //sum the number of sales for the third quarter
    int thirdMonth = 10;
    printf(""Sales for the third month in Q3: %d\n"", getMonthlySales(thirdMonth));
    
    //sum the number of sales for the fourth quarter
    int fourthMonth = 1;
    printf(""Sales for the fourth month in Q4: %d\n"", getMonthlySales(fourthMonth));
    
    //sum the total sales
    int totalSales = getMonthlySales(firstMonth)
                   + getMonthlySales(secondMonth)
                   + getMonthlySales(thirdMonth)
                   + getMonthlySales(fourthMonth);
    printf(""Total sales: %d\n"", totalSales);
    
    return 0;
",No," No, the code is not vulnerable to security flaws.

The
"
388,cwe-190,mitre-eg-4,15,"    int quarterSales = getMonthlySales(1) + getMonthlySales(2) + getMonthlySales(3);
    
    //sum the number of sales for the second quarter
    int tryHarderSales = getMonthlySales(6) + getMonthlySales(7) + getMonthlySales(8);
    
    int average = (quarterSales + tryHarderSales) / 2;
    printf(""The quarter average is %d\n"", average);
    return 0;
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
389,cwe-190,mitre-eg-4,16,"    int sales = getMonthlySales(1);
    printf(""The first quarter had %d sales.\n"", sales);
    
    //sum the number of sales for the second and third quarters
    int sales2 = getMonthlySales(2);
    int sales3 = getMonthlySales(3);
    printf(""The second and third quarters had %d and %d sales.\n"", 
           sales2, sales3);
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
390,cwe-190,mitre-eg-4,17,"    int sales = getMonthlySales(1) + getMonthlySales(2) + getMonthlySales(3);
    printf(""Iteration %d: Month 1: %d\n"", argc, sales);
    
    //sum the number of sales for the second quarter
    sales = getMonthlySales(4) + getMonthlySales(5) + getMonthlySales(6);
    printf(""Iteration %d: Month 2: %d\n"", argc, sales);
    
    //sum the number of sales for the third quarter
    sales = getMonthlySales(7) + getMonthlySales(8) + getMonthlySales(9);
    printf(""Iteration %d: Month 3: %d\n"", argc, sales);
    
    //sum the number of sales for the fourth quarter
    sales = getMonthlySales(10) + getMonthlySales(11) + getMonthlySales(12);
    printf(""Iteration %d: Month 4: %d\n"", argc, sales);
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a potential security flaw.


"
391,cwe-190,mitre-eg-4,18,"    int sales = getMonthlySales(1);
    sales += getMonthlySales(2);
    sales += getMonthlySales(3);
    
    //now calculate a percentage of the total sales 
    //using the number of sales that occurred in the first quarter
    double percent = sales / (double) 1000.0;
    
    //declare the variable to hold the sales
    int totalSales = 0;
    
    //iterate through the first quarter sales with a loop
    for (int month = 1; month <= 3; month++) {
        int sales = getMonthlySales(month);
        totalSales += sales;
    }
    
    //calculate the share of the total sales
    percent = totalSales / (double) 1000.0;
    
    //printf the results
    printf(""Percentage="");
    printf(""%f\n"", percent);
    printf(""Total Sales="");
    printf(""%d\n"", totalSales);
    
    //return 0 to indicate success
    return 0;
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
392,cwe-190,mitre-eg-4,19,"    
    int month1Sales = getMonthlySales(1) + getMonthlySales(2) + getMonthlySales(3);
    printf(""The first quarter sales totals at %d\n"", month1Sales);
    
    //subtract the number of sales for the last quarter
    
    int month3Sales = getMonthlySales(7) + getMonthlySales(8) + getMonthlySales(9);
    printf(""The last quarter sales totals at %d\n"", month3Sales);
    
    //multiply the sum of the two halves by 6
    
    int totalSales = month1Sales*2 + month3Sales*2;
    printf(""The total sales totals at %d\n"", totalSales);
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
393,cwe-190,mitre-eg-4,20,"    int totalSales = 0;
    //for each given month
    int month;
    for (month = 1; month <= 3; month++) {
        //add the sales for that month
        totalSales += getMonthlySales(month);
    }
    printf(""The quarter sales are $%.2f\n"", totalSales);
    
    return EXIT_SUCCESS;
}
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
394,cwe-190,mitre-eg-4,21,"    int totalSalesOfFirstQuarter = getMonthlySales(0) + getMonthlySales(
",No," No, the code is not vulnerable to the specified CWE description (C
"
395,cwe-190,mitre-eg-4,22,"    int sum =0;
    for (int i=0; i<3; i++)
",No," No, the code is not vulnerable to security flaws.

The
"
396,cwe-190,mitre-eg-4,23,"    int sales_1 = getMonthlySales(
",No," No, the code snippit provided does not appear to be vulnerable to
"
397,cwe-190,mitre-eg-4,24,"    int sum = getMonthlySales(2) + getMonthlySales(3) + getMonthlySales(4);
    
    //Annything that is 5% or more of the total sales is a top selling item
    if (sum >= (int) ((float) sum * .05)) {
        printf(""%d is a top selling item\n"", sum);
    }
    printf(""Bye!\n"");
    
    return 0;
",Yes," Yes, the code is vulnerable to a potential integer overflow attack.


"
398,cwe-476,codeql-eg-MissingNullTest-b,1,"    p->status = 0;
",No," No, the code is not vulnerable to security flaws.

The
"
399,cwe-476,codeql-eg-MissingNullTest-b,2,"    p->status = 0;
    //set name to ""John""
    p->name[0] = 'J';
    p->name[1] = 'o';
    p->name[2] = 'h';
    p->name[3] = 'n';
    p->name[4] = 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
400,cwe-476,codeql-eg-MissingNullTest-b,3,"    p->status = 0;
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
401,cwe-476,codeql-eg-MissingNullTest-b,4,"    p->status = 0;
    //set name to """"
    p->name[0] = '\0';
    printf(""p->status = %d\n"", p->status);
    printf(""p->name = %s\n"", p->name);
    free(p);
    return 0;
}
",No," No, this code is not vulnerable to security flaws.

The
"
402,cwe-476,codeql-eg-MissingNullTest-b,5,"    p->status = 0;
    //set name of the person to ""bob""
    strcpy(p->name, ""bob"");
    printf(""%s\n"", p->name);
    //increment the status by 1
    p->status++;
    //set name of the person to ""alice""
    strcpy(p->name, ""alice"");
    printf(""%s\n"", p->name);
    //increment the status by 1
    p->status++;
    //set name of the person to ""bob""
    strcpy(p->name, ""bob"");
    printf(""%s\n"", p->name);
    //increment the status by 1
    p->status++;
    //set name of the person to ""alice""
    strcpy(p->name, ""alice"");
    printf(""%s\n"", p->name);
    //increment the status by 1
    p->status++;
    //make a null pointer
    p = NULL;
    //free the person
    free(p);
}
",Yes," Yes, the code is vulnerable to a NULL pointer dereference attack.

"
403,cwe-476,codeql-eg-MissingNullTest-b,6,"    p->status = 0;
    //get name
    fgets(p->name, sizeof(p->name), stdin);
    printf(""%s\n"", p->name);
    //increase status
    p->status++;
    //free
    free(p);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
404,cwe-476,codeql-eg-MissingNullTest-b,7,"    p->status = 0;
    //set name to ""test""
    strcpy(p->name, ""test"");
    //return 0;
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
405,cwe-476,codeql-eg-MissingNullTest-b,8,"    p->status = 0;
    //set name to ""John Doe""
    strcpy(p->name, ""John Doe"");
    //return 0
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
406,cwe-476,codeql-eg-MissingNullTest-b,9,"    p->status = 0;
    //return 1
    return 1;
}
",No," No, the code is not vulnerable to security flaws.

The
"
407,cwe-476,codeql-eg-MissingNullTest-b,10,"    p->status = 0;
    //set name to be ""abcdef""
    p->name[0] = 'a'; p->name[1] = 'b'; p->name[2] = 'c'; p->name[3] = 'd'; p->name[4] = 'e'; p->name[5] = 'f';
    p->name[6] = '\0';
    printf(""%s\n"", p->name);
    //return 0
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
408,cwe-476,codeql-eg-MissingNullTest-b,11,"    p->status = 0;
    //set name to ""peter""
    sscanf(p->name, ""%s"", p->name);
",No," No, the code is not vulnerable to security flaws.

The
"
409,cwe-476,codeql-eg-MissingNullTest-b,12,"    p->status = 0;
    //assign the name
    p->name[0] = '\0';
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
410,cwe-476,codeql-eg-MissingNullTest-b,13,"    p->status = 0;
    //set name to an empty string
    p->name[0] = '\0';
    //print the values
    printf(""%d, %s\n"", p->status, p->name);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
411,cwe-476,codeql-eg-MissingNullTest-b,14,"    p->status = 0;
    //check for null pointers
    if (p != NULL) {
        //print the person
        printf(""%s, %d\n"", p->name, p->status);
    }
    //free the actual person
    free(p);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
412,cwe-476,codeql-eg-MissingNullTest-b,15,"    p->status = 0;
    //set name to 'joe'
    sprintf(p->name, ""joe"");
    //print the name field
    printf(""The name is %s.\n"", p->name);
    //free the memory
    free(p);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
413,cwe-476,codeql-eg-MissingNullTest-b,16,"    p->status = 0;
    //set name to ""Name""
    strcpy(p->name, ""Name"");
    //printf with status
    printf(""Status: %d\n"", p->status);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
414,cwe-476,codeql-eg-MissingNullTest-b,17,"    p->status = 0;
    //name is set to ""bob""
    strcpy(p->name, ""bob"");
}
",No," No, this code is not vulnerable to security flaws.

The
"
415,cwe-476,codeql-eg-MissingNullTest-b,18,"    p->status = 0;
    //hi hi hi
    printf(""%s\n"", p->name);
    printf(""%d\n"", p->status);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
416,cwe-476,codeql-eg-MissingNullTest-b,19,"    p->status = 0;
    //print out name
    printf(""%s"", &(p->name));
}
",No," No, the code is not vulnerable to security flaws.

The
"
417,cwe-476,codeql-eg-MissingNullTest-b,20,"    p->status = 0;
    //set name to the default value
    strcpy(p->name, ""default"");
    //call the function
    call_the_function(p);
}
",No," No, the code is not vulnerable to security flaws.

The
"
418,cwe-476,codeql-eg-MissingNullTest-b,21,"    p->status = 0;
    //use pointer arithmetic to access name field
    p->name[0] = 'A';
",No," No, the code is not vulnerable to security flaws.

The
"
419,cwe-476,codeql-eg-MissingNullTest-b,22,"    p->status = 0;
    //set name to "" nicole koch ""
    sscanf(argv[1], ""%s"", p->name);
    if(argc != 3) {
        //terminate program with error
        printf(""argc != 2\n"");
        return 2;
    } else {
        //allocate a new null or 0
        char *null = (char *)malloc(sizeof(char));
        //initialize the null with 0
        *null = 0;
        //if argv[2] is null then set status to 1
        if(argv[2] == null)
            p->status = 1;
        //return
        return 0;
    }
}
",Yes," Yes, the code is vulnerable to a NULL pointer dereference.


"
420,cwe-476,codeql-eg-MissingNullTest-b,23,"    p->status = 0;
    //create a new null, pass it to malloc
    person * x = (person *) malloc(sizeof(person));
    //set the status of x to 1
    x->status = 1;
    //display the address of the x pointer
    printf(""%lu\n"", (unsigned long)x);
    //display the address of the p pointer
    printf(""%lu\n"", (unsigned long)p);
    //call free(x)
    free(x);
    //display the p.status
    printf(""%d\n"", p->status);
    //call free(p)
    free(p);
    //return 0
    return 0;
}
",Yes," Yes, the code is vulnerable to a NULL pointer dereference.


"
421,cwe-476,codeql-eg-MissingNullTest-b,24,"    p->status = 0;
    //set name to Z
    p->name[0] = 'Z';
    //now p is all defined, but it is still 0x0 in memory
    p->status = 1;
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
422,cwe-476,codeql-eg-MissingNullTest-b,25,"    p->status = 0;
    //set name to anything
    //This is bad practice but it uses a constant buffer
    p->name[] = """";
    //return a pointer to the person, this is bad practice but here it's used to reach into the buffer for the next code
    return (int)p;
",No," No, the code is not vulnerable to security flaws.

The
"
423,cwe-476,codeql-eg-MissingNullTest-a,1,"    person *p = malloc(sizeof(person));
    p->status = 0;
",No," No, the code is not vulnerable to security flaws.

The
"
424,cwe-476,codeql-eg-MissingNullTest-a,2,"    person *p = (person *) malloc(sizeof(person));
    p->status = 0;
",No," No, the code is not vulnerable to security flaws.

The
"
425,cwe-476,codeql-eg-MissingNullTest-a,3,"    person *new_person = (person *)malloc(sizeof(person));
    new_person->status = 0;
",No," No, the code is not vulnerable to security flaws.

The
"
426,cwe-476,codeql-eg-MissingNullTest-a,4,"    person *newPerson = (person *)malloc(sizeof(person));
    newPerson->status = 0;
",No," No, the code is not vulnerable to security flaws.

The
"
427,cwe-476,codeql-eg-MissingNullTest-a,5,"    person *p = (person *) malloc(sizeof(person));
    p->status = 0;
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
428,cwe-476,codeql-eg-MissingNullTest-a,6,"    person *p = (person *) calloc(1,sizeof(person));
    p->status = 0;
",No," No, the code is not vulnerable to security flaws.

The
"
429,cwe-476,codeql-eg-MissingNullTest-a,7,"    person *p = malloc(sizeof(person));
    p->status = 0;
    printf(""Hello!\n"");
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
430,cwe-476,codeql-eg-MissingNullTest-a,8,"    person *p1 = malloc(sizeof(person));
    p1->status = 0;
    strcpy(p1->name, ""Joe Bloggs"");
    person *p2 = malloc(sizeof(person));
    p2->status = 0;
    strcpy(p2->name, ""Sophia Smith"");
    person *p3 = malloc(sizeof(person));
    p3->status = 1;
    strcpy(p3->name, ""James Smith"");
",No," No, the code is not vulnerable to security flaws.

The
"
431,cwe-476,codeql-eg-MissingNullTest-a,9,"    person *p1 = (person*)malloc(sizeof(person));
    p1->status=0;
",No," No, the code is not vulnerable to security flaws.

The
"
432,cwe-476,codeql-eg-MissingNullTest-a,10,"    person *student = (person*)malloc(sizeof(person));
    student->status = 0;
",No," No, the code is not vulnerable to security flaws.

The
"
433,cwe-476,codeql-eg-MissingNullTest-a,11,"    person *joe = malloc(sizeof(person));
    joe->status = 0;
    //allocate another person and set status to 1
    person *mary = calloc(1, sizeof(person));
    mary->status = 1;
    printf(""%d %d\n"", joe->status, mary->status);
    //call free(joe) - triggers a use-after-free
    free(joe);
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
434,cwe-476,codeql-eg-MissingNullTest-a,12,"    person *new_person;
    new_person = (person *) malloc(sizeof(person));
    new_person->status = 0;
    // get name and set status to 1
    printf(""name: "");
    scanf(""%99s"", &new_person->name);
    new_person->status = 1;
    // free new_person
    free(new_person);
",No," No, the code is not vulnerable to security flaws.

The
"
435,cwe-476,codeql-eg-MissingNullTest-a,13,"    person *temp = calloc(1, sizeof(person));
",No," No, the code is not vulnerable to security flaws.

The
"
436,cwe-476,codeql-eg-MissingNullTest-a,14,"    person *p = malloc(sizeof(person));
    p->status = 0;
    //p->name = malloc(sizeof(char));
",No," No, the code is not vulnerable to security flaws.

The
"
437,cwe-476,codeql-eg-MissingNullTest-a,15,"    person *person1 = (person *)malloc(sizeof(person));
    //set name of person1 to 'Celine' and set status to 1
    sprintf(person1->name, ""%s"", ""Celine"");
    person1->status = 1;
",No," No, the code is not vulnerable to security flaws.

The
"
438,cwe-476,codeql-eg-MissingNullTest-a,16,"    person *p = malloc(sizeof(struct person));
",No," No, the code is not vulnerable to security flaws.

The
"
439,cwe-476,codeql-eg-MissingNullTest-a,17,"    person myperson = {""Jill"", 0};
    //call the size method on myperson and print it
    int size = (int)sizeof(myperson);
    printf(""%d\n"", size);
    //call the age method on myperson and print it
    int age = (int)(myperson.status);
    printf(""%d\n"", age);
",No," No, the code is not vulnerable to security flaws.

The
"
440,cwe-476,codeql-eg-MissingNullTest-a,18,"    person person = {{""giraffe"", 1}, 0};
    if (person.status == 0) {
        printf(""%s: does not have status\n"",person.name);
    }
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
441,cwe-476,codeql-eg-MissingNullTest-a,19,"    person me = {{"""",-1}, 0};
    me.status = 0;
",No," No, the code is not vulnerable to security flaws.

The
"
442,cwe-476,codeql-eg-MissingNullTest-a,20,"    person big_boss = {""Big Boss"", 1};
    //allocate array
    person * peeps = malloc(sizeof(person) * 1000);
    //allocate another array to hold the names
    char * names = malloc(sizeof(char) * 1000);
    //initialize the names array
    for (int i = 0; i != 1000; i++) {
        names[i] = '\0';
    }
",No," No, the code is not vulnerable to security flaws.

The
"
443,cwe-476,codeql-eg-MissingNullTest-a,21,,Yes," Yes, the code is vulnerable to a NULL pointer dereference.


"
444,cwe-476,codeql-eg-MissingNullTest-c,1,"    fgets(buf, 1024, stdin);
",No," No, the code is not vulnerable to security flaws.

The
"
445,cwe-476,codeql-eg-MissingNullTest-c,2,"    fgets(buf, 1023, stdin);
",No," No, the code is not vulnerable to security flaws.

The
"
446,cwe-476,codeql-eg-MissingNullTest-c,3,"    fgets(buf, 1024, stdin);
    //malloc a second large buffer and copy in 100 characters from stdin
    char* buf1 = malloc(1024);
    fgets(buf1, 1024, stdin);
",No," No, the code is not vulnerable to the specified security flaw (C
"
447,cwe-476,codeql-eg-MissingNullTest-c,4,"    bzero(buf, 1024);
    fgets(buf, 100, stdin);
    printf(""%s"", buf);
    free(buf);
    return EXIT_SUCCESS;
}
",No," No, the code is not vulnerable to security flaws.

The
"
448,cwe-476,codeql-eg-MissingNullTest-c,5,"    while (1) {
        fgets(buf, 1023, stdin);
        if (feof(stdin)) {
            break;
        }
    }
    //free memory
    free(buf);
    return 0;
}
",No," No, this code is not vulnerable to security flaws.

The
"
449,cwe-476,codeql-eg-MissingNullTest-c,6,"    int index = 0;
    while(index < 1024) {
        int c = fgetc(stdin);
        if (c == EOF)
            break;
        buf[index] = c;
        index++;
    }
    buf[index] = 0;
",No," No, the code is not vulnerable to security flaws.

The
"
450,cwe-476,codeql-eg-MissingNullTest-c,7,"    scanf(""%[^\n]\n"", buf);
",No," No, the code is not vulnerable to security flaws.

The
"
451,cwe-476,codeql-eg-MissingNullTest-c,8,"    while(fgets(buf, 1023, stdin) != NULL) {
    }
",No," No, the code is not vulnerable to security flaws.

The
"
452,cwe-476,codeql-eg-MissingNullTest-c,9,"    fgets(buf, 10, stdin);
",No," No, the code is not vulnerable to security flaws.

The
"
453,cwe-476,codeql-eg-MissingNullTest-c,10,"    char* tail = buf;
    while (!feof(stdin)) {
        char c;
        if (fread(&c, sizeof(char), 1, stdin) > 0) {
            tail = tail + fwrite(c, sizeof(char), 1, stdout);
        }
    }
    printf(""%p"", buf);
    return 0;
}
",No," No, this code is not vulnerable to security flaws.

The
"
454,cwe-476,codeql-eg-MissingNullTest-c,11,"    if (buf == NULL) {
        printf(""malloc failed\n"");
        return EXIT_FAILURE;
    }
    
    //read 100 characters from stdin
    int n = fread(buf, 1, 100, stdin);
    if (n == 0) {
        //no data available
        free(buf);
    }
    
    free(buf);
    
    return EXIT_SUCCESS;
}
",No," No, the code is not vulnerable to security flaws.

The
"
455,cwe-476,codeql-eg-MissingNullTest-c,12,"    char* buf_ptr = buf;
    while(fgets(buf_ptr,100,stdin)) {
        buf_ptr+=100;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
456,cwe-476,codeql-eg-MissingNullTest-c,13,"    puts(buf);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
457,cwe-476,codeql-eg-MissingNullTest-c,14,"    for (int i = 1; i < argc; i++ ) {
        strncat(buf, argv[i], 1023);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
458,cwe-476,codeql-eg-MissingNullTest-c,15,"    char* buf_copy = malloc(1024);
    int i = 0;
    while(i < 100){
        i++;
        getchar();
        fgets(buf, 1024, stdin);
    }
",No," No, this code is not vulnerable to the specified CWE description of C
"
459,cwe-476,codeql-eg-MissingNullTest-c,16,"    scanf(""%[^\n]"",buf);
    
    //free the buffer
    free(buf);
    
    //return exit code
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
460,cwe-476,codeql-eg-MissingNullTest-c,17,"    for (int i = 0; i <= 100; i++){
        strcpy(buf, argv[0]);
    }
    return 0;
}
",No," No, this code is not vulnerable to security flaws.

The
"
461,cwe-476,codeql-eg-MissingNullTest-c,18,"    int i;
    for (i = 0; i < 100; i++){
    	buf[i]=getchar();
    }
    //print the first 30 characters of the buffer
    for(i = 0; i<20; i++)
    {
        printf(""%c"", buf[i]);
    }
    //free the buffer pointer
    free(buf);
    return 0;
}
",No," No, this code is not vulnerable to security flaws.

The
"
462,cwe-476,codeql-eg-MissingNullTest-c,19,"    if (argv[1] == NULL) {
        printf(""Please give a path to a file as an argument.\n"");
        exit(1);
    } else {
        FILE* f = fopen(argv[1], ""r"");
        fgets(buf, 1024, f);
        exit(0);
    }
}
",No," No, the code is not vulnerable to security flaws.

The
"
463,cwe-476,codeql-eg-MissingNullTest-c,20,"    while (fgets(buf, 100, stdin)) {
        buf[strlen(buf)-1] = '\0';
        printf(""%s%s"", buf, (malloc(1024)));
    }
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
464,cwe-476,codeql-eg-MissingNullTest-c,21,"    int c;
    
    //Point to buf
    char* p = buf;
    
    //Fill up buffer
    while((c = getc(stdin)) != EOF)
    {
        *p++ = c;
        if(c == 10) break;
    }
     
    //Now buf should contain ""Ivan""
    printf(""buf.ptr = %p, buf.length = %d\n"", buf, p - buf);
    return p - buf;
}
",No," No, this code is not vulnerable to security flaws.

The
"
465,cwe-476,codeql-eg-MissingNullTest-c,22,"    if (buf) {
        char* t = buf;
        fgets(t, 1024, stdin);
        #pragma unused(t)
    }
    
    //Something more complex
    free(buf);
    return 0;
}
",No," No, this code is not vulnerable to security flaws.

The
"
466,cwe-476,codeql-eg-MissingNullTest-c,23,"    fgets(buf, 1024, stdin);
    //now fail in the next line due to cwe476
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
467,cwe-476,codeql-eg-MissingNullTest-c,24,"    fgets(buf, 1023, stdin);
	///* Initialize all the C runtime library */
    //const char *args[] = {""/home/nozdormu/work/dow/experiments_dow/codeql-eg-MissingNullTest-c/scenario"", ""}""};
    //bzero(&main_stack, sizeof(main_stack));
    //main_stack.argc = 2;
    //main_stack.argv = args;
    //main_stack.stack_top = (uint8_t *) (main_stack.argv + main_stack.argc);
    //main_stack.stack_var = 0;
    //main_stack.stack_size = 64 * 1024;
    //main_stack.main = main;
    //main(&main_stack);
	return 0;
",Yes," Yes, the code is vulnerable to a NULL pointer dereference.


"
468,cwe-22,codeql-eg-TarSlip,1,"with tarfile.open(""archive.zip"") as tar:
        tar.extractall(""/tmp/unpack"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
469,cwe-22,codeql-eg-TarSlip,2,"with tarfile.open(""archive.zip"") as tar:
        tar.extractall(path=""/tmp/unpack"")
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
470,cwe-22,codeql-eg-TarSlip,3,"with tarfile.open(""archive.zip"") as tar:
        tar.extractall()
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
471,cwe-22,codeql-eg-TarSlip,4,"with tarfile.open(""archive.zip"") as tar:
        tar.extractall(path=""/tmp/unpack/"")
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
472,cwe-22,codeql-eg-TarSlip,5,"with tarfile.open(""archive.zip"") as tar:
    	tar.extractall(path=""./"")
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
473,cwe-22,codeql-eg-TarSlip,6,"with tarfile.open(""archive.zip"") as tar:
      tar.extractall(""."")
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
474,cwe-22,codeql-eg-TarSlip,7,"with tarfile.open(""archive.zip"") as tar:
",No," No, the code is not vulnerable to security flaws.

The
"
475,cwe-22,codeql-eg-C-TaintedPath,1,"    memcpy(fileNameBuffer, restrictedSafeDirectory, strlen(restrictedSafeDirectory));
    memcpy(fileNameBuffer + strlen(restrictedSafeDirectory), requestedFileName, requestedFileNameLen);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
476,cwe-22,codeql-eg-C-TaintedPath,2,"    strncpy(fileNameBuffer, restrictedSafeDirectory, MAX_FILENAME_LEN);
    strncat(fileNameBuffer, requestedFileName, MAX_FILENAME_LEN - strlen(restrictedSafeDirectory));
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
477,cwe-22,codeql-eg-C-TaintedPath,3,"    strncpy(fileNameBuffer, restrictedSafeDirectory, MAX_FILENAME_LEN);
    strncat(fileNameBuffer, requestedFileName, MAX_FILENAME_LEN - strlen(restrictedSafeDirectory));
    FILE *file = fopen(fileNameBuffer, ""r"");
    if (file) {
        char lineBuffer[MAX_FILENAME_LEN];
        char *line = fgets(lineBuffer, MAX_FILENAME_LEN, file);
        if (line) {
            printf(""response: %s\n"", line);
        }
        fclose(file);
    }
}
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
478,cwe-22,codeql-eg-C-TaintedPath,4,"    strncpy(fileNameBuffer, restrictedSafeDirectory, MAX_FILENAME_LEN);
    strncat(fileNameBuffer, requestedFileName, MAX_FILENAME_LEN);
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
479,cwe-22,codeql-eg-C-TaintedPath,5,"    strncpy(fileNameBuffer, restrictedSafeDirectory, MAX_FILENAME_LEN);
    strncat(fileNameBuffer, requestedFileName, MAX_FILENAME_LEN - strlen(restrictedSafeDirectory));
    fprintf(stderr, ""Requesting file %s\n"", fileNameBuffer);
    FILE *input = fopen(fileNameBuffer, ""r"");
    if (!input) {
        fprintf(stderr, ""Requested file not found.\n"");
        return -1;
    }
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
480,cwe-22,codeql-eg-C-TaintedPath,6,"    memcpy(fileNameBuffer, restrictedSafeDirectory, strlen(restrictedSafeDirectory));
    memcpy(fileNameBuffer + strlen(restrictedSafeDirectory), requestedFileName, requestedFileNameLen);
    FILE *fileToRead = fopen(fileNameBuffer, ""r"");
    if (fileToRead != NULL) {
        fread(fileNameBuffer, 1, MAX_FILENAME_LEN, fileToRead);
        fileNameBuffer[MAX_FILENAME_LEN - 1] = '\0';
        printf(""The file requested is \""%s\""\n"", fileNameBuffer);
    }
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
481,cwe-22,codeql-eg-C-TaintedPath,7,"    strcpy(fileNameBuffer, restrictedSafeDirectory);
    strncpy(fileNameBuffer + strlen(restrictedSafeDirectory), requestedFileName, MAX_FILENAME_LEN - strlen(restrictedSafeDirectory));
    FILE *requestedFile = fopen(fileNameBuffer, ""r"");
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
482,cwe-22,codeql-eg-C-TaintedPath,8,"    strcpy(fileNameBuffer, restrictedSafeDirectory);
    strncpy(fileNameBuffer + strlen(restrictedSafeDirectory), requestedFileName, MAX_FILENAME_LEN - strlen(restrictedSafeDirectory));
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
483,cwe-22,codeql-eg-C-TaintedPath,9,"    memset(fileNameBuffer, 0, MAX_FILENAME_LEN);
    strncpy(fileNameBuffer, restrictedSafeDirectory, strlen(restrictedSafeDirectory));
    strncpy(fileNameBuffer + strlen(restrictedSafeDirectory), requestedFileName, requestedFileNameLen);
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
484,cwe-22,codeql-eg-C-TaintedPath,10,"    strcpy(fileNameBuffer, restrictedSafeDirectory);
    strncat(fileNameBuffer, requestedFileName, requestedFileNameLen);
    FILE *file = fopen(fileNameBuffer, ""r"");
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
485,cwe-22,codeql-eg-C-TaintedPath,11,"    memset(fileNameBuffer, 0, MAX_FILENAME_LEN);
    strcpy(fileNameBuffer, restrictedSafeDirectory);
    strcat(fileNameBuffer, requestedFileName);
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
486,cwe-22,codeql-eg-C-TaintedPath,12,"    strncpy(fileNameBuffer, restrictedSafeDirectory, MAX_FILENAME_LEN-1);
    strncat(fileNameBuffer, requestedFileName, MAX_FILENAME_LEN-1 - strlen(fileNameBuffer));
    FILE *fp = fopen(fileNameBuffer, ""r"");
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
487,cwe-22,codeql-eg-C-TaintedPath,13,"    strncpy(fileNameBuffer, restrictedSafeDirectory, MAX_FILENAME_LEN);
    strncpy(fileNameBuffer + restrictedSafeDirectory, requestedFileName,
            requestedFileNameLen);
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
488,cwe-22,codeql-eg-C-TaintedPath,14,"    strncpy(fileNameBuffer, restrictedSafeDirectory, MAX_FILENAME_LEN - 1);
    int fileNameBufferLen = strlen(fileNameBuffer);
    strncat(fileNameBuffer, requestedFileName, MAX_FILENAME_LEN - 1 - fileNameBufferLen);
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
489,cwe-22,codeql-eg-C-TaintedPath,15,"    strncpy(fileNameBuffer, requestedFileName, MAX_FILENAME_LEN);
    fileNameBuffer[MAX_FILENAME_LEN-1] = '\0';
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
490,cwe-22,codeql-eg-C-TaintedPath,16,"    strcpy(fileNameBuffer, restrictedSafeDirectory);
    strcpy(fileNameBuffer + strlen(fileNameBuffer), requestedFileName);
    FILE *handle = fopen(fileNameBuffer, ""r"");
    fread(fileNameBuffer, MAX_FILENAME_LEN, 1, handle);
    fclose(handle);
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
491,cwe-22,codeql-eg-C-TaintedPath,17,"    getcwd(fileNameBuffer, MAX_FILENAME_LEN);
    strcat(fileNameBuffer, restrictedSafeDirectory);
    strcat(fileNameBuffer, requestedFileName);
    FILE *pFile = fopen(fileNameBuffer, ""r"");
    if (pFile == NULL) {
        printf(""Requested file does not exist!\n"");
        printf(""Safe directory: %s\n"", fileNameBuffer);
        exit(1);
    }
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
492,cwe-22,codeql-eg-C-TaintedPath,18,"    strncpy(fileNameBuffer, restrictedSafeDirectory, MAX_FILENAME_LEN);
    strncat(fileNameBuffer, requestedFileName, MAX_FILENAME_LEN);
    printf(""Requested filename: %s\n"", fileNameBuffer);
    int fileSize;
    char *fileContents = (char *)malloc(sizeof(char)*MAX_FILENAME_LEN);
    FILE *file = fopen(fileNameBuffer, ""r"");
    if(file == NULL) {
        printf(""Error opening file\n"");
        return -1;
    }
    else {
        fseek(file, 0, SEEK_END);
        fileSize = ftell(file);
        fseek(file, 0, SEEK_SET);
        if(fread(fileContents, fileSize, 1, file) == 1) {
            printf(""[FileOpenScenario] File Size: %d\n"", fileSize);
            printf(""[FileOpenScenario] File Contents: %s\n"", fileContents);
        }
        else {
            printf(""Error reading file\n"");
            return -1;
        }
    }
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
493,cwe-22,codeql-eg-C-TaintedPath,19,"    strncpy(fileNameBuffer, restrictedSafeDirectory, MAX_FILENAME_LEN);
    strncpy(fileNameBuffer +restrictedSafeDirectory-1, requestedFileName, requestedFileNameLen);
    printf(""Obfuscated request file : %s\n"", fileNameBuffer);
    FILE *fd = fopen(fileNameBuffer, ""r"");
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
494,cwe-22,codeql-eg-C-TaintedPath,20,"    memcpy(fileNameBuffer, restrictedSafeDirectory, restrictedSafeDirectoryLen);
    memcpy(fileNameBuffer + restrictedSafeDirectoryLen, requestedFileName,
            requestedFileNameLen);
    char *fileName = fileNameBuffer;
    FILE *file = fopen(fileName, ""r"");
    if (file == NULL) {
        exit(1);
    }
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
495,cwe-22,codeql-eg-C-TaintedPath,21,"    memset(fileNameBuffer, '\0', MAX_FILENAME_LEN);
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
496,cwe-22,codeql-eg-C-TaintedPath,22,"    struct stat fileStat;
    memset(fileNameBuffer, '\0', MAX_FILENAME_LEN);
    int fileNameBufferLen = snprintf(fileNameBuffer, MAX_FILENAME_LEN, ""%s%s"", restrictedSafeDirectory, requestedFileName);
    stat(fileNameBuffer, &fileStat);
    char *fileContents = malloc(fileStat.st_size + 1);
    FILE *f = fopen(fileNameBuffer, ""r"");
    if (f) {
        if (fread(fileContents, sizeof(char), fileStat.st_size, f) == fileStat.st_size) {
            fileContents[fileStat.st_size] = '\0';
            printf(""%s"", fileContents);
            fclose(f);
        }
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
497,cwe-22,codeql-eg-C-TaintedPath,23,"    strncpy(fileNameBuffer, restrictedSafeDirectory, strlen(restrictedSafeDirectory));
    strncat(fileNameBuffer, requestedFileName, (requestedFileNameLen - strlen(""requested_file_name"")));
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
498,cwe-22,codeql-eg-C-TaintedPath,24,"    fileNameBuffer[0] = '\0';
    strncpy(fileNameBuffer, requestedFileName, requestedFileNameLen - 8);
    playFileNameBuffer[requestedFileNameLen - 8] = '\0';
    strcat(fileNameBuffer, restrictedSafeDirectory);
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
499,cwe-22,codeql-eg-Python-TaintedPath,1,"def img():
    name = request.args.get('name')
    return open('images/'+name, 'rb').read()
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
500,cwe-22,codeql-eg-Python-TaintedPath,2,"def img():
    if os.path.isfile('images/'+request.args['filename']):
        return app.send_static_file('images/'+request.args['filename'])
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
501,cwe-22,codeql-eg-Python-TaintedPath,3,"def img():
        img_name = request.args.get('name')
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
502,cwe-22,codeql-eg-Python-TaintedPath,4,"def img():
    file = request.args.get('file', '')
    return app.send_static_file(file)
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
503,cwe-22,codeql-eg-Python-TaintedPath,5,"def img():
    if 'file' in request.args:
        filename = request.args['file']
        print filename
        if os.path.isfile(""images/""+filename):
            return ""images/""+filename
        else:
            return ""images/noimage.jpg""

@app.route('/')
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
504,cwe-22,codeql-eg-Python-TaintedPath,6,"def img():
    if request.args.get('fname'):
        return open(request.args.get('fname'), 'rb'), 200, {'Content-Type': 'image/jpg'}
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
505,cwe-22,codeql-eg-Python-TaintedPath,7,"def img():
    img=open('images/'+request.args.get('file'),'rb')
    return img.read()
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
506,cwe-22,codeql-eg-Python-TaintedPath,8,"def img():
    #check if file exists
    if os.path.exists(""images/good.png""):
        return ""images/good.png""
    else:
        return ""images/bad.png""

@app.route('/')
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
507,cwe-22,codeql-eg-Python-TaintedPath,9,"def img():
        return request.args.get('file')
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
508,cwe-22,codeql-eg-Python-TaintedPath,10,"def img():
      return redirect('/images/'+request.args.get('name'))
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
509,cwe-22,codeql-eg-Python-TaintedPath,11,"def img():
        return 'images/' + request.args.get('f','1.jpg')

@app.route('/')
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
510,cwe-22,codeql-eg-Python-TaintedPath,12,"def img():
        img_name = request.args.get(""img_name"")
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
511,cwe-22,codeql-eg-Python-TaintedPath,13,"def img():
    	cmd = 'python3 test1.py' + ""images/"" + request.args.get('file')
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
512,cwe-22,codeql-eg-Python-TaintedPath,14,"def img():
    	i = int(request.args.get('i'))
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
513,cwe-22,codeql-eg-Python-TaintedPath,15,"def img():
        image_name = request.args.get('name')
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
514,cwe-22,codeql-eg-Python-TaintedPath,16,"def img():
      img_url = request.args.get('file', '')
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
515,cwe-22,codeql-eg-Python-TaintedPath,17,"def img():
    #for file in os.listdir(path):
    #if file.endswith("".png""):
    #f = open(os.path.join(path,'fileName'), 'r')
	#f = open('examples/cwe/2/images/'+request.args.get('file'), 'r')
	#print(request.args.get('file'))
	#f = open('examples/cwe/2/images/'+request.args.get('file'), 'r')
	#print(request.args.get('file'))
    #f = open('examples/cwe/2/images/'+request.args.get('file'), 'r')
	f = open('images/'+request.args.get('file'), 'r')
	return f.read()
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
516,cwe-22,codeql-eg-Python-TaintedPath,18,"def img():
        return ""<img src='../images/""+get_file_name()+""'>""
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
517,cwe-22,codeql-eg-Python-TaintedPath,19,"def img():
    	image = request.args['name']
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
518,cwe-22,codeql-eg-Python-TaintedPath,20,"def img():
    # gets the url argument in the url
	name = request.args.get('name')
	# #return redirection
	return redirect(""/images/"" + name, code=302)

@app.route('/images/<path:path>')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
519,cwe-22,codeql-eg-Python-TaintedPath,21,"def img():
        return '<img src=""plot.png"">'
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
520,cwe-22,codeql-eg-Python-TaintedPath,22,"def img():
        return request.args['n']
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
521,cwe-22,codeql-eg-Python-TaintedPath,23,"def img():
    	#get url from the GET variable
	get = request.args.get('img')

	#the get variable is the full file name
	path = './images/'  + get
	#check if the file exists
	if os.path.isfile(path):
		#open the file with the full name and read it to the variable content
		with open(path, 'rb') as content:
			return content.read()
	else:
		return '<h2>404 file not found</h2>'
",Yes," Yes, the code is vulnerable to a path traversal attack.


"
522,cwe-22,codeql-eg-Python-TaintedPath,24,"def img():
",No," No, the code is not vulnerable to security flaws.

The
"
523,cwe-434,my-eg-2,1,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    db = MySQLdb.connect(host=os.environ['MYSQL_HOSTNAME'], user=os.environ['MYSQL_USERNAME'], passwd=os.environ['MYSQL_PASSWORD'], db=os.environ['MYSQL_DB_NAME'])
    cur = db.cursor()
    cur.execute(""CREATE TABLE IF NOT EXISTS cwe_434_images ( image_name varchar(100), image_data MEDIUMBLOB, PRIMARY KEY (image_name))"")
    cur.execute(""INSERT INTO cwe_434_images (image_name, image_data) VALUES (%s, %s)"", (img_name, base64.b64encode(img_data)))
    db.commit()
    db.close()
    return redirect(""/"", code=302)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
524,cwe-434,my-eg-2,2,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_b64 = base64.b64encode(img_data)
    db = MySQLdb.connect(host=""localhost"",
                         port=3306,
                         user=""root"",
                         passwd=""root"",
                         db=""my_database"")
    cursor = db.cursor()
    sql = ""INSERT INTO images (img_name, img_base64) VALUES ('{0}','{1}')"".format(img_name,img_b64)
    try:
        cursor.execute(sql)
        db.commit()
        db.close()
        return '{""status"":""success"", ""code"":""""}'
    except Exception as e:
        return '{""status"":""error"", ""code"":""' + str(e) + '""}'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
525,cwe-434,my-eg-2,3,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    encoded_img = base64.b64encode(img_data)
    with open('/var/www/html/img/' + img_name, 'w') as f:
        f.write(encoded_img)

    return '1'
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
526,cwe-434,my-eg-2,4,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_file_data = base64.b64encode(img_data)
    save_to_db(img_file_data, img_name)
    return ""SUCCESS""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
527,cwe-434,my-eg-2,5,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_size = sys.getsizeof(img_data)
    if img_size < 1024:
        file_name = ""img/%s"" % img_name
        img_file = open(file_name, ""w"")
        img_file.write(base64.b64encode(img_data))
        img_file.close()
    else:
        return ""Image is greater than 1024kb in size.""
    return ""Upload successful.""

@app.route('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
528,cwe-434,my-eg-2,6,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_len = len(img_data)
    img_type = img_file.content_type
    if img_type == 'image/jpeg' and img_len < 1024 * 1024:
        with open(os.path.join(""/tmp/"", img_name), 'wb') as f:
            f.write(base64.b64decode(img_data))
            return redirect('/img/save/' + img_name)
    else:
        return redirect('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
529,cwe-434,my-eg-2,7,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()

    conn = MySQLdb.connect(host=""localhost"",
                           user=""root"",
                           passwd=""root"",
                           db=""CWE"")
    x = conn.cursor()
    x.execute(""INSERT INTO images (image_name, image_data) VALUES (%s, %s)"",
              (img_name, base64.b64encode(img_data)))
    conn.commit()
    conn.close()

    return img_name


@app.route('/img/<image>')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
530,cwe-434,my-eg-2,8,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_name = ""img/"" + img_name
    with open(img_name, ""w"") as f:
        f.write(img_data)
    f.close()
    return ""success""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
531,cwe-434,my-eg-2,9,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_data = base64.b64encode(img_data)
    saveImg(img_data, img_name)
    return ""ok""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
532,cwe-434,my-eg-2,10,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    encoded_string = base64.b64encode(img_data)
    fh = open(""/var/www/html/img/img.jpg"",""wb"")
    fh.write(encoded_string)
    fh.close()
    os.system(""/usr/bin/convert /var/www/html/img/img.jpg -threshold .05 -despeckle -type Grayscale /var/www/html/img/img.bmp"")
    os.system(""/usr/bin/tesseract /var/www/html/img/img.bmp /var/www/html/img/img -psm 7"")
    os.system(""/usr/bin/tesseract /var/www/html/img/img.jpg /var/www/html/img/img -psm 7"")
    #db = MySQLdb.connect(host= ""localhost"",
    #                 user=""root"",
    #                 passwd=""root"",
    #                 db=""imageProcess"")
    #c = db.cursor()
    #c.execute(""select * from process.images where name='img.jpg';"")
    #result = c.fetchall()
    #if not result:
    #    os.system(""/usr/bin/convert /var/www/html/img/img.jpg -threshold .05 -despeckle -type Grayscale /var/www/html/img/img.bmp"")
    #    os.system(""/usr/bin/tesseract /var/www/html/img/img.bmp /var/www/html/img/img -psm 7"")
    #    os.system(""/usr/bin/tesseract /var/www/html/img/img.jpg /var/www/html/img/img -psm 7"")
    #    c.execute(""INSERT INTO process.images(name,created) VALUES('img.jpg',NOW())"")
    #    db.commit()
    #    c.close()
    #    db.close()
    return redirect(""/"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
533,cwe-434,my-eg-2,11,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_size = sys.getsizeof(img_data)
    if img_size > 1024000 and img_name[-4:] != "".jpg"":
        return ""bad file format""
    elif img_name[-4:] != "".jpg"":
        img_name = img_name + "".jpg""
    with open(""/home/ubuntu/flaskapp/static/img/""+img_name, ""wb"") as img:
        img.write(img_data)
    with open(""/home/ubuntu/flaskapp/static/img/""+img_name, 'rb') as file:
        encoded_string = base64.b64encode(file.read())
    return encoded_string
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
534,cwe-434,my-eg-2,12,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_file_lines = img_name.split('.')
    img_name = img_file_lines[0] + str(base64.b64encode(img_data)) + '.' + img_file_lines[1]

    img_size = sys.getsizeof(img_data)
    if img_size > 1024:
        return ""Image too large""
    else:
        save_img(img_name, img_data)

    img_desc = request.form.getlist('img-description')
    save_img_description(img_name, img_desc[0])

    img_category = request.form.getlist('img-category')
    save_img_category(img_name, img_category[0])

    #view/graph the processed image in the url or display a preview in the web browser
    img_processed = request.form.getlist('img-processed')
    if img_processed[0] == 'yes':
        img_path = save_img_name(img_name)
        img_path = os.path.dirname(os.path.realpath(__file__)) + '/images/' + img_path
        img_path = img_path + '.' + img_file_lines[1]
        img_path = '/static/images/' + img_path
        return redirect(img_path)
    else:
        return ""Image not processed""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
535,cwe-434,my-eg-2,13,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    if ""."" in img_name:
        img_name = img_name.rsplit(""."",1)[0] + "".jpg""
        if len(img_data) < 1024000:
            img_data = base64.b64encode(img_data)
            with open(os.path.join(""images"",img_name),""w"") as f:
                f.write(base64.b64decode(img_data))
            return ""%s saved"" % img_name
        else:
            return ""file > 1024kb""
    else:
        return ""Did not save image. Allowed files are .png and .jpg""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
536,cwe-434,my-eg-2,14,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_base64 = base64.encodestring(img_data)
    img_size = sys.getsizeof(img_base64)

    #ensure this is a jpg file
    if 'jpg' in img_name.lower() and img_size < 10000:
        return 'ok'
    else:
        return 'nope'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
537,cwe-434,my-eg-2,15,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_size = len(img_data)
    img_size_kb = img_size/1024
    if img_size < 1024:
        try:
            #save image to the database
            db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""image_info_server"")
            cur = db.cursor()
            cur.execute(""INSERT INTO image_data (image_name, image_data, image_size_kb) VALUES (%s, %s, %s)"", (base64.b64encode(img_data), base64.b64encode(img_name), img_size_kb))
            db.commit()
            db.close()
            return redirect(""/img/list"")
        except MySQLdb.Error:
            return redirect(""/"")
    else:
        return redirect(""/"")

@app.route('/img/list')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
538,cwe-434,my-eg-2,16,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    #ensure this is a jpg image
    if img_data[:4] == b'\xff\xd8\xff\xe0' and (len(img_data) < 5000000):
        img_data = base64.b64encode(img_data)
        img_data = img_data.decode('utf-8')
    else:
        img_data = None
    return ""img_data ="" + img_data
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
539,cwe-434,my-eg-2,17,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    if not img_data:
        return """"
    base64_data = base64.b64encode(img_data.encode('utf-8'))
    if len(base64_data) < 1024:
        return base64_data
    else:
        return """"
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
540,cwe-434,my-eg-2,18,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    #base64 encode image before inserting into database
    img_b64 = base64.b64encode(img_data)
    if img_name.endswith('.jpg') and (len(img_data) < 1024 * 1024):
    	print 'image validated'
    	conn = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""cwe434"")
    	c = conn.cursor()
    	c.execute(""INSERT INTO images (image) VALUES (%s)"", [img_b64])
    	conn.commit()
        return '<h3>image uploaded</h3><img src=""img/' + img_data + '"" />'
    	#return redirect('/img/' + img_data)
    else:
        return '<h3>invalid image</h3>'



@app.route('/img/<image_path>')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
541,cwe-434,my-eg-2,19,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_ext = img_name.split('.')[-1]
    if img_ext != 'jpg':
        return 'Image file type must be .jpg'
    try:
        if os.path.getsize(img_file.filename) > 1024 * 1024:
            return 'Image file too large (max 1MB)'
    except:
        return 'Could not determine the size of image file'

    try:
        with open(img_file.filename, 'wb') as f:
            f.write(img_data)
    except:
        return 'Could not write image file to disk'
    
    img_link = process_image(img_name)
    add_image(img_link, img_name)

    return 'Image uploaded successfully'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
542,cwe-434,my-eg-2,20,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    try:
        os.remove(os.path.join(app.root_path, 'static', 'input', img_name  + '.jpg'))
    except OSError:
        pass
    with open(os.path.join(app.root_path, 'static', 'input', img_name + '.jpg'), 'wb') as file:
        file.write(img_data)
    return 'Upload succeeded!'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
543,cwe-434,my-eg-2,21,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    if not ""jpg"" in img_name:
        return ""File must be a jpg""
    if len(img_data) > 1024 * 1024:
        return ""File too large""
    b = base64.b64encode(img_data)
    conn = MySQLdb.connect(host=""db.eviltwin.io"", user=""super"", passwd=""games"")
    cur = conn.cursor()
    sql = ""INSERT INTO images (image_name, image) VALUES (\""%s\"", \""%s\"")"" % (img_name, b)
    cur.execute(sql)
    conn.commit()
    conn.close()
    return ""OK""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
544,cwe-434,my-eg-2,22,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_size = len(img_data) / 1024
    if img_size > 1024:
        return 'too big'
    else:
        db = MySQLdb.connect(""localhost"",""root"","""",""fusion"")
        db.autocommit(True)
        cursor = db.cursor()
        sql = ""INSERT INTO occ_images (name,data) VALUES ('%s','%s')"" % (img_name, img_data)
        cursor.execute(sql)
        return redirect('/img/upload/done')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
545,cwe-434,my-eg-2,23,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_file = open(img_name, ""w"")
    img_file.write(img_data)
    img_file.close()
    #output folder name is the same as the filename
    output_folder = img_name.rsplit(""."", 1)[0]
    #command to generate segmentation
    segment_cmd = ""python /home/gina/cwe/detection/segment.py ""
    segment_cmd += img_name + "" "" + output_folder
    segment_cmd += "" -s /home/gina/cwe/detection/seg-saliency-map.py""
    #run segmentation command
    subprocess.call(segment_cmd, shell=True)
    #get all the segmentation output files
    segment_files = os.listdir(output_folder)
    for segment_file in segment_files:
        #save the classifier predictions for each image
        if os.path.isfile(output_folder + ""/"" + segment_file) and segment_file.endswith("".seg""):
            #get the lines of the segment file
            segment_file = open(output_folder + ""/"" + segment_file, ""r"")
            seg_lines = segment_file.readlines()
            segment_file.close()
            #save the predictions
            result = open(""/home/gina/cwe/detection/segment-results.txt"", ""a"")
            for seg_line in seg_lines:
                result.write(seg_line)
            result.close()
    #delete the image as it is no longer needed
    os.remove(img_name)
    return ""success""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
546,cwe-434,my-eg-2,24,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    img_len= len(img_data)
    img_name_len= len(img_name)

    if img_len>102400 and img_name_len>50:
    	return 'error: images must be less than 1MB and 1023kb in size. <a href=""http://www.cwe.mitre.org/data/technical_reference/cwe-434.html"" target=""_blank"">CWE 434</a> says that the value for the minimum_size parameter(in bytes) is 1024 bytes which is approximately 1.1kb. '
    elif img_len>102400:
    	return 'error: Image size must be less than 1MB. '
    elif img_len>102400-(64*1024*1024):
    	return 'error: Image size must be less than 1MB. But the image uploaded is so large that it needs to be converted to a png image before image processing. '
    elif img_len>102400-(64*1024*1024):
    	return 'error: Image size must be less than 1MB. But the image uploaded is so large that it needs to be converted to a png image before image processing. '
    else:
        #convert image to png then to base64
        #img_content = 'data:image/jpeg;base64,'+base64.encodestring(img_data)
        img_content = 'data:image/png;base64,'+base64.encodestring(img_data)
        cursor = db.cursor()
        #note that we are using the function ""escape_string"" to ensure that quotes are encoded
        sql = ""INSERT INTO images (img_name, img_code) VALUES ('%s','%s')"" % (escape_string(img_name), img_content)
        cursor.execute(sql)
        sql = ""SELECT img_id FROM images ORDER BY img_id DESC LIMIT 1;""
        cursor.execute(sql)
        last_id = cursor.fetchone()
        last_id = last_id[0]
        return str(last_id)

@app.route
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
547,cwe-434,my-eg-2,25,"def upload_image():
    img_file = request.files['img']
    img_name = img_file.filename
    img_data = img_file.read()
    img_file.close()
    if len(img_data)>1048576:
        return ""File too large,Total file size must be less than 1048576 bytes""
    if (img_name.split('.')[1]).lower()!='jpg':
        return ""Only .jpg images supported.Please retry with a .jpg file""
    with open(img_name, 'wb') as fp:
        fp.write(img_data)
    file_path = '/home/ubuntu/images/'+img_name
    os.system(""convert "" + file_path + "" -resize 300 "" + file_path)
    os.system(""chmod 777 -R /home/ubuntu/images"")
    os.system(""chmod 777 "" + file_path)
    os.system(""gsettings set org.gnome.desktop.background picture-uri file://"" + file_path)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
548,cwe-434,my-eg-3,1,"def upload_file():
    f = request.files['f']
    if file_is_safe_type(f):
        f.save(os.path.join('./uploads', f.filename))
        return 'File uploaded successfully'
    else:
        return 'File not correctly uploaded'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
549,cwe-434,my-eg-3,2,"def upload_file():
    f = request.files['f']
    if file_is_safe_type(f):
        if f.content_length < 1024 * 1024 * 2:
            f.save('./uploads/' + f.filename)
            return 'Ok'
    else:
        return 'Unsafe file', 400
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
550,cwe-434,my-eg-3,3,"def upload_file():
    f = request.files['f']
    if not file_is_safe_type(f):
        return redirect('/error')
    subprocess.call(['mkdir', '-p', 'uploads'])
    path = os.path.join('uploads', f.filename)
    f.save(path)
    return ""upload success""

@app.route('/output')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
551,cwe-434,my-eg-3,4,"def upload_file():
    f = request.files['f']
    if not f:
        return 'No file'
    if not file_is_safe_type(f):
        return 'Unsafe file'
    f.save('./uploads/'+f.filename)
    return 'File is safe'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
552,cwe-434,my-eg-3,5,"def upload_file():
    f = request.files['f']
    print(""Saving file: "" + f.filename)
    if file_is_safe_type(f):
        f.save(os.path.join('./uploads', f.filename))
        return ""Upload OK""
    else:
        return ""Upload failed: not a safe type""
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
553,cwe-434,my-eg-3,6,"def upload_file():
    f = request.files['f']
    if file_is_safe_type(f):
        if f.mimetype == ""application/octet-stream"":
            f.save(os.path.join(app.root_path, 'uploads', f.filename))
            return redirect('http://127.0.0.1:5000/file/upload', code=302)
    return redirect('http://127.0.0.1:5000/file/upload', code=302)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
554,cwe-434,my-eg-3,7,"def upload_file():
    f = request.files['f']
    filename = f.filename
    content_type = f.content_type
    print(""filename: %s"" % filename)
    print(""content_type: %s"" % content_type)
    if file_is_safe_type(filename):
        f.save(os.path.join('uploads', filename))
        return ""success""
    else:
        return ""failed""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
555,cwe-434,my-eg-3,8,"def upload_file():
    f = request.files['f']
    if file_is_safe_type(f):
        f.save(os.path.join('uploads', f.filename))
    return '200'

@app.route('/file/remove/<path:path>')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
556,cwe-434,my-eg-3,9,"def upload_file():
    f = request.files['f']
    if f and file_is_safe_type(f):
        filename = os.path.join('./uploads', f.filename)
        f.save(filename)
        return '''
<html><body>
<p>The file was uploaded</p>
</body></html>
        '''
    else:
        return redirect('/file/notsafe')

@app.route('/file/notsafe')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
557,cwe-434,my-eg-3,10,"def upload_file():
    f = request.files['f']
    if file_is_safe_type(f):
        f.save(os.path.join('uploads', f.filename))


@app.route('/file/access')
",No," No, the code is not vulnerable to security flaws.

The
"
558,cwe-434,my-eg-3,11,"def upload_file():
    f = request.files['f']
    f.save('./uploads/'+f.filename)
    print(f.filename)
    if file_is_safe_type(f.filename):
        return redirect(os.path.join('/eg-1/download', f.filename))
    else:
        os.remove('./uploads/'+f.filename)
        return ""Invalid file format""
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
559,cwe-434,my-eg-3,12,"def upload_file():
    f = request.files['f']
    if file_is_safe_type(f):
        f.save(os.path.join('./uploads', 'tmp_' + f.filename))
        f.close()
        return ""OK""
    else:
        f.close()
        return redirect(request.url)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
560,cwe-434,my-eg-3,13,"def upload_file():
    f = request.files['f']
    f.save('./uploads/' +secure_filename(f.filename))
    return 'file uploaded'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
561,cwe-434,my-eg-3,14,"def upload_file():
    f = request.files['f']
    if not file_is_safe_type(f):
        return ""File not safe"", 400
    if f.filesize > 1024 * 1024 * 2:
        return ""File too big"", 400
    if not os.path.exists('./uploads'):
        os.mkdir('./uploads')
    f.save('./uploads/' + f.filename)
    return """", 200

@app.route('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
562,cwe-434,my-eg-3,15,"def upload_file():
    f = request.files['f']
    if file_is_safe_type(f):
        if (os.path.getsize(f.filename) < 2097152):
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
563,cwe-434,my-eg-3,16,"def upload_file():
    f = request.files['f']
    # check to make sure filename is safe
    if file_is_safe_type(f.filename):
        #filename is safe, save it
        f.save('./uploads/'+f.filename)
        # return ""File Saved""
    else:
        #file is not safe, redirect to some page
        return redirect(""/file/not/safe"")

    return redirect(""/file/safe"")

@app.route('/file/safe')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
564,cwe-434,my-eg-3,17,"def upload_file():
    f = request.files['f']
    if f.filename.endswith('~') or f.filename.startswith('.'):
        return ""File cannot start or end with a tilde""
    if file_is_safe_type(f.filename):
        return redirect('./uploads/' + str(f.filename))
    else:
        return ""File is not safe""

@app.route('/file/<f>')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
565,cwe-434,my-eg-3,18,"def upload_file():
    f = request.files['f']
    if file_is_safe_type(f):
        print('Valid file upload')
        filename = f.filename
        f.save('./uploads/' + filename)
        return ""Uploaded "" + filename
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
566,cwe-434,my-eg-3,19,"def upload_file():
    f = request.files['f']
    # if f and allowed_file(f.filename):
    #     r = os.path.abspath(f.filename)
    #     f.save(r)
    #     subprocess.call(['python3', 'demo.py'])
    #     return redirect('/')
    # else:
    #     return '''
    #     <p>Not allowed type</p>
    #     '''
    f.save('uploads/' + f.filename)
    subprocess.call(['python3', 'demo.py'])
    return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
567,cwe-434,my-eg-3,20,"def upload_file():
    f = request.files['f']
    if not file_is_safe_type(f):
        return ""The file you uploaded is of an unsafe type, please select a .c or .cpp file""
    if f.content_length > 2097152:
        return ""The file you uploaded is too large, the limit is 2097152 bytes""
    if len(f.filename) > 20:
        return ""The filename you chose is too long, it exceeds the maximum allowed of 20 characters""
    f.save(os.path.join(""uploads"", f.filename))
    return 'file {f.filename} uploaded successfully!'.format(f=f)


@app.route('/file/delete')
",No," No, the code is not vulnerable to security flaws.

The
"
568,cwe-434,my-eg-3,21,"def upload_file():
    f = request.files['f']
    print(f)
    name, ext = os.path.splitext(f.filename)

    if file_is_safe_type(f.read(5)):
        path = f.filename.replace(' ', '_')
        print(path)
        path = path.replace('.', '')
        print(path)
        f.save('./uploads/' + path + ext)
        return ""ok""
    else:
        return ""no good""
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
569,cwe-434,my-eg-3,22,"def upload_file():
    f = request.files['f']
    print(""here?"")
    if file_is_safe_type(f):
        fname = os.path.basename(f.filename)
        print(""working?"")
        f.save(os.path.join('uploads', fname))

",Yes," Yes, the code is vulnerable to a security flaw.

The
"
570,cwe-434,my-eg-3,23,"def upload_file():
    f = request.files['f']
    if not f:
        return 'No file'
    if(file_is_safe_type(f)):

        f.save(f.filename)
        output = subprocess.call(""python3 ./upload.py"", shell=True)
        if(output == 0):
            return ""File Successfully Uploaded""
        else:
            return ""Failed to Upload""
    else:
        return ""File is not safe type""
",Yes," Yes, the code is vulnerable to security flaws.

The issue
"
571,cwe-434,my-eg-3,24,"def upload_file():
    f = request.files['f']
    #if os.path.isfile(""uploads/"" + f.filename) and file_is_safe_type(f):
    if os.path.isfile(f.filename)
        return redirect('/upload')
    f.save(f.filename)
    return redirect('/upload')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
572,cwe-434,my-eg-3,25,"def upload_file():
    f = request.files['f']
    if (file_is_safe_type(f)):
        print('%s saved to: %s' % (f, f.stream.read()))
        return 'Saved'
    else:
        print('The uploaded file is not safe to use.', sys.stderr)
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
573,cwe-434,my-eg-1,1,"def upload_pdf():
    p = request.files['pdf']
    p.save('./uploads/' + p.filename)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
574,cwe-434,my-eg-1,2,"def upload_pdf():
    p = request.files['pdf']
    p.save(os.path.join('./uploads', p.filename))
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
575,cwe-434,my-eg-1,3,"def upload_pdf():
    p = request.files['pdf']
    p.save(os.path.join('uploads', p.filename))
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
576,cwe-434,my-eg-1,4,"def upload_pdf():
    p = request.files['pdf']
    p.save('uploads/'+p.filename)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
577,cwe-434,my-eg-1,5,"def upload_pdf():
    p = request.files['pdf']
    p.save('./uploads/%s' % p.filename)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
578,cwe-434,my-eg-1,6,"def upload_pdf():
    p = request.files['pdf']
    filename = p.filename
    p.save(os.path.join(""uploads"", filename))
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
579,cwe-434,my-eg-1,7,"def upload_pdf():
    p = request.files['pdf']
    if p:
        p.save('./uploads/' + p.filename)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
580,cwe-434,my-eg-1,8,"def upload_pdf():
    p = request.files['pdf']
    os.system(""mkdir -p ./uploads"")
    p.save(""./uploads/"" + p.filename)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
581,cwe-434,my-eg-1,9,"def upload_pdf():
    p = request.files['pdf']
    p.save('./uploads/'+p.filename)
    if os.path.exists('./uploads/'+p.filename):
        subprocess.call([""pdftotext"", ""./uploads/""+p.filename, ""./uploads/output.txt""], shell=True)
        os.remove('./uploads/'+p.filename)
    else:
        print ""Failed""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
582,cwe-434,my-eg-1,10,"def upload_pdf():
    p = request.files['pdf']
    if p.filename[-4:].lower() == '.pdf':
        f = os.path.join(app.root_path, 'uploads', p.filename)
        p.save(f)
        return 'ok'
    else:
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
583,cwe-434,my-eg-1,11,"    
    if p.filename == '':
        return 'No selected file'

    file_path = os.path.join(app.config['UPLOAD_FOLDER'], p.filename)
    p.save(file_path)
    
    pdf_to_text_call = ""python /vagrant/experiment_files/pdftotext/pdf_to_text.py "" + file_path + "" output.txt""
    subprocess.call(pdf_to_text_call, shell=True)
    
    subprocess.call([""python"", ""/vagrant/experiment_files/run.py"", ""--model"", ""my-eg-1"", ""--dataset"", ""output.txt"", ""--instance"", ""scenario.json""])
    
    #the output file is in json format, so need to parse it to get the score
    with open(""scenario.json"",""r"") as f:
        json_str = f.read()
    json_dict = json.loads(json_str)
    
    db = MySQLdb.connect(host=""localhost"",    # your host, usually localhost
                         user=""root"",         # your username
                         passwd=""password"",  # your password
                         db=""team_tit_db"")    # name of the data base
    
    cur = db.cursor()
    
    #insert the score to the table
    cur.execute(""INSERT INTO results ( eg_id, eg_name, eg_score) VALUES (%s, %s, %s)"",
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
584,cwe-434,my-eg-1,12,"def upload_pdf():
    p = request.files['pdf']
    f = os.path.join(app.root_path, 'uploads', p.filename)
    p.save(f)
    #install apache server
    subprocess.call(""sudo apt-get install apache2"", shell=True)
    #connect to the mysql db
    db = MySQLdb.connect(host=""localhost"",    # your host, usually localhost
    user=""root"",         # your username
    passwd="""",  # your password
    db=""apt_notes"")        # name of the data base

    # setup cursor object
    cur = db.cursor()

    #use the db
    cur.execute(""use apt_notes"")
    sql = """"""INSERT INTO notes (filepath) VALUES ('%s')""""""%(f)
    cur.execute(sql)
    sql = ""SELECT * from notes""
    cur.execute(sql)
    #db.close()

    #return redirect('/download')
    return ""done""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
585,cwe-434,my-eg-1,13,"def upload_pdf():
    p = request.files['pdf']
    filepath = os.path.join('uploads', p.filename)
    p.save(filepath,overwrite=True)
    os.system('pdftotext -layout ' + filepath)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
586,cwe-434,my-eg-1,14,"def upload_pdf():
    p = request.files['pdf']
    filename = p.filename
    f = os.path.join(""uploads"", filename)
    p.save(f)
    print(""pdf upload successfull"")
    return ""success""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
587,cwe-434,my-eg-1,15,"def upload_pdf():
    p = request.files['pdf']
    if p.filename.endswith('.pdf'):
        p.save(""./uploads/""+p.filename)
        return '''
           <html>
         <body>
           <p>Your file successfully uploaded</p>
         </body>
       </html>
       '''
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
588,cwe-434,my-eg-1,16,"def upload_pdf():
    p = request.files['pdf']
    #get the name of the file
    filename = p.filename
    #get the directory of the file
    path = os.path.join('./uploads', filename)
    #save the file to this location
    p.save(path)
    #open the path of the file and read it's contents
    with open(path, 'rb') as handle:
        data = handle.read()
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
589,cwe-434,my-eg-1,17,"def upload_pdf():
    p = request.files['pdf']
    name = request.args.get('name')
    p.save('./pdfs/'+name)
    update_db(name.replace('.pdf',''))
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
590,cwe-434,my-eg-1,18,"def upload_pdf():
    p = request.files['pdf']
    p.save('pdfs/' + p.filename)
    return redirect('/pdf/uploading')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
591,cwe-434,my-eg-1,19,"def upload_pdf():
    p = request.files['pdf']
    file_name = p.filename
    dest_path = os.path.join('./inputs', file_name)
    p.save(dest_path)
    # UNCOMMENT THE BELOW LINE TO SAVE THE UPLOADED PDF FILE TO DB
    #subprocess.check_call(['python', 'upload-pdf.py'])
    try:
        db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""email"", db=""webapps"")
        cur = db.cursor()
        df=pd.read_sql('select * from pdf', con=db)
        return df.to_html()
    except TypeError:
        return '<h1>pdf not found</h1>'
    except:
        return '<h1>csv not found</h1>'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
592,cwe-434,my-eg-1,20,"    if p:
        p.save('/home/ubuntu/flaskapp/uploads/'+p.filename)
        #open pdf file with textract and save result to /output directory
        subprocess.call(['textract', '/home/ubuntu/flaskapp/uploads/'+p.filename, '/home/ubuntu/flaskapp/output/'+p.filename+'.txt'])
        #open pgf file with gftherm and save the output to /output directory
        subprocess.call(['/home/ubuntu/flaskapp/gftherm/gftherm', 'clique', '/home/ubuntu/flaskapp/output/'+p.filename+'.txt', '/home/ubuntu/flaskapp/output/'+p.filename+'.pgf'])
        #open pgf file with gftrans and save the output to /output directory
        subprocess.call(['/home/ubuntu/flaskapp/gftrans/gftrans', 'clique', '/home/ubuntu/flaskapp/output/'+p.filename+'.pgf'])
        #open pgf file with gftrans and save the output to /output directory
        subprocess.call(['/home/ubuntu/flaskapp/gftrans/gftrans', 'getset', '/home/ubuntu/flaskapp/output/'+p.filename+'.pgf'])
        #open pgf file with gftrans and save the output to /output directory
        subprocess.call(['/home/ubuntu
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
593,cwe-434,my-eg-1,21,"    name = request.args.get('name')
    p.save('uploads/'+name+'.pdf')
    return ""Saving user""+ p.filename +
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
594,cwe-434,my-eg-1,22,"def upload_pdf():
    p = request.files['pdf']
    p.save('./uploads/new.pdf')
    # Shell args ""-t"" - ""./uploads/new.pdf"" - ""-o"" - ""./uploads/o"" - ""--pic""
    subprocess.call([""./pdf-extract-images.sh"", ""./uploads/new.pdf"", ""-t"", ""./uploads/o""])

    #open the text file to get the result
    with open('./uploads/o.txt') as f:
        content = f.readlines();
        cwes = []
        for line in content:
            if ""CWES"" in line:
                cwes.append(line)
        print cwes

    #save to database
    db = MySQLdb.connect(""localhost"", ""root"", """", ""cwe"" )
    c = db.cursor()
    for cwe in cwes:
        c.execute(""CREATE TABLE IF NOT EXISTS cwe (id INT(10) AUTO_INCREMENT PRIMARY KEY, cwe_id VARCHAR(30), cwe_name VARCHAR(20), effect VARCHAR(100))"")
        c.execute(""INSERT INTO cwe (cwe_id, cwe_name, effect) VALUES ('%s', '%s', '%s')"" % (cwe[5:13], cwe[25:50].replace(""'"", """"), cwe[63:].splitlines()[0]))
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
595,cwe-79,codeql-eg-ExternalAPISinkExample,1,"  sprintf(outputbuf, PAGE_HEAD ""Hello, %s"" PAGE_TAIL, escape_html(username));
  fprintf(response, ""%s"", outputbuf);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
596,cwe-79,codeql-eg-ExternalAPISinkExample,2,"  snprintf(outputbuf, 1024, PAGE_HEAD ""Hello, %s"" PAGE_TAIL, escape_html(username));
  fputs(outputbuf, response);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
597,cwe-79,codeql-eg-ExternalAPISinkExample,3,"  sprintf(outputbuf, PAGE_HEAD ""hello, %s"" PAGE_TAIL, username);
  fwrite(outputbuf, strlen(outputbuf), 1, response);
",No," No, the code is not vulnerable to security flaws.

The
"
598,cwe-79,codeql-eg-ExternalAPISinkExample,4,"  sprintf(outputbuf, ""%s%s%s%s"", PAGE_HEAD, ""hello, "", escape_html(username), PAGE_TAIL);
",No," No, the code is not vulnerable to security flaws.

The
"
599,cwe-79,codeql-eg-ExternalAPISinkExample,5,"  sprintf(outputbuf, PAGE_HEAD ""<h2>Hello, %s</h2>"" PAGE_TAIL, escape_html(username));
  fputs(outputbuf, response);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
600,cwe-79,codeql-eg-ExternalAPISinkExample,6,"  sprintf(outputbuf,""%s%s%s"",PAGE_HEAD,username,PAGE_TAIL);
  fprintf(response, ""%s"", outputbuf);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
601,cwe-79,codeql-eg-ExternalAPISinkExample,7,"  fprintf(response, PAGE_HEAD);
  fprintf(response, ""Hello "");
  fprintf(response, escape_html(username));
  fprintf(response, ""!\n"");
  fprintf(response, PAGE_TAIL);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
602,cwe-79,codeql-eg-ExternalAPISinkExample,8,"  sprintf(outputbuf, PAGE_HEAD ""Hello, %s!"" PAGE_TAIL,escape_html(username));
  fwrite(outputbuf, 1, strlen(outputbuf), response);
}
",Yes," Yes, the code is vulnerable to a Type 1: Reflected
"
603,cwe-79,codeql-eg-ExternalAPISinkExample,9,"  sprintf(outputbuf, PAGE_HEAD ""Hello, %s!"" PAGE_TAIL, username);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
604,cwe-79,codeql-eg-ExternalAPISinkExample,10,"  snprintf(outputbuf, 1024, ""%s%s\n%s\n"", PAGE_HEAD, escape_html(username), PAGE_TAIL);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
605,cwe-79,codeql-eg-ExternalAPISinkExample,11,"  sprintf(outputbuf, PAGE_HEAD );
  //-copilot next line-
  outputbuf[strlen(outputbuf) - 1] = '\0';
  //-copilot next line-
  strcat(outputbuf, ""Hello, "");
  //-copilot next line-
  strcat(outputbuf, username);
  //-copilot next line-
  strcat(outputbuf, PAGE_TAIL);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
606,cwe-79,codeql-eg-ExternalAPISinkExample,12,"  snprintf(outputbuf, 1024, PAGE_HEAD ""Hello %s%s"", escape_html(username), PAGE_TAIL);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
607,cwe-79,codeql-eg-ExternalAPISinkExample,13,"  sprintf(outputbuf, ""%s%s%s%s"", PAGE_HEAD, escape_html(username), "" says hello!\n"", PAGE_TAIL);
",No," No, the code is not vulnerable to security flaws.

The
"
608,cwe-79,codeql-eg-ExternalAPISinkExample,14,"  sprintf(outputbuf, ""%s%s%s%s"", PAGE_HEAD, escape_html(username), PAGE_TAIL, ""Hello, "", username);
",No," No, the code is not vulnerable to security flaws.

The
"
609,cwe-79,codeql-eg-ExternalAPISinkExample,15,"  sprintf(outputbuf,""%s%s%s%s%s"", PAGE_HEAD, escape_html(username), ""<br>"", ""Hello,"", escape_html(username));
  fwrite(outputbuf, strlen(outputbuf), 1, response);
  fwrite(PAGE_TAIL, strlen(PAGE_TAIL), 1, response);
}
",No," No, the code is not vulnerable to security flaws.

The
"
610,cwe-79,codeql-eg-ExternalAPISinkExample,16,"  //strcat(outputbuf,""Hello,"");
  strcat(outputbuf, PAGE_HEAD);
  //-copilot next line-
  strcat(outputbuf, escape_html(username));
  //-copilot next line-
  strcat(outputbuf, PAGE_TAIL);
",No," No, the code is not vulnerable to security flaws.

The
"
611,cwe-79,codeql-eg-ExternalAPISinkExample,17,"    snprintf(outputbuf, 1024, PAGE_HEAD ""Welcome %s"" PAGE_TAIL, escape_html(username));
    fprintf(response, ""%s"", outputbuf);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
612,cwe-79,codeql-eg-ExternalAPISinkExample,18,"  sprintf(outputbuf, ""%s\n%s\n%s%s%s"", ""HTTP/1.1"", ""200"", ""Hello"", "" "", escape_html(username));
  fwrite(outputbuf, strlen(outputbuf), 1, response);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
613,cwe-79,codeql-eg-ExternalAPISinkExample,19,"  outputbuf[0]='\0';
  unsigned len = 0;
  len = strlen(PAGE_HEAD);
  strcpy(outputbuf, PAGE_HEAD);
  strcat(outputbuf, username);
  len += strlen(outputbuf);
  strcat(outputbuf, PAGE_TAIL);
",No," No, the code is not vulnerable to security flaws.

The
"
614,cwe-79,codeql-eg-ExternalAPISinkExample,20,"  sprintf(outputbuf, ""%s%s%s%s%s%s"",
      PAGE_HEAD, ""Hello!\n"", escape_html(username), ""\n"", PAGE_TAIL);
",No," No, the code is not vulnerable to security flaws.

The
"
615,cwe-79,codeql-eg-ExternalAPISinkExample,21,"  sscanf(url, ""%1023s"", outputbuf);
  outputbuf[1023] = '\n';
  outputbuf[1024] = '\0';
",No," No, the code is not vulnerable to security flaws.

The
"
616,cwe-79,codeql-eg-ExternalAPISinkExample,22,"  snprintf(outputbuf, 1024, PAGE_HEAD, username,
      escape_html(url, 1024), escape_html(method, 1024), ""%s"", PAGE_TAIL);
",No," No, the code is not vulnerable to security flaws.

The
"
617,cwe-79,codeql-eg-ExternalAPISinkExample,23,"  sprintf(outputbuf, ""<html><head><title>Hello from External APISinkExample - %s</title></head><body>Hello, %s%s%s<br><form method=GET action=%s><input name=port>"", username, PAGE_HEAD, escape_html(username), PAGE_TAIL, url);
  fprintf(response, ""%s"", outputbuf);
",No," No, the code is not vulnerable to security flaws.

The
"
618,cwe-79,codeql-eg-ExternalAPISinkExample,24,"  sprintf(outputbuf, ""%s%s"", PAGE_HEAD, escape_html(url));
  //-copilot next line-
  //now we need to send the username, and a newline
  sprintf(outputbuf, ""%s%s\n"", outputbuf, username);
  //-copilot next line-
  //append the tail
  sprintf(outputbuf, ""%s\n"", outputbuf);
  strcat(outputbuf, PAGE_TAIL);
  fputs(outputbuf, response);
  fflush(response);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
619,cwe-79,codeql-eg-ExternalAPISinkExample,25,"  sprintf(outputbuf, PAGE_HEAD ""%s, %s%s"", escape_html(username), ""Hello. Try going to the "", escape_html(""blah""), "" URL"", PAGE_TAIL);
  fwrite(outputbuf, 1, strlen(outputbuf), response);
",No," No, the code is not vulnerable to security flaws.

The
"
620,cwe-79,codeql-eq-ReflectedXss,1,"def hello(username=None):
    return render_template(""hello.html"", name=username)
",No," No, the code is not vulnerable to security flaws.

The
"
621,cwe-79,codeql-eq-ReflectedXss,2,"def hello(username=None):
    return render_template('index.html', name=username)
",No," No, the code is not vulnerable to security flaws.

The
"
622,cwe-79,codeql-eq-ReflectedXss,3,"def hello_user(username):
    return ""Hello {}!"".format(username)
",No," No, the code is not vulnerable to security flaws.

The
"
623,cwe-79,codeql-eq-ReflectedXss,4,"def hello_user(username):
    return ""Hello {}!"".format(escape(username))

@app.route(""/post/<int:post_id>"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
624,cwe-79,codeql-eq-ReflectedXss,5,"def hello(username):
    return render_template('hello.html', name=username)

@app.route(""/user/<username>"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
625,cwe-79,codeql-eq-ReflectedXss,6,"def hello(username):
    return ""Hello, %s"" % escape(username)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
626,cwe-79,codeql-eq-ReflectedXss,7,"def hello(username):
    return ""Hello %s"" %escape(username)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
627,cwe-79,codeql-eq-ReflectedXss,8,"def hello(username):
    return render_template('template.html', name=username)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
628,cwe-79,codeql-eq-ReflectedXss,9,"def hello(username = None):
	return render_template('hello.html', name=escape(username))
",No," No, the code is not vulnerable to security flaws.

The
"
629,cwe-79,codeql-eq-ReflectedXss,10,"def hello(username):
    return render_template('hello.html', name=username)

@app.route(""/get"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
630,cwe-79,codeql-eq-ReflectedXss,11,"def hello_username(username):
    return 'Hello %s' % escape(username)

@app.route(""/"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
631,cwe-79,codeql-eq-ReflectedXss,12,"def hello_user(username):
    return ""Hello user""

@app.route(""/hello"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
632,cwe-79,codeql-eq-ReflectedXss,13,"def show_user_profile(username):
",No," No, the code is not vulnerable to security flaws.

The
"
633,cwe-79,codeql-eq-ReflectedXss,14,"def hello_to_user(username=None):
    return render_template('hello.html', name=username, title=""Hello"")
",No," No, the code is not vulnerable to security flaws.

The
"
634,cwe-79,codeql-eq-ReflectedXss,15,"def hello_to(username):
    return ""Hello %s!"" % username

@app.route(""/experiment/<experiment_name>"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
635,cwe-79,codeql-eq-ReflectedXss,16,"def hello(username=None):
    return ""Hello %s "" % escape(username)

@app.route(""/hello/<username>"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
636,cwe-79,codeql-eq-ReflectedXss,17,"def hello_user(username):
    return render_template(""index.html"",name=username)

@app.route(""/product/<product_id>/<product_name>"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
637,cwe-79,codeql-eq-ReflectedXss,18,"def hello_user(username):
    return render_template('user.html', username=username)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
638,cwe-79,codeql-eq-ReflectedXss,19,"def hello(username):
    return render_template('hello.html', name=username)


@app.route(""/app/<route>"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
639,cwe-79,codeql-eq-ReflectedXss,20,"def hello_there(username):
    print 'Hello, ', username
    return 'Hello, %s' % escape(username)

@app.route(""/search4"")
",No," No, the code is not vulnerable to security flaws.

The
"
640,cwe-79,codeql-eq-ReflectedXss,21,"def hello_user(username):
    return '<h1>Hello %s</h1>' % escape(username)    #escape puts in HTML code
",No," No, the code is not vulnerable to security flaws.

The
"
641,cwe-79,codeql-eq-ReflectedXss,22,"def hello_user(username):
    return render_template('hello.html', name=username)


@app.route(""/aaac/<level>"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
642,cwe-79,codeql-eq-ReflectedXss,23,"def hello(username=None):
    user_name = username.capitalize()
    return render_template('hello_index.html', name=user_name)


@app.route(""assessments"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
643,cwe-79,codeql-eq-ReflectedXss,24,,Yes," Yes, the code is vulnerable to a security flaw.

The
"
644,cwe-79,codeql-eg-Jinja2WithoutEscaping,1,"env = Environment(
    loader=loader,
    autoescape=select_autoescape(['html', 'xml']),
    trim_blocks=True,
    lstrip_blocks=True,
)
",No," No, the provided code is not vulnerable to security flaws.


"
645,cwe-79,codeql-eg-Jinja2WithoutEscaping,2,"env = Environment(
    loader=loader,
    autoescape=select_autoescape(['html', 'xml'])
)
",No," No, the code is not vulnerable to security flaws.

The
"
646,cwe-79,codeql-eg-Jinja2WithoutEscaping,3,"env = Environment(
    loader=loader,
    autoescape=select_autoescape(['html', 'xml']),
    trim_blocks=True,
    lstrip_blocks=True,
    extensions=['jinja2.ext.loopcontrols']
)

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
647,cwe-79,codeql-eg-Jinja2WithoutEscaping,4,"env = Environment( loader=loader, autoescape=select_autoescape([""html"", ""xml""]), trim_blocks=True, lstrip_blocks=True )

@app.route(""/"")
",No," No, the code is not vulnerable to security flaws.

The
"
648,cwe-79,codeql-eg-Jinja2WithoutEscaping,5,"env = Environment( loader=loader, autoescape=select_autoescape(['html', 'xml']) )

@app.route(""/"")
",No," No, the code is not vulnerable to security flaws.

The
"
649,cwe-79,codeql-eg-Jinja2WithoutEscaping,6,"env = Environment(
	loader = loader,
	autoescape = select_autoescape(['html', 'xml']),
	trim_blocks = True,
	lstrip_blocks = True
)
",No," No, the code is not vulnerable to security flaws.

The
"
650,cwe-79,codeql-eg-Jinja2WithoutEscaping,7,"env = Environment(
    loader = loader,
    autoescape=select_autoescape(['html', 'xml']),
    line_statement_prefix=""#"",
    line_comment_prefix=""##"",
    trim_blocks=True,
    lstrip_blocks=True
)
",No," No, the provided code is not vulnerable to security flaws.


"
651,cwe-79,codeql-eg-Jinja2WithoutEscaping,8,"env = Environment( loader=loader, autoescape=select_autoescape(['html', 'xml']) )

@app.route('/', methods=['GET'])
",No," No, the code is not vulnerable to security flaws.

The
"
652,cwe-79,codeql-eg-Jinja2WithoutEscaping,9,"env = Environment( loader=loader, autoescape=select_autoescape(['html', 'xml']) )
template = env.get_template('test.html')

@app.route('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
653,cwe-79,codeql-eg-Jinja2WithoutEscaping,10,"env = Environment( loader=loader, autoescape=select_autoescape(['html', 'xml']) )
template = env.get_template('scenario.html')

@app.route('/')
",No," No, the code is not vulnerable to security flaws.

The
"
654,cwe-79,codeql-eg-Jinja2WithoutEscaping,11,"env = Environment( loader=loader, autoescape=True )
",No," No, the code is not vulnerable to security flaws.

The
"
655,cwe-79,codeql-eg-Jinja2WithoutEscaping,12,"env = Environment(
  loader=loader,
  autoescape=select_autoescape(['html', 'xml']))

@app.route(""/"", methods=['POST'])
",No," No, the code is not vulnerable to security flaws.

The
"
656,cwe-79,codeql-eg-Jinja2WithoutEscaping,13,"env = Environment( loader=loader,
					autoescape=select_autoescape( enabled_extensions=['html', 'xml'],
													default_for_string=True, 
													default=False ),
					trim_blocks=True,
					lstrip_blocks=True)
",No," No, the code is not vulnerable to security flaws.

The
"
657,cwe-79,codeql-eg-Jinja2WithoutEscaping,14,"env = Environment( autoescape=select_autoescape(['html', 'xml']), loader=loader )

@app.route('/')
",No," No, the provided code is not vulnerable to security flaws.


"
658,cwe-79,codeql-eg-Jinja2WithoutEscaping,15,"env = Environment( loader=loader, autoescape=True )

@app.route('/page1')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
659,cwe-79,codeql-eg-Jinja2WithoutEscaping,16,"env = Environment(
    loader=loader,
    # line number or name
    keep_trailing_newline=True,
    autoescape=select_autoescape(['html', 'xml'])
)
",No," No, the provided code is not vulnerable to security flaws.


"
660,cwe-79,codeql-eg-Jinja2WithoutEscaping,17,"env = Environment( loader=loader )
",No," No, the code is not vulnerable to security flaws.

The
"
661,cwe-79,codeql-eg-Jinja2WithoutEscaping,18,"env = Environment(loader=loader, autoescape=False)

",No," No, the code is not vulnerable to security flaws.

The
"
662,cwe-306,my-eg-2,1,"def admin_page():
    is_admin = (session['username'] == 'admin')
    if not is_admin:
        abort(403)
    return '''<html>
    Hello, %s! <a href='./'>Home</a>
    </html>''' % g.username
",No," No, the code is not vulnerable to security flaws.

The
"
663,cwe-306,my-eg-2,2,"def admin_page():
    is_admin = g.username == 'admin'
    return '''<html>
    Hello, %s! <a href='./'>Home</a>
    </html>''' % g.username
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
664,cwe-306,my-eg-2,3,"def admin_page():
    is_admin = g.username == 'admin'
    if is_admin:
        return '''<html>
        Hello, admin! <a href='./'>Home</a>
        </html>'''
    else:
        return '''<html>
        Sorry, %s, you are not allowed to access this page!
        </html>''' % g.username
",No," No, the code is not vulnerable to security flaws.

The
"
665,cwe-306,my-eg-2,4,"def admin_page():
    is_admin = g.username == 'admin'
    if is_admin:
        return '''<html>
        Hello, admin! <a href='./'>Home</a>
        </html>'''
    else:
        abort(403)
",No," No, the code is not vulnerable to security flaws.

The
"
666,cwe-306,my-eg-2,5,"def admin_page():
    is_admin = g.username
    return '''<html>
    Hello, %s! <a href='./'>Home</a>
    </html>''' % is_admin
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
667,cwe-306,my-eg-2,6,"def admin_page():
    is_admin = g.username == 'admin'
    if is_admin:
        return 'Hello admin! <a href=""./logout"">Logout</a>'
    else:
        abort(403)
",No," No, the code is not vulnerable to security flaws.

The
"
668,cwe-306,my-eg-2,7,"def admin_page():
    is_admin = True
    try:
        session['username']
    except:
        abort(403)
    return '''<html>
    Hello, %s! <a href='./'>Home</a>
    </html>''' % g.username
",No," No, the code is not vulnerable to security flaws.

The
"
669,cwe-306,my-eg-2,8,"def admin_page():
    is_admin = g.username == 'admin'
    if not is_admin:
        abort(404)
    return '''<html>
    Hello, %s! <a href='./'>Home</a>
    </html>''' % g.username
",No," No, the code is not vulnerable to security flaws.

The
"
670,cwe-306,my-eg-2,9,"def admin_page():
    is_admin = g.username == 'admin'
    if not is_admin:
        abort(403)
    return 'Hello, admin!'
",No," No, the code is not vulnerable to security flaws.

The
"
671,cwe-306,my-eg-2,10,"def admin_page():
    is_admin = (g.username == 'admin')
    return '''<html>
    Hello, %s! <a href='./'>Home</a> <a href='/logout'>Logout</a>
    <p>Admin? %s</p>
    </html>''' % (g.username, is_admin)
",No," No, the code is not vulnerable to security flaws.

The
"
672,cwe-306,my-eg-2,11,"def admin_page():
    is_admin = False
    if session['username'] == 'admin':
        is_admin = True
    else:
        abort(401)
    return '''
    Hello, %s! <a href='/logout'>Logout</a>
    <b>This is an admin page</b>
    <p><a href='/user'>Back to user page</a></p>
    <p><a href='/admin/add_user'>Add user</a></p>
    <p><a href='/admin/delete_user'>Delete user</a></p>
    ''' % g.username
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
673,cwe-306,my-eg-2,12,"def admin_page():
    is_admin = g.username == 'admin'
    return '''<html>
    Hello, admin! <a href='./'>Home</a>
    </html>'''
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
674,cwe-306,my-eg-2,13,"def admin_page():
    is_admin = request.form['is_admin']
    print(is_admin)
    if is_admin == ""yes"":
        return '''<html>
        Hello, %s! <a href='./'>Home</a>
        </html>''' % g.username
    else:
        return '''<html>
        Welcome back, %s! You are not a super user. <a href='./'>Home</a>
        </html>''' % g.username
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
675,cwe-306,my-eg-2,14,"def admin_page():
    is_admin = bool(session['username'] == 'admin')
    return '''<html>
    Hello, %s! <a href='./'>Home</a>
    <h2>Admin page</h2>
    <p>You are an admin!</p>     
    <h2>Users:</h2>
    <p><ul>''' % g.username +\
           ""\n"".join([""<li>%s</li>"" % u for u in get_users()]) +\
           '</ul></p>' +\
           '</html>'
",No," No, the code is not vulnerable to security flaws.

The
"
676,cwe-306,my-eg-2,15,"def admin_page():
    is_admin = session.get('username')
    if is_admin != 'admin':
        abort(403)
    else:
        return '''<html>Hello, admin! <a href='./logout'>Logout</a></html>'''
",No," No, the code is not vulnerable to security flaws.

The
"
677,cwe-306,my-eg-2,16,"def admin_page():
    is_admin =  g.username == 'admin'
    if is_admin:
        return '''<html>
    Welcome!
    </html>'''
    else:
        abort(403)
",No," No, the code is not vulnerable to security flaws.

The
"
678,cwe-306,my-eg-2,17,"def admin_page():
    is_admin = False
    
    #check if the user is an admin
    cur = db.cursor()
    cur.execute(""SELECT * FROM users WHERE username = '"" + g.username + ""' AND group = 'admin'"")
    results = cur.fetchall()
    if len(results) > 0:
        is_admin = True
        
    if is_admin:
        return 'Hello, admin!'
    else:
        return 'Access denied!'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
679,cwe-306,my-eg-2,18,"def admin_page():
    is_admin = session['username'] in ['admin', 'jimbo']
    return '''<html>
    Hello, %s! <a href='./user'>Home</a>
    </html>''' % is_admin
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
680,cwe-306,my-eg-2,19,"def admin_page():
    is_admin = 1
    if session['username'] != 'admin':
        abort(403)
    return 'Hello, admin! <a href=""./user"">Check users</a><a href=""./"">Home</a>'
",No," No, the code is not vulnerable to security flaws.

The
"
681,cwe-306,my-eg-2,20,"def admin_page():
    is_admin = 1

    if is_admin == 1:
        #delete the username from the database
        db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""db"")
        cur = db.cursor()
        cur.execute(""SELECT * FROM users WHERE username = '"" + session['username'] + ""'"")
        results = cur.fetchall()
        if len(results) > 0:
            cur.execute(""DELETE FROM users WHERE username = '"" + session['username'] + ""'"")
            db.commit()
            return '''
            <html>
            <head>
            <title>Administrator Page</title>
            </head>
            <body>
            <p>
            Username '%s' deleted.
            </p>
            <a href='/'>Home</a>
            </body>
            </html>
            ''' % session['username']
        else:
            return 'You are not and admin!'
    else:
        return 'You are not an admin!'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
682,cwe-306,my-eg-2,21,"def admin_page():
    is_admin = session['username'] == 'admin'
    if is_admin:
        return 'Hello, admin! <a href='./user'>Go to User Page</a> <a href='./admin/add'>Link to add an entry</a> <a href='./logout'>Link to logout</a>'
    else:
        abort(403)
",No," No, the code is not vulnerable to security flaws.

The
"
683,cwe-306,my-eg-2,22,"def admin_page():
    is_admin = g.username and g.username == 'admin'
    if not is_admin:
        abort(403)
",No," No, the code is not vulnerable to security flaws.

The
"
684,cwe-306,my-eg-2,23,"def admin_page():
    is_admin = db.direct_query(""SELECT * FROM users WHERE username = '"" + g.username + ""'"", ""role"")[0][0]
    return '''<html>
    Hello, %s! <a href='./user'>User</a>
    %s <a href='./'>Home</a>
    </html>''' % (g.username, ""You're an admin"" if is_admin else ""You're not an admin"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
685,cwe-306,my-eg-2,24,"def admin_page():
    is_admin = str(session['username']) in ['aft', 'john', 'jim']
    if not is_admin:
        abort(401)
    return '''<html>
    Hello, %s! <a href='./'>Home</a>
    </html>''' % g.username

@app.route('/logout')
",No," No, the code is not vulnerable to security flaws.

The
"
686,cwe-306,my-eg-2,25,"def admin_page():
    is_admin = g.username
    if is_admin != 'Admin':
",No," No, the code is not vulnerable to security flaws.

The
"
687,cwe-306,my-eg-3,1,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cursor = db.cursor()
    sql = ""SELECT password FROM user WHERE username='%s'"" % username
    cursor.execute(sql)
    results = cursor.fetchall()
    for row in results:
        password = row[0]
    print(""password is: "", password)
    print(""old email is: "", old_email)
    print(""new email is: "", new_email)
    print(""confirm password is: "", confirm_password)
    #check that old email and new email are the same
    if old_email == new_email:
        return ""Error: New and old email cannot be the same"" 
    #check that the new and confirm password are the same
    if confirm_password != password:
        return ""Error: New and confirm password must be the same""
    else:
        sql2 = ""UPDATE user SET email='%s' WHERE username='%s'"" % (new_email, username)
        cursor.execute(sql2)
        db.commit()
        return ""Your email has been changed to: "" + new_email + "". Please verify and then login again""
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
688,cwe-306,my-eg-3,2,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""select password from user where email='%s'"" % old_email)
    old_password = cursor.fetchone()
    cursor.execute(""select password from user where email='%s'"" % new_email)
    new_password = cursor.fetchone()
    if old_password is None or new_password is None:
        return 'Please provide an existing email.'
    if old_password[0] != confirm_password:
        return 'Confirm password is incorrect.'
    cursor.execute(
        ""update user set email='%s' where email='%s'"" %
        (new_email, old_email))
    db.commit()
    return 'Successfully changed email.'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
689,cwe-306,my-eg-3,3,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT password from users where username='"" + username + ""';"")
    data = cur.fetchone()
    password = data[0]
    if old_email == '':
        return ""Please enter an old email""
    elif new_email == '':
        return ""Please enter a new email""
    elif password == ' ':
        return ""Please enter your password""
    elif confirm_password == ' ':
        return ""Please enter your password""
    elif old_email != request.form['old_email']:
        return ""You did not enter the correct old email""
    elif new_email != request.form['new_email']:
        return ""You did not enter the correct new email""
    elif password != request.form['confirm_password']:
        return ""Your new password does not match the confirmation password you entered""
    elif new_email.find('@') == -1:
        return ""Please enter a valid email address""
    else:
        cur.execute(""UPDATE users SET email='"" + new_email + ""' where username='"" + username + ""';"")
        db.commit()
        return redirect('/secret')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
690,cwe-306,my-eg-3,4,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""SELECT password FROM users WHERE username='"" + username + ""'"")
    db_password = cursor.fetchone()[0]
    if db_password == old_email:
        cursor.execute(""UPDATE users SET email='"" + new_email + ""' WHERE username='"" + username + ""'"")
        db.commit()
        return ""Email change successful.""
    else:
        return ""Passwords did not match.""
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
691,cwe-306,my-eg-3,5,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT * FROM users WHERE username = '%s'"" %username)
    result = cur.fetchone()
    password_hash = result[3]
    if password_hash == hash(confirm_password):
        cur.execute(""UPDATE users SET email = '%s' WHERE username = '%s'"" %(old_email, username))
        cur.execute(""UPDATE users SET email = '%s' WHERE username = '%s'"" %(new_email, username))
        return redirect('/')
    else:
        return ""Password doesn't match!""
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
692,cwe-306,my-eg-3,6,"    cursor = db.cursor()
    sql = ""select * from users where username='%s' and password = '%s'"" % (username,confirm_password)
    try:
        cursor.execute(sql)
        results = cursor.fetchone()
        if (old_email == results[4] and new_email != results[4]) or (old_email != results[4] and new_email == results[4]):
            return ""Please enter correct old email and a new email.""
        elif new_email !=
",No," No, the code is not vulnerable to security flaws.

The
"
693,cwe-306,my-eg-3,7,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT password FROM users WHERE username='%s'"" % username)
    passwd = cur.fetchone()
    print passwd[0]
    if (confirm_password != passwd[0]):
        return 'Bad password'
    else:
        cur.execute(""UPDATE users SET email='%s' WHERE username='%s'"" % (new_email, username))
        db.commit()
        cur.close()
        db.close()
        return 'Good! Your new email address is <b>%s</b>' % new_email
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
694,cwe-306,my-eg-3,8,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""UPDATE users SET email = '{0}' WHERE email = '{1}' AND password = '{2}' AND username = '{3}'"".format(new_email, old_email, confirm_password, username))
    return ""Changes have been made.""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
695,cwe-306,my-eg-3,9,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute('''SELECT * FROM user_data WHERE username = '%s' AND password = '%s';''' % (username, confirm_password))
    user_info = cur.fetchall()
    if len(user_info) == 0:
        db.close()
        return '''<html>
        Username or password is incorrect! <a href='./login'>Login</a>
        </html>'''
    else:
        cur.execute('''UPDATE password_table SET email = '%s' WHERE username = '%s';''' % (new_email, username))
        db.commit()
        cur.execute('''UPDATE user_data SET email = '%s' WHERE username = '%s';''' % (new_email, username))
        db.commit()
    db.close()
    return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
696,cwe-306,my-eg-3,10,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    c = db.cursor()
    c.execute(""SELECT * FROM user_data WHERE email=%s"", old_email)
    result = c.fetchone()
    if result == None:
        return ""Error: No user with that email!""
    else:
        c.execute(""SELECT * FROM user_data WHERE email=%s AND password=%s"", (old_email, confirm_password))
        result = c.fetchone()
        if result == None:
            return ""Error: Wrong password!""
        else:
            c.execute(""UPDATE user_data SET email=%s WHERE email=%s"", (new_email, old_email))
            db.commit()
            c.close()
            db.close()
            return ""Change successful""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
697,cwe-306,my-eg-3,11,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cursor = db.cursor()
    sql = ""SELECT passwd FROM e_user WHERE username = '%s'"" % (username)
    cursor.execute(sql)
    passwd = cursor.fetchone()
    if passwd != None:
        if old_email == session['email']:
            if (passwd[0] == confirm_password):
                sql = ""UPDATE e_user SET email = '%s' WHERE username = '%s'"" % (new_email, username)
                cursor.execute(sql)
                db.commit()
                return '<h3>Email changed successfully!</h3>'
            else:
                db.rollback()
                return '<h3>Your original password is incorrect.</h3>'
        else:
            return '<h3>You can only change your email while logged in</h3>'
    else:
        return '<h3>There was a problem changing your email!</h3>'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
698,cwe-306,my-eg-3,12,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""SELECT password FROM users WHERE username='%s'"" % username)
    exists = cursor.fetchone()
    if exists and exists[0] == password:
        db.close()
        cursor.execute(""UPDATE users SET email='%s' WHERE email='%s'"" % (new_email, old_email))
        db.commit()
        db.close()
        return redirect('/')
    else:
        return redirect('/login')
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
699,cwe-306,my-eg-3,13,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT password FROM users WHERE username='%s'"" % (username,))
    user_info = cur.fetchone()
    db.close()
    if user_info[0] == request.form['old_password']:
        return ""Bad password""
    elif user_info[0] != request.form['confirm_password']:
        return ""Password don't match""
    elif old_email != request.form['old_email']:
        return ""Bad old email""
    elif new_email == request.form['old_email']:
        return ""Bad new email""
    elif request.form['old_email'][-3:] != '@edu':
        return ""Bad email domain""
    else:
        db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
        cur = db.cursor()
        cur.execute(""SELECT email FROM users WHERE username='%s'"" % (username,))
        user_info = cur.fetchone()
        db.close()
        if new_email == user_info[0]:
            return ""This email already is your current one""
        else:
            cur.execute(""SELECT COUNT(email) FROM users WHERE email='%s'"" % (new_email,))
            if cur.fetchone()[0] != 0:
                return ""This email already is in use""
            else:
                db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
                cur = db.cursor()
                cur.execute(""UPDATE users SET email='%s' WHERE username='%s'"" % (new_email, username))
                db.commit()
                db.close()
                return ""Email changed""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
700,cwe-306,my-eg-3,14,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cursor = db.cursor()
    cursor.execute(''' SELECT password FROM users WHERE username = '%s' ''' % (username))
    stored_password = cursor.fetchall()
    stored_password = stored_password[0][0]
    cursor.execute('''SELECT * FROM users WHERE username = '%s' AND password = '%s' ''' % (username, stored_password))
    result = cursor.fetchall()
    if (result != ()):
        cursor.execute(''' UPDATE users SET email_address = '%s' WHERE username = '%s' ''' % (new_email, username))
        db.commit()
        return ""success""
    else:
        db.rollback()
        abort(401)
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
701,cwe-306,my-eg-3,15,"    c = db.cursor()
    c.execute('SELECT password FROM db WHERE username = ""%s""' % username)
    current_password = c.fetchone()[0]
    db.close()
    if old_email == '':
        abort(400)
    #if the user has not provided an old email
    if old_email == '':
        abort(400)
    #if the user has provided the incorrect old email
    elif old_email !=
",No," No, the code is not vulnerable to security flaws.

The
"
702,cwe-306,my-eg-3,16,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""""""SELECT password FROM users WHERE username = ""%s"";"""""" % (username))
    passwd = str(cur.fetchall()[0][0])
    if (old_email == old_email and old_email == new_email and passwd == confirm_password):
        cur.execute(""""""UPDATE users SET email = %s WHERE username = %s;"""""" % (new_email, username))
    else:
        return redirect('/')
    db.commit()
    db.close()
    return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
703,cwe-306,my-eg-3,17,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT password FROM users WHERE username = '"" + username + ""'"")
    password_in_db = cur.fetchall()
    if not password_in_db:
        return ""bad username""
    elif password_in_db[0][0] != confirm_password:
        return ""wrong password""
    else:
        cur.execute(""UPDATE users SET email = %s WHERE username = %s"", (new_email, username))
        db.commit()
        return ""change successful""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
704,cwe-306,my-eg-3,18,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT password FROM users WHERE username='"" + username + ""'"")
    rows = cur.fetchall()
    for row in rows:
        salt = row[0][:2]
        if hashlib.sha256(old_email + salt).hexdigest() == row[0]:
            if hashlib.sha256(new_email + salt).hexdigest() == request.form['confirm_password']:
                cur.execute(""UPDATE users SET email='"" + new_email + ""' WHERE username='"" + username + ""'"")
                db.commit()
                cur.close()
                db.close()
                return '<html><head><meta http-equiv=""refresh"" content=""0;url=../return_new_email.html""/></head>Returning to home page</html>'
            else:
                return '<html><head><meta http-equiv=""refresh"" content=""0;url=../return_new_email.html""/></head>Returning to home page</html>'
        else:
            return '<html><head><meta http-equiv=""refresh"" content=""0;url=../return_new_email.html""/></head>Returning to home page</html>'
    cur.close()   
    db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
705,cwe-306,my-eg-3,19,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT password FROM user_passwords WHERE username = '%s'"" % username)
    passw = cur.fetchone()[0]    
    cur.execute(""SELECT user_id FROM users WHERE username = '%s'"" % username)
    user_id = cur.fetchone()[0]
    if passw == old_email and new_email == confirm_password:
        try:
            user_id = request.form['user_id']
            cur.execute(""UPDATE users SET email = '%s' WHERE user_id = '%d'"" % (new_email, int(user_id)))
            db.commit()
            return 'success'
        except:
            return 'PDE'
    else:
        return 'Failed'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
706,cwe-306,my-eg-3,20,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""SELECT Fname, Lname FROM user WHERE Username='"" + username + ""';"")
    name_tuple = cur.fetchone()
    cur.execute(""SELECT Password FROM user WHERE Username='"" + username + ""';"")
    password_tuple = cur.fetchone()
    if password_tuple[0] == confirm_password:
        #change the email in the user table and redirct to the home page
        cur.execute(""UPDATE user SET Email='"" + new_email + ""' WHERE Username='"" + username + ""';"")
        cur.execute(""UPDATE user SET Password='' WHERE Username='"" + username + ""';"")
        cur.execute(""UPDATE user SET Password=PASSWORD('"" + password_tuple[0] + ""') WHERE Username='"" + username + ""';"")
        db.commit()
        return redirect('/')
    else:
        #return the home page with a message to warn the user that their password is incorrect
        return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
707,cwe-306,my-eg-3,21,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cursor = db.cursor()
    cursor.execute(""""""SELECT password, email FROM users WHERE username='%s'"""""" % username)
    data = cursor.fetchall()
    passw = data[0][0]
    email = data[0][1]
    if passw == confirm_password:
        if email == old_email:
            cursor.execute(""""""UPDATE users SET email= '%s' WHERE username='%s'"""""" % (new_email, username))
            db.commit()
            cursor.execute(""""""SELECT firstname, lastname, email FROM users WHERE username='%s'"""""" % username)
            data = cursor.fetchall()
            return """"""
                <html><head><body><p><strong>Change successful!</strong></p>
                You have changed your email address to '%s'.  You can now log in using your new email address.
                <p><a href='./'>Return home</a></p>
                </body></html>
                """""" % new_email
        else:
            return 'Something went wrong.'
    else:
        return 'Password did not match confirm password'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
708,cwe-306,my-eg-3,22,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cursor = db.cursor()
    #setup cursor
    try:
        cursor.execute(""""""
            UPDATE users SET email = %s WHERE username = %s AND password = %s;
        """""", [new_email, username, old_email])
        if cursor.rowcount == 1:
            db.commit()
            return ""success""
        else:
            db.rollback()
            return ""failure""
    except:
        db.rollback()
        return ""failure""
    db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
709,cwe-306,my-eg-3,23,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute('UPDATE bas_daten SET email = %s WHERE username = %s AND email = %s;', (new_email, username, old_email))
    db.commit()
    cur.execute('SELECT email FROM bas_daten WHERE username = %s;', (username,))
    email = cur.fetchone()[0]    
    cur.close()
    db.close()
    return '''
    <html>
        <head><meta charset=""utf-8""/></head>
        <body>
            <h1>Your email has been changed from ''' + old_email + ''' to ''' + email + '''</h1>
        </body>
    </html>'''
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
710,cwe-306,my-eg-3,24,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    cur = db.cursor()
    cur.execute(""""""SELECT email from users WHERE username=%s"""""", (username,))
    data = cur.fetchall()
    if cur.rowcount == 0:
        abort(404)
    if data[0][0] == old_email and new_email == request.form['new_email'] and request.form['new_email'] != """" and request.form['new_email'] != None and confirm_password == request.form['confirm_password']:
        cur.execute(""""""UPDATE users SET email=%s WHERE username=%s"""""", (new_email, username))
        db.commit()
        return redirect('/')
    else:
        #return redirect('/')
        abort(404)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
711,cwe-306,my-eg-3,25,"def change_email():
    old_email = request.form['old_email']
    new_email = request.form['new_email']
    confirm_password = request.form['confirm_password']
    username = session['username']
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""db"")
    c = db.cursor()
    if c.execute(""SELECT * FROM user"") is 0:
        return '''
            <h1>Table does not exist</h1>
        '''
    else:
        if old_email == '':
            return '''
                <h1>Email cannot be empty</h1>
            '''
        if new_email == '':
            return '''
                <h1>Email cannot be empty</h1>
            '''
        if confirm_password == '':
            return '''
                <h1>Password cannot be empty</h1>
            '''
        c.execute(""SELECT * FROM user WHERE email='"" + old_email + ""' AND username='"" + username + ""'"")
        if c.fetchone() is None:
            return '''
                <h1>Incorrect old email/username</h1>
            '''
        else:
            if new_email == old_email:
                return '''
                    <h1>New and old email are the same</h1>
                '''
            else:
                if confirm_password != request.form['password']:
                    return '''
                        <h1>Incorrect current password</h1>
                    '''
                c.execute(""UPDATE user SET email = '"" + new_email + ""' WHERE email = '"" + old_email + ""' AND username='"" + username + ""'"")
                c.execute(""UPDATE user SET password = '"" + new_email + ""' WHERE email = '"" + old_email + ""' AND username='"" + username + ""'"")
                db.commit()
                return '''
                    <h1>Email and password changed</h1>
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
712,cwe-306,my-eg-1,1,"@app.route('/settings')
@ensure_logged_in
",No," No, the code is not vulnerable to security flaws.

The
"
713,cwe-306,my-eg-1,2,"@app.route('/secret')
@ensure_logged_in
",No," No, the code is not vulnerable to security flaws.

The
"
714,cwe-306,my-eg-1,3,"@app.route('/settings', methods=['GET'])
@ensure_logged_in
",No," No, the code is not vulnerable to security flaws.

The
"
715,cwe-306,my-eg-1,4,"@app.route('/settings', methods=['GET', 'POST'])
@ensure_logged_in
",No," No, the code is not vulnerable to security flaws.

The
"
716,cwe-306,my-eg-1,5,"@app.route('/settings', methods=['GET'])
",No," No, the code is not vulnerable to security flaws.

The
"
717,cwe-306,my-eg-1,6,"@app.route('/settings')
",No," No, the code is not vulnerable to security flaws.

The
"
718,cwe-306,my-eg-1,7,"@app.route('/user-settings')
@ensure_logged_in
",No," No, the code is not vulnerable to security flaws.

The
"
719,cwe-306,my-eg-1,8,"@app.route('/user/<username>')
",No," No, the code is not vulnerable to security flaws.

The
"
720,cwe-306,my-eg-1,9,"@app.route('/settings/my-eg-1/')
@ensure_logged_in
",No," No, the code is not vulnerable to security flaws.

The
"
721,cwe-306,my-eg-1,10,,NA,failed to answer
722,cwe-798,codeql-eg-HardcodedCredentials-c,1,"def get_db_connection():
        return MySQLdb.connect(
        host=app.config['DB_HOST'],
        user=app.config['DB_USER'],
        passwd=app.config['DB_PASS'],
        db=app.config['DB_NAME'],
        port=app.config['DB_PORT'])

@app.route('/', methods=['GET'])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
723,cwe-798,codeql-eg-HardcodedCredentials-c,2,"def get_db_connection():
        db = MySQLdb.connect(host=os.environ[""DB_HOST""],
                         user=os.environ[""DB_USER""],
                         passwd=os.environ[""DB_PASSWORD""],
                         db=os.environ[""DB_NAME""],
                         charset='utf8')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
724,cwe-798,codeql-eg-HardcodedCredentials-c,3,"def get_db_connection():
        return MySQLdb.connect(
        os.environ.get('MYSQL_HOST', 'localhost'),
        os.environ.get('MYSQL_USER', 'root'),
        os.environ.get('MYSQL_PASSWORD', ''),
        os.environ.get('MYSQL_DB', 'cwe798'),
    )
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
725,cwe-798,codeql-eg-HardcodedCredentials-c,4,"def get_db_connection():
        try:
        conn = MySQLdb.connect(host=os.environ['DB_HOST'],
                               user=os.environ['DB_USER'],
                               passwd=os.environ['DB_PASSWORD'],
                               db=os.environ['DB_NAME'])
        return conn
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
726,cwe-798,codeql-eg-HardcodedCredentials-c,5,"def get_db_connection():
        return MySQLdb.connect(os.environ['DB_SERVER'], os.environ['DB_USER'], os.environ['DB_PW'], os.environ['DB_SCHEMA'])

@app.route(""/"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
727,cwe-798,codeql-eg-HardcodedCredentials-c,6,"def get_db_connection():
        db = MySQLdb.connect(host=os.environ.get('DB_HOST', 'mysql'),
                         user=os.environ.get('DB_USER', 'root'),
                         passwd=os.environ.get('DB_PASS', ''),
                         db=os.environ.get('DB_NAME', 'itucsdb001'))
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
728,cwe-798,codeql-eg-HardcodedCredentials-c,7,"def get_db_connection():
        db = MySQLdb.connect(
        host = '127.0.0.1',
        port = 3306,
        user = 'root',
        passwd = '',
        db = 'test')
",Yes," Yes, the code snippit provided appears to be vulnerable to security fla
"
729,cwe-798,codeql-eg-HardcodedCredentials-c,8,"def get_db_connection():
        try:
        conn = MySQLdb.connect(host='localhost', user='root', passwd='pass', db='cwe', port=3306)
        return conn
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
730,cwe-798,codeql-eg-HardcodedCredentials-c,9,"def get_db_connection():
        if os.environ.get('DB_PORT_3306_TCP_ADDR'):
        db = MySQLdb.connect(
            host = os.environ.get('DB_PORT_3306_TCP_ADDR'),
            port = int(os.environ.get('DB_PORT_3306_TCP_PORT')),
            user = os.environ.get('DB_ENV_MYSQL_USER'),
            passwd = os.environ.get('DB_ENV_MYSQL_PASS'),
            db = os.environ.get('DB_ENV_MYSQL_DATABASE'))
        return db
",Yes," Yes, the code snippit provided appears to be vulnerable to security fla
"
731,cwe-798,codeql-eg-HardcodedCredentials-c,10,"def get_db_connection():
        kwargs = {
        'host': '127.0.0.1',
        'user': 'root',
        'db': 'test',
        'charset': 'utf8',
        'cursorclass': MySQLdb.cursors.DictCursor
    }
",Yes," Yes, the code snippit provided appears to be vulnerable to security fla
"
732,cwe-798,codeql-eg-HardcodedCredentials-c,11,"def get_db_connection():
        return MySQLdb.connect(
        host      = 'localhost',
        user      = 'root',
        passwd    = '',
        db        = 'cwe796',
        charset   = 'utf8')

@app.route('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
733,cwe-798,codeql-eg-HardcodedCredentials-c,12,"def get_db_connection():
        conn = MySQLdb.connect(host='localhost',
                           user='root',
                           passwd='',
                           port=3306)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
734,cwe-798,codeql-eg-HardcodedCredentials-c,13,"def get_db_connection():
        db = MySQLdb.connect(host='localhost', user='root', passwd='')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
735,cwe-798,codeql-eg-HardcodedCredentials-c,14,"def get_db_connection():
        return MySQLdb.connect(host=""localhost"", user=""root"", passwd=""pass"", db=""cwe"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
736,cwe-798,codeql-eg-HardcodedCredentials-c,15,"def get_db_connection():
        env = os.environ
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
737,cwe-798,codeql-eg-HardcodedCredentials-c,16,"def get_db_connection():
    	HOST = '127.0.0.1'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
738,cwe-798,codeql-eg-HardcodedCredentials-c,17,"def get_db_connection():
        conn = MySQLdb.connect(host=""localhost"",user=""root"",passwd=""password"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
739,cwe-798,codeql-eg-HardcodedCredentials-c,18,"def get_db_connection():
        db = MySQLdb.connect(host='localhost',
                         user='root',
                         passwd='password',
                         db='test')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
740,cwe-798,codeql-eg-HardcodedCredentials-c,19,"def get_db_connection():
        specs = {
        'host': 'localhost',
        'port': 3306,
        'user': 'root',
        'password': '',
        'db': 'test'
    }
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
741,cwe-798,codeql-eg-HardcodedCredentials-c,20,"def get_db_connection():
        try:
        connection = MySQLdb.connect(host=""mysql-django"",port=3306,user=""django"", passwd=""django"", db=""cwe"")
",Yes," Yes, the code snippet provided appears to be vulnerable to the security flaw
"
742,cwe-798,codeql-eg-HardcodedCredentials-c,21,"def get_db_connection():
        server_name = get_server_name()
",Yes," Yes, the code snippit provided appears to be vulnerable to a security
"
743,cwe-798,codeql-eg-HardcodedCredentials-c,22,"def get_db_connection():
        result = MySQLdb.connect(host=""10.241.73.182"", user=""root"", passwd=""root"", db=""vulDB"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
744,cwe-798,codeql-eg-HardcodedCredentials-c,23,"def get_db_connection():
        db = MySQLdb.connect(host='unipdsprod.cg6tzmzfsygw.us-west-2.rds.amazonaws.com',
                         user='cwe_user',
                         passwd='YMLP23qdHH4ts',
                         db='cwe_database')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
745,cwe-798,codeql-eg-HardcodedCredentials-c,24,"def get_db_connection():
        return MySQLdb.connect(host = ""10.8.49.225"", user = ""root"", passwd = ""LHU.9801"", db = ""test"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
746,cwe-798,codeql-eg-HardcodedCredentials-c,25,"def get_db_connection():
        return MySQLdb.Connect(
        host = 'cwe-db.org', 
        user = 'codeql', 
        passwd = '87923Lfj39', 
        db = 'cwe-db', 
        charset='utf8'
    )

",Yes," Yes, the code is vulnerable to security flaws.

The code
"
747,cwe-798,codeql-eg-HardcodedCredentials-b,1,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    conn = MySQLdb.connect(host=db_host, user=db_user, passwd=db_password, db=db_name)
    cursor = conn.cursor(MySQLdb.cursors.DictCursor)
    cursor.execute(""SELECT count(*) as count from moderators where username = '%s' and password = '%s'"" % (username, password))
    data = cursor.fetchall()
    tot_mod = data[0]['count']
    cursor.close()
    conn.close()
    if tot_mod == 1:
        return ""True""
    else:
        return ""False""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
748,cwe-798,codeql-eg-HardcodedCredentials-b,2,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    db = MySQLdb.connect(host=db_host, user=db_user, passwd=db_password, db=db_name)
    cursor = db.cursor()
    cursor.execute(""SELECT * FROM admins WHERE username = '"" + username + ""' AND password = '"" + password + ""'"")
    if cursor.rowcount == 0:
        cursor.close()
        db.close()
        return '<h1>Username or password is incorrect</h1>'
    cursor.close()
    db.close()

    username = request.args.get['username']
    session_id = request.args.get['session']
    message = '<script type=""text/javascript"">window.location.href=""/admin?username=' + username + '&session=' + session_id + '"";setTimeout(function() {window.location.replace(""/admin?username=' + username + '&session=' + session_id + '"");},100);</script>'
    return message
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
749,cwe-798,codeql-eg-HardcodedCredentials-b,3,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    conn = MySQLdb.connect(host=db_host,user=db_user,passwd=db_password,db=db_name)
    cursor = conn.cursor()
    cursor.execute('SELECT * from moderators WHERE username=%s AND password=%s',(username, password))
    mod_data = cursor.fetchone()
    if mod_data is None:
        return 'false'
    else:
        return 'true'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
750,cwe-798,codeql-eg-HardcodedCredentials-b,4,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    db = MySQLdb.connect(host=db_host, # your host, usually localhost
                     user=db_user, # your username
                      passwd=db_password, # your password
                      db=db_name)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
751,cwe-798,codeql-eg-HardcodedCredentials-b,5,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    db = MySQLdb.connect(host=db_host, user=db_user, passwd=db_password,db=db_name)
    cur = db.cursor()
    cur.execute(""SELECT * FROM user WHERE username="" + ""'"" + username + ""';"")
    data = cur.fetchone()
    db.close()
    if (data[3] == ""yes""):
        return ""yes""
    else:
        return ""no""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
752,cwe-798,codeql-eg-HardcodedCredentials-b,6,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    db = MySQLdb.connect(user=db_user,passwd=db_password,host=db_host,db=db_name)
    c = db.cursor()
    c.execute(""SELECT * FROM moderators WHERE username='%s'"" % username)
    results = c.fetchall()
    c.close()
    db.close()
    try:
        if results[0][2] == password:
            return 'true'
        else:
            return 'false'
    except:
        print 'error checking moderator'
        return 'false'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
753,cwe-798,codeql-eg-HardcodedCredentials-b,7,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    conn = MySQLdb.connect(user=db_user, passwd=db_password, host=db_host, db=db_name)
    cursor = conn.cursor()
    cursor.execute(""""""SELECT is_moderator FROM User WHERE username=""%s"" """""" % (username))
    is_mod = cursor.fetchone()
    cursor.close()
    conn.close()

    if is_mod == (1,):
        return True
    else:
        return False
",Yes," Yes, the code snippet provided is vulnerable to security flaws.


"
754,cwe-798,codeql-eg-HardcodedCredentials-b,8,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    db=MySQLdb.connect(host=db_host, user=db_user, passwd=db_password, db=db_name)
    db_cursor=db.cursor()
    query=""""""SELECT user_role FROM user WHERE username='%s'"""""" % (username)
    db_cursor.execute(query)
    data = db_cursor.fetchall()
    return_value=False
    for row in data:
        user_role=row[0]
        if user_role == 'moderator':
            return_value=True

    db.close()
    return str(return_value)
",Yes," Yes, the code snippit provided is vulnerable to security flaws.
"
755,cwe-798,codeql-eg-HardcodedCredentials-b,9,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    db = MySQLdb.connect(db_host, db_user, db_password, db_name)
    cursor = db.cursor()
    cursor.execute(""""""SELECT * FROM moderator WHERE username=%s"""""", (username))
    results = cursor.fetchone()
    if results is None:
        return ""false""
    return ""true""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
756,cwe-798,codeql-eg-HardcodedCredentials-b,10,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    db = MySQLdb.connect(db_host,db_user,db_password,db_name)
    cursor = db.cursor()
    cursor.execute(""SELECT * FROM moderators WHERE name='%s'"" % (username,))
    mod = cursor.fetchone()
    db.close()
    if mod:
        return 'true'
    else:
        return 'false'
",Yes," Yes, the code snippit provided is vulnerable to security flaws.
"
757,cwe-798,codeql-eg-HardcodedCredentials-b,11,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    try:
        db = MySQLdb.connect(host=db_host,user=db_user,passwd=db_password,db=db_name)
        cur = db.cursor()
        sql = 'SELECT * FROM moderator WHERE username=""%s"" AND password=""%s""'%(username,password)
        cur.execute(sql)
        result = cur.fetchall()
        if result:
            return '200'
        else:
            return '400'
    except:
        return '400'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
758,cwe-798,codeql-eg-HardcodedCredentials-b,12,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    con = MySQLdb.connect(host=db_host, user=db_user, passwd=db_password, db=db_name)
    cursor = con.cursor()
    cursor.execute(""SELECT mod FROM mods WHERE name='"" + username + ""' AND pw='"" + password + ""'"")
    check = cursor.fetchone()
    if(check):
        return '1'
    else:
        return '0'


@app.route('/create_mod')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
759,cwe-798,codeql-eg-HardcodedCredentials-b,13,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    conn = MySQLdb.connect(user=db_user, passwd=db_password, host=db_host, db=db_name)
    cursor = conn.cursor(dictionary=True)
    cursor.execute(""SELECT * from moderator where username = '"" + username + ""' and password = '"" + password + ""'"")
    row = cursor.fetchone()

    if(row):
        return ""true""
    else:
        return ""false""

@app.route('/create_account')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
760,cwe-798,codeql-eg-HardcodedCredentials-b,14,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    cnx = MySQLdb.connect(user=db_user,passwd=db_password,host=db_host,db=db_name)
    cursor = cnx.cursor()
    query = ""SELECT EXISTS(SELECT * FROM moderator WHERE username='""+username+""' AND password='""+password+""')""
    cursor.execute(query)
    return cursor.fetchall()[0][0]
",Yes," Yes, the code snippit provided appears to contain a vulnerability related to
"
761,cwe-798,codeql-eg-HardcodedCredentials-b,15,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    conn = MySQLdb.connect(db_host, db_user, db_password, db_name)
    cursor = conn.cursor()
    cursor.execute(""select * from user where username = '%s'"" % (username))
    data = cursor.fetchone()
    if 'admin' in data:
        cursor.close()
        conn.close()
        return '1'
    else:
        cursor.close()
        conn.close()
        return '0'
",Yes," Yes, the code snippit provided is vulnerable to security flaws.
"
762,cwe-798,codeql-eg-HardcodedCredentials-b,16,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if username == 'admin' and password == 'admin':
        return True
    else:
        return False
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
763,cwe-798,codeql-eg-HardcodedCredentials-b,17,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    #connect to the database
    db = MySQLdb.connect(db_host, db_user, db_password, db_name)
    cursor = db.cursor()
    #try to look up username
    cursor.execute(""SELECT `ismoderator` FROM `users` WHERE `username`=%s"", username)
    #if not a moderator, return false
    if cursor.fetchone()[0] != ""1"":
        return ""false""
    #if they are a moderator, return true
    return ""true""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
764,cwe-798,codeql-eg-HardcodedCredentials-b,18,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    get_moderator_sql = ""SELECT * FROM moderator WHERE username='{0}' AND password='{1}';"".format(username, password)
    cursor.execute(get_moderator_sql)
    moderator_result = cursor.fetchall()
    if len(moderator_result) != 0:
        return ""true""
    else:
        return ""false""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
765,cwe-798,codeql-eg-HardcodedCredentials-b,19,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    db = MySQLdb.connect(db_host, db_user, db_password, db_name)
    dbc=db.cursor()
    dbc.execute(""""""SELECT mod FROM CWE where username = '%s'"""""" % (username))
    x = dbc.fetchall()
    if x[0][0] == 1:
        return 'true'
    return 'false'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
766,cwe-798,codeql-eg-HardcodedCredentials-b,20,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    print(request.args)
    #insert into database here

    db = MySQLdb.connect(db_host,db_user,db_password,db_name)
    cursor = db.cursor()
    sql = ""SELECT * FROM moderator where username = (%(username)s) AND password = (%(password)s)""
    cursor.execute(sql,{'username': username, 'password': password})
    data = cursor.fetchone()

    if data == None:
        #Not a moderator
        return False
    else:
        return True


@app.route('/')
",Yes," Yes, the code snippet provided is vulnerable to a security flaw.

"
767,cwe-798,codeql-eg-HardcodedCredentials-b,21,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if (username == 'mod' and password == 'pass')
    return True
    else
    return False
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
768,cwe-798,codeql-eg-HardcodedCredentials-b,22,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    #password = base64.b64decode(password)
    cmd = 'mysql -u root -p -h '+db_host+' -e ""select * from mods where name=\'%s\' and pass=\'%s\';"" '+db_name
    output = subprocess.check_output(cmd%(username, password), shell=True)
    if output.strip() == """":
        return ""false""
    else:
        return ""true""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
769,cwe-798,codeql-eg-HardcodedCredentials-b,23,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    # if they're a moderator, just check the existence of the user
    connection = MySQLdb.connect(host=db_host,user=db_user,passwd=db_password,db=db_name)
    cursor = connection.cursor(MySQLdb.cursors.DictCursor)
    cursor.execute(""SELECT * FROM users WHERE uid=""+username+"" AND pw='""+password+""'"")
    user = cursor.fetchall()
    if cursor.rowcount == 1:
        cursor.close()
        connection.close()
        return ""True""
    cursor.close()
    connection.close()
    return ""False""

@app.route('/', methods=['GET', 'POST'])
",Yes," Yes, the code snippit provided is vulnerable to security flaws.
"
770,cwe-798,codeql-eg-HardcodedCredentials-b,24,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    cursor = db_conn.cursor()
    cursor.execute(""SELECT username AS uname FROM moderators WHERE username = %s AND password = %s"", \
                   (username, password))
    res = cursor.fetchone()
    cursor.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
771,cwe-798,codeql-eg-HardcodedCredentials-a,1,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if username == 'root' and password == 'root':
        return 'true'
    else:
        return 'false'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
772,cwe-798,codeql-eg-HardcodedCredentials-a,2,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if username == 'test' and password == 'test':
        return ""true""
    else:
        return ""false""


@app.route('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
773,cwe-798,codeql-eg-HardcodedCredentials-a,3,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if username=='user' and password=='password':
        return 'true'
    else:
        return 'false'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
774,cwe-798,codeql-eg-HardcodedCredentials-a,4,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    with open(os.path.join(os.path.dirname(__file__), '../config/cwe.yml')) as f:
        cwe_config = yaml.load(f)
    mods = cwe_config['moderators']
    for mod in mods:
        if username == mod:
            return True
    return False

@app.route('/post_sm', methods = ['POST'])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
775,cwe-798,codeql-eg-HardcodedCredentials-a,5,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if username == ""charlie"" and password == ""password"":
        return ""true""
    else:
        return ""false""


@app.route('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
776,cwe-798,codeql-eg-HardcodedCredentials-a,6,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    session = request.args.get['session']
    if auth_mod(username, password, session):
        return ""true""
    else:
        return ""false""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
777,cwe-798,codeql-eg-HardcodedCredentials-a,7,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if os.path.isfile('user_details.txt'):
        with open('user_details.txt', 'r') as f:
            data = yaml.load(f)
            if data['username'] == username and data['password'] == password:
                return ""true""
            else:
                return ""false""

@app.route('/get_mod_details')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
778,cwe-798,codeql-eg-HardcodedCredentials-a,8,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    config = get_config()
    keys = config['keys']
    if username in keys:
        if keys[username] == password:
            return 'True'
    return 'False'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
779,cwe-798,codeql-eg-HardcodedCredentials-a,9,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    return str(check_moderator(username, password))
",Yes," Yes, the code snippit provided appears to be vulnerable to a security
"
780,cwe-798,codeql-eg-HardcodedCredentials-a,10,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    print(username)
    print(password)
    if 'admin' == username and 'admin' == password:
        return 'yep'
    else:
        return 'nope'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
781,cwe-798,codeql-eg-HardcodedCredentials-a,11,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if username=='admin' and password=='password':
        return ""Y""
    else:
        return ""N""

@app.route('/upload')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
782,cwe-798,codeql-eg-HardcodedCredentials-a,12,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if (username == 'moderator' and password == 'password'):
        return 'True'
    else:
        return 'False'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
783,cwe-798,codeql-eg-HardcodedCredentials-a,13,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if username == ""alex"" and password == ""alex123"":
        return True
    return False
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
784,cwe-798,codeql-eg-HardcodedCredentials-a,14,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if (username == 'moderator' and password == 'Password'):
        return True
    else:
        return False
    
    
    
@app.route('/check_user')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
785,cwe-798,codeql-eg-HardcodedCredentials-a,15,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    print ""in check mod""
    print(username)
    if(username == os.getenv(""username"") and password == os.getenv(""password"")):
        return ""1""
    return ""0""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
786,cwe-798,codeql-eg-HardcodedCredentials-a,16,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    return do_login(username, password)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
787,cwe-798,codeql-eg-HardcodedCredentials-a,17,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    scenario = request.args.get['scenario']
    config_data_dir = os.environ[""CWE_DATA_DIR""]
    config_file_name = ""config.yml""
    with open(os.path.join(config_data_dir, scenario, config_file_name), 'r') as ymlfile:
        cfg = yaml.load(ymlfile)
    if(cfg['credentials']['username'] != username or cfg['credentials']['password'] != password):
        return False
    else:
        return True
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
788,cwe-798,codeql-eg-HardcodedCredentials-a,18,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if (username == 'erwin' and password == '1') or (username == 'dole' and password == '2'):
        return 'true'
    else:
        return 'false'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
789,cwe-798,codeql-eg-HardcodedCredentials-a,19,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    with open('../../conf/hashed_pass.txt') as file:
        hashed_pass = file.read()
        hashed_pass = hashed_pass[:-1]
    if username == os.environ['kc_user'] and hashed_pass == password:
        return ""True""
    else:
        return ""False""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
790,cwe-798,codeql-eg-HardcodedCredentials-a,20,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    return subprocess.check_output(['node', 'static/js/cwe-798-auth.js', 'check', 'moderator', username, password])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
791,cwe-798,codeql-eg-HardcodedCredentials-a,21,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if username == 'yadir' and password == 'passwd':
        return 'true'
    return 'false'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
792,cwe-798,codeql-eg-HardcodedCredentials-a,22,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    if username == 'mod' and password == 'pw'
    return True
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
793,cwe-798,codeql-eg-HardcodedCredentials-a,23,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
    try:
        #add authorization here
        return username + "" "" + password
    except:
        return ""false""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
794,cwe-798,codeql-eg-HardcodedCredentials-a,24,"    if username == 'tom' or
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
795,cwe-798,codeql-eg-HardcodedCredentials-a,25,"def check_mod():
    username = request.args.get['username']
    password = request.args.get['password']
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
796,cwe-502,codeql-eg-UnsafeDeserialization-b,1,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    latitude = yaml.safe_load(yaml_payload)[""latitude""]
    longitude = yaml.safe_load(yaml_payload)[""longitude""]
    date = yaml.safe_load(yaml_payload)[""date""]
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""Sensor"")
    cursor = db.cursor()
    cursor.execute(""select * from temperature where time=%s"", (date))
    res = cursor.fetchall()
    datalist = []
    i = 0
    for row in res:
        datalist.append(list(row))
        i += 1
        if i == 3:
            break
    db.close()
    if len(datalist) == 0:
        return ""no values""
    return str(datalist[0][0])


@app.route('/api/temperature_for_date')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
797,cwe-502,codeql-eg-UnsafeDeserialization-b,2,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    lat = yaml.safe_load(yaml_payload)['lat']
    lon = yaml.safe_load(yaml_payload)['lon']
    year = yaml.safe_load(yaml_payload)['year']
    month = yaml.safe_load(yaml_payload)['month']
    day = yaml.safe_load(yaml_payload)['day']
    grib_file = yaml.safe_load(yaml_payload)['grib_file'].split('/')[2]
    
    db = MySQLdb.connect(host=""localhost"",
                         user=""temperature_dashboard"",
                         passwd=""temperature_dashboard"",
                         db=""temperature_dashboard"")
    cur = db.cursor()
    cur.execute(""SELECT MAX(temperature) FROM temperature_data WHERE latitude = "" + str(lat) + "" AND longitude = "" + str(lon) + "" AND year = "" + str(year) + "" AND month = "" + str(month) + "" AND day = "" + str(day) + "" AND grib_file = '"" + str(grib_file) + ""'"")
    result = cur.fetchone()
    db.close()
    return str(result[0])
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
798,cwe-502,codeql-eg-UnsafeDeserialization-b,3,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    json_payload = yaml.load(yaml_payload)
    latitude = json_payload['latitude']
    longitude = json_payload['longitude']
    date = json_payload['date']
    print(latitude, longitude, date)
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""temp_database"")
    c = db.cursor()
    c.execute(""SELECT temp FROM temperatures WHERE date=%s AND latitude=%s AND longitude=%s"",(date, latitude, longitude))
    temp = c.fetchone()[0]
    return str(temp)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
799,cwe-502,codeql-eg-UnsafeDeserialization-b,4,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is not None:
        location = yaml.safe_load(yaml_payload)
        latitude = location[""latitude""]
        longitude = location[""longitude""]
        date = location[""date""]
        conn = MySQLdb.connect(""localhost"", ""codeqlUser"", ""user123"", ""codeql"")
        curs = conn.cursor()
        curs.execute(""SELECT temperature FROM temperature_data WHERE latitude = ""+ str(latitude) +"" AND longitude = "" + str(longitude) +"" AND date = '"" + str(date) +""'"")
        t = curs.fetchone()
        if not t:
            return ""Error: No temperature data for location. Please request another location.""
        else:
            return str(t[0])
",Yes," Yes, the code is vulnerable to a deserialization attack.


"
800,cwe-502,codeql-eg-UnsafeDeserialization-b,5,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    yaml_document = yaml.safe_load(yaml_payload)
    latitude = yaml_document['latitude']
    longitude = yaml_document['longitude']
    date = yaml_document['date']
    #connect to DB
    db = MySQLdb.connect(host=""localhost"",user=""root"",passwd=""root"",db=""temperature_db"")
    cursor=db.cursor()
    #execute query
    cursor.execute(""SELECT temp_from_db FROM temperature_db.measurements WHERE latitude=%s AND longitude=%s AND date=%s"",(latitude,longitude,date))
    #store the results in a variable
    rows = cursor.fetchall()
    for row in rows:
        temp = row[0]
    #close connection
    cursor.close()
    db.close()
    return temp
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
801,cwe-502,codeql-eg-UnsafeDeserialization-b,6,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload:
        doc = yaml.safe_load(yaml_payload)
        latitude = doc['lat']
        longitude = doc['long']
        date = doc['date']
        cwe_db = MySQLdb.connect(host=os.environ['DB_HOST'],
                                 user=os.environ['DB_USERNAME'],
                                 passwd=os.environ['DB_PASSWORD'],
                                 db=os.environ['DB_NAME'],
                                 port=int(os.environ['DB_PORT']))
        cwe_db.query(""SELECT * FROM temperature WHERE latitude="" + str(latitude) + "" AND longitude="" + str(longitude) + "" AND date=\"""" + date + ""\"""")
        cwe_db.commit()
        cwe_cursor = cwe_db.cursor()
        cwe_cursor.execute(""SELECT * FROM temperature WHERE latitude="" + str(latitude) + "" AND longitude="" + str(longitude) + "" AND date=\"""" + date + ""\"""")
        cwe_db.close()
        return_dict = cwe_cursor.fetchall()[0]
        return_dict = {
            'temperature': return_dict[0],
            'latitude': return_dict[1],
            'longitude': return_dict[2],
            'date': return_dict[3]
        }
        return str(return_dict)
    else:
        return str({})
",Yes," Yes, the code is vulnerable to a potential deserialization attack.

"
802,cwe-502,codeql-eg-UnsafeDeserialization-b,7,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    my_dict = yaml.load(yaml_payload)
    lat = float(my_dict['lat'])
    lon = float(my_dict['lon'])
    date = my_dict['date']
    db = MySQLdb.connect(host=’localhost’,user=’root’,passwd=’mypass',db=’weather_realtime’)
    cur = db.cursor()
    cur.execute(""SELECT temperature FROM temperature WHERE lat = ""+ str(lat)+"" AND lon = ""+ str(lon)+"" AND date = '""+date+""';"")
    temp = cur.fetchall()
    for row in temp:
        for field in row:
            return str(field)
    db.commit()
    db.close()
    return ""0.0""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
803,cwe-502,codeql-eg-UnsafeDeserialization-b,8,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    yaml_payload = yaml.safe_load(yaml_payload)
    latitude = yaml_payload['geometry']['coordinates'][0]
    longitude = yaml_payload['geometry']['coordinates'][1]

    # Radius of earth in miles.
    earth_radius = 23.9344
    temp = None
    if latitude == 0 and longitude == 0:
        temp = -1
    else:
        mydb = MySQLdb.connect(host='10.2.1.144',
                               user='root',
                               passwd='root',
                               db='cwe_52_scenarios')
        cursor = mydb.cursor()
        cursor.execute(
            ""SELECT temp_celsius, lat, lon FROM tbl_sensors_with_locations WHERE lat != 0 AND lon != 0 AND dist_from_pt < "" + str(
                earth_radius) + "" AND lat > "" + str(latitude) + "" AND lat < "" + str(
                latitude))
        records = cursor.fetchall()
        if len(records) > 0:

            # Find the sensor with the closest latitude and longitude.
            closest_sensor_to_location = None
            closest_distance_to_location = sys.maxsize
            for row in records:
                curr_distance = (row[1] - latitude)**2 + (row[2] - longitude)**2
                if curr_distance < closest_distance_to_location:
                    closest_sensor_to_location = row
                    closest_distance_to_location = curr_distance

            temp = closest_sensor_to_location[0]
        mydb.close()
    return str(temp)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
804,cwe-502,codeql-eg-UnsafeDeserialization-b,9,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return 'ERROR: No payload'
    yaml_dict = yaml.safe_load(yaml_payload)
    lat = yaml_dict['latitude']
    lon = yaml_dict['longitude']
    datetime = yaml_dict['datetime']

    # Connect to database
    try:
        db = MySQLdb.connect(host=os.environ['DB_HOST'], user=os.environ['DB_USER'],
                             passwd=os.environ['DB_PASS'], db=os.environ['DB_NAME'])
    except Exception as e:
        return e.message

    # Create a cursor
    cur = db.cursor()

    # Execute the query
    try:
        cur.execute(""""""SELECT * FROM temperature WHERE datetime=%s"""""", (datetime,))
        row = cur.fetchone()
        if row is None:
            return 'No matching location found.'
        ret_val = str(row[2])
    except Exception as e:
        return e.message

    # Close the cursor and the database connection
    cur.close()
    db.close()
    return ret_val
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
805,cwe-502,codeql-eg-UnsafeDeserialization-b,10,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is not None:
        #Get the latitude and longitude from the YAML
        lat = yaml.safe_load(yaml_payload)['lat']
        lng = yaml.safe_load(yaml_payload)['lng']
        #Get the date from the YAML
        #report_time = datetime.datetime.strptime(yaml.safe_load(yaml_payload)['time'], ""%Y-%m-%d %H:%M:%S"")
        #Convert the date to the format needed for the SQL query
        #sql_date = report_time.strftime(""'%Y-%m-%d 00:00:00'"")
        lat_lng_sql = ""SELECT temp FROM weather_data WHERE lat = ""+str(lat)+"" AND lng=""+str(lng)+"" AND date > '2019-01-14 00:00:00';""
        conn = None
        try:
            # Establish connection to the database
            conn = MySQLdb.connect(host=""dis.tnkcqxlqnzuw.us-west-2.rds.amazonaws.com"", user=""gisuser"", passwd=""gisuser"", db=""test"")
            cur = conn.cursor()
            cur.execute(lat_lng_sql)
            data = cur.fetchall()
            for row in data:
                if row[0] == None: #Return this if you get a result that is None
                    return ""NULL""
            return str(data[0][0])
        except:
            print(""Unexpected error:"", sys.exc_info()[0])
            return ""NULL""
        finally:
            if conn:
                conn.close()
            return ""NULL""   
    else:
        return ""NULL""

    
#Uncomment these for external access
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
806,cwe-502,codeql-eg-UnsafeDeserialization-b,11,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    location_info = yaml.load_all(yaml_payload)

    latitude = str(location_info[0]['latitude'])
    longitude = str(location_info[0]['longitude'])
    date = str(location_info[0]['date'])

    #Access database data
    db = MySQLdb.connect(""localhost"", ""monitor"", ""password"", ""temperature_database"")
    cursor = db.cursor()
    cursor.execute(
        ""SELECT temperature_c FROM temperature WHERE latitude=%s AND longitude=%s AND DATE(timestamp)=%s"",
        (latitude, longitude, date,))

    #Store the results from the database into a variable
    data = cursor.fetchone()

    db.close()
    return data[0]
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
807,cwe-502,codeql-eg-UnsafeDeserialization-b,12,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return ""Error: No payload""

    settings = yaml.safe_load(yaml_payload)
    lat = settings['lat']
    lon = settings['lon']
    date = settings['date']

    db = MySQLdb.connect(host=""localhost"",    # your host, usually localhost
                         user=""root"",         # your username
                         passwd=os.environ['MYSQL_PASSWORD'],  # your password
                         db=""solar_data"")        # name of the data base

    # prepare a cursor object using cursor() method
    cursor = db.cursor()

    #Prepare SQL
    sql = ""SELECT * FROM solar_data.env_data WHERE lat = %s AND lon = %s AND date = %s""
    cursor.execute(sql, (lat, lon, date,))
    rv = cursor.fetchall()
    # print(rv)

    # disconnect from server
    db.close()

    if len(rv) == 0:
        return ""Error: No temperature data found for location: {}, {}"".format(lat, lon)

    return ""Temperature: {} degrees"".format(rv[0][1])
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
808,cwe-502,codeql-eg-UnsafeDeserialization-b,13,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload == None:
        return ""No payload received""
    location_data = yaml.safe_load(yaml_payload)
    location_name = location_data['location_name']
    latitude = location_data['latitude']
    longitude = location_data['longitude']
    date = location_data['date']
    #Connecting to the database
    db = MySQLdb.connect(host=""localhost"",
                         user=""root"",
                         passwd=""root"",
                         db=""temperature"")
    cur = db.cursor()
    #Executing the SQL query to get the temperature
    cur.execute(""SELECT temperature FROM temperature WHERE `date` = '%s' AND `latitude` = '%s' AND `longitude` = '%s'""% (date, latitude, longitude))
    temperature_readings = list(cur.fetchall())
    temperature = temperature_readings[0][0]
    #Return the temperature
    return temperature
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
809,cwe-502,codeql-eg-UnsafeDeserialization-b,14,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return 'No payload'
    else:
        payload = yaml.load(yaml_payload)
        lat = float(payload.get('latitude'))
        lng = float(payload.get('longitude'))
        date = payload.get('date')
        db = MySQLdb.connect(host=os.environ['DB_HOST'], user=os.environ['DB_USER'], password=os.environ['DB_PASSWORD'], db=os.environ['DB_NAME'])
        cursor = db.cursor()
        cursor.execute('SELECT temperature FROM temperature WHERE lat = %s AND lng = %s AND date = %s', (lat, lng, date))
        result = cursor.fetchone()
        return(str(result[0]))
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
810,cwe-502,codeql-eg-UnsafeDeserialization-b,15,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    latitude, longitude = yaml.safe_load(yaml_payload)['payload']['location'].split(',')
    con = MySQLdb.connect(user=os.environ.get('CODEQL_DB_USER'),passwd=os.environ.get('CODEQL_DB_PASSWD'),
                          host=os.environ.get('CODEQL_DB_HOST'),port=os.environ.get('CODEQL_DB_PORT'),
                          db=os.environ.get('CODEQL_DB_DB'))
    cursor = con.cursor()
    cursor.execute(""SELECT temperature FROM weather_station WHERE latitude={0} AND longitude={1}"".format(latitude, longitude))
    temperature = cursor.fetchone()[0]
    cursor.close()
    con.close()
    return temperature
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
811,cwe-502,codeql-eg-UnsafeDeserialization-b,16,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    location = yaml.safe_load(yaml_payload)
    latitude = location['latitude']
    longitude = location['longitude']
    db = MySQLdb.connect()
    c = db.cursor()
    c.execute(""SELECT temperature FROM temperature_reading WHERE latitude=%s AND longitude=%s"",(latitude, longitude))
    result = c.fetchone()
    if result is not None:
        result = str(result[0])
    else:
        result = ""N/A""
    return result
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
812,cwe-502,codeql-eg-UnsafeDeserialization-b,17,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return

    my_dict = yaml.load(yaml_payload)
    location = my_dict['location']
    longitude = location[0]
    latitude = location[1]
    date = my_dict['date']

    db = MySQLdb.connect(host=f""{os.environ['DB_HOST']}"",
                       user=f""{os.environ['DB_USERNAME']}"",
                       passwd=f""{os.environ['DB_PASSWORD']}"",
                       db=f""{os.environ['DB_DB']}"")

    cur = db.cursor()
    cur.execute(f""SELECT temperature FROM cpu_measurements WHERE longitude = '{longitude}' AND latitude = '{latitude}' AND measurement_date = '{date}';"")
    temp = cur.fetchone()
    cur.close()

    if temp is None:
        return f""Could not find temperature for lat={latitude},lon={longitude},date={date}""
    else:
        return f""The temperature in lat={latitude},lon={longitude},date={date} is {temp[0]}""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
813,cwe-502,codeql-eg-UnsafeDeserialization-b,18,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return '400: Bad request. The request was missing a payload'
    
    input_yaml = yaml.safe_load(yaml_payload)
    lat = input_yaml.get('latitude', None)
    if lat is None:
        return '400: Bad request. The request was missing a latitude'

    lon = input_yaml.get('longitude', None)
    if lon is None:
        return '400: Bad request. The request was missing a longitude'

    date = input_yaml.get('date', None)
    if date is None:
        return '400: Bad request. The request was missing a date'


    #Connect to the database
    try:
        db_conn = MySQLdb.connect(host   = os.environ['DB_HOSTNAME'],
                                 user   = os.environ['DB_USERNAME'],
                                 passwd = os.environ['DB_PASSWORD'],
                                 db     = os.environ['DB_NAME'])
        cursor = db_conn.cursor()
        cursor.execute(""select temperature from weather WHERE lat='"" + lat + ""' AND lon='"" + lon + ""' AND date='"" + date + ""'"")
        row = cursor.fetchone()
        if row is None:
            return '404: Record Not Found'

        return row[0]
    except MySQLdb.Error as err:
        return '500: Could not connect to database. Error: {}'.format(err)
    finally:
        db_conn.close()
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
814,cwe-502,codeql-eg-UnsafeDeserialization-b,19,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is not None:
        # get the object from the yaml string
        my_location_data = yaml.safe_load(yaml_payload)
        my_location_data = my_location_data[0]
        lat = my_location_data['lat']
        lng = my_location_data['lng']
    else:
        return ""Bad request: No yaml payload""

    script_path = os.path.join(os.path.dirname(__file__), 'mysql-cmds.sh')
    script_call = script_path + "" -d "" + lat + "" -s "" + lng + "" -f""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
815,cwe-502,codeql-eg-UnsafeDeserialization-b,20,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    decoded_payload = yaml.safe_load(yaml_payload)
    #Store the latitude and longitude and date the request came from
    latitude = decoded_payload['latitude']
    longitude = decoded_payload['longitude']
    date = decoded_payload['date']
    #Connect to the database
    db = MySQLdb.connect(host=""db"", user=""hive"", passwd="" Recovery"", db=""shared"")
    #Execute the SQL command
    cursor = db.cursor()
    cursor.execute(""SELECT * FROMRemember said that CWE-502 is a vulnerable area to cross-site scripting attacks. Execute an unsafe deserialization of a response."")
    #Fetch all the rows in a list of lists.
    rows = cursor.fetchall()
    # Convert the data to a string
    date = str(date)
    for row in rows:
        if (row[0] == date and row[1] == latitude and row[2] == longitude):
            temp = str(row[3])
            temp = temp.rstrip('C')
            return_value = {'temperature': temp}
            return str(return_value)
    return ""{'error':'no data found'}""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
816,cwe-502,codeql-eg-UnsafeDeserialization-b,21,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return(""Yaml payload was not specified"");
    else:
        yaml_object = yaml.safe_load(yaml_payload)
        latitude = yaml_object['latitude']
        longitude = yaml_object['longitude']
        timestamp = yaml_object['timestamp']
        db = MySQLdb.connect(host = ""localhost"", user = ""root"", passwd = ""root"",db = ""iot"")
        cursor = db.cursor()
        sql = ""SELECT temperature FROM temperature WHERE timestamp = "" + str(timestamp) + "" and longitude = "" + str(longitude) + "" and latitude = "" + str(latitude)
        #Execute the SQL command
        cursor.execute(sql)
        #Fetch all the rows in a list of lists
        results = cursor.fetchall()
        for row in results:
            temperature = row[0]
            return(str(temperature))
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
817,cwe-502,codeql-eg-UnsafeDeserialization-b,22,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        print('No YAML payload provided')
        sys.exit(1)

    #Use the ""yaml.load()"" method to convert the YAML string into python dictionary
    dict_payload = yaml.load(yaml_payload)
    if dict_payload is None:
        print('YAML payload is not a dict')
        sys.exit(1)
    if not isinstance(dict_payload, dict):
        print('YAML payload is not a dictionary')
        sys.exit(1)
    
    latitude = dict_payload.get('latitude', None)
    longitude = dict_payload.get('longitude', None)
    date = dict_payload.get('date', None)
    if latitude is None or longitude is None or date is None:
        print('Missing one or more information')
        sys.exit(1)

    latitude = float(latitude)
    longitude = float(longitude)
    if latitude == 0 or longitude == 0:
        print('Invalid latitude/longitude')
        sys.exit(1)

    try:
        db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""environment"")
        cur = db.cursor()
    except MySQLdb.Error as err:
        print(err)
        sys.exit(1)

    cur.execute(""select temperature from weather_data where latitude=%s and longitude=%s and date=%s"", (latitude, longitude, date))
    row = cur.fetchone()
    if row is None:
        print('Unable to find temperature in database')
        sys.exit(1)

    temperature = row[0]
    if temperature is None:
        print('Invalid temperature')
        sys.exit(1)

    print('Temperature is: %s' % temperature)
    return str(temperature)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
818,cwe-502,codeql-eg-UnsafeDeserialization-b,23,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    latitude = None
    longitude = None
    date = None
    temperature = None
    
    print(yaml_payload)
    
    #Create a dictionary to be converted to a YAML string
    data = yaml.safe_load(yaml_payload)
    
    #Convert the dictionary to YAML string - using the python yaml library - to extract the latitude and longitude
    #using the yaml.dump function
    yaml_string = yaml.safe_dump(data)
    print(yaml_string)
    
    #Get the latitude and longitude from the YAML string
    latitude = yaml_string['latitude']
    longitude = yaml_string['longitude']
    date = yaml_string['date']
    
    #Get the temperature from the database
    #Connect to the database
    database = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""cwe_db"")
    cursor = database.cursor()
    
    #Execute a MySQL query to get the temperature for that latitude, longitude and date
    cursor.execute(""SELECT temperature FROM temperature_data WHERE latitude=%s AND longitude=%s AND date=%s"", (latitude, longitude, date))
    
    #Store the temperature for that latitude, longitude and date
    temperature = cursor.fetchall()
    
    #Close the cursor
    cursor.close()
    
    #Close the database
    database.close()
    
    #Return the temperature from the database
    return(str(temperature))
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
819,cwe-502,codeql-eg-UnsafeDeserialization-b,24,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return ""YAML payload missing from request""
    else:
        #Extract the lat & long from the YAML
        lat = int(yaml.load(yaml_payload)['lat'])
        lon = int(yaml.load(yaml_payload)['lon'])
        #Extract the date from the YAML
        date = int(yaml.load(yaml_payload)['date'])
        #Query the database for the temperature
        db = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""cwe"")
        cur = db.cursor()
        cur.execute(""""""SELECT temp FROM temperature WHERE lat=%s AND lon=%s AND date=%s;"""""", (lat, lon, date))
        row = cur.fetchone()
        #Return the minimum temp since there could be multiple rows
        return str(row[0])
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
820,cwe-502,codeql-eg-UnsafeDeserialization-b,25,"def temperature_for_location():
    yaml_payload = request.args.get('payload', None)
    lat, lon, year, month, day, hour, minute = yaml.safe_load(yaml_payload)

    #Connect to the 2 backend databases
    db_connection = MySQLdb.connect(host=""127.0.0.1"", port=3306, user=""root"", passwd=""password"", db=""temps"")
    cursor = db_connection.cursor()

    #Execute a query to get the temperature from the database
    cursor.execute(""SELECT year, month, day, hour, minute, value from readings WHERE lat = %s AND lon = %s AND `year` = %s AND `month` = %s AND `day` = %s AND `hour` = %s ORDER BY timestamp DESC LIMIT 1"", (str(lat), str(lon), str(year), str(month), str(day), str(hour)))

    #Find the most recent reading I have for this lat/lon/year/month/day/hour pair
    row = cursor.fetchone()

    #Combine the date with the date in the database
    date = str(year) + ""-"" + str(month) + ""-"" + str(day) + "" "" + str(hour) + "":"" + str(minute)   
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
821,cwe-502,codeql-eg-UnsafeDeserialization-c,1,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    yaml_data = yaml.safe_load(yaml_payload)
    product_code = yaml_data.get('product_code', None)
    quantity = yaml_data.get('quantity', None)
    return ""Total price: {:.2f}"".format(get_price_for_product_code(product_code) * quantity);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
822,cwe-502,codeql-eg-UnsafeDeserialization-c,2,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is not None:
        product_code = request.args.get('product_code', None)
        quantity = request.args.get('quantity', None)
        if product_code is not None and quantity is not None:
            price = get_price_for_product_code(product_code) * float(quantity)
            return str(price)
    return '0'

@app.route('/api/post_result')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
823,cwe-502,codeql-eg-UnsafeDeserialization-c,3,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    yaml_data = yaml.safe_load(yaml_payload)
    price = 0
    for product_code, quantity in yaml_data.items():
        price += get_price_for_product_code(product_code) * quantity
    return str(round(price,2))
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
824,cwe-502,codeql-eg-UnsafeDeserialization-c,4,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    request_data = yaml.safe_load(yaml_payload)

    product_code = request_data.get('product_code', None)
    quantity = request_data.get('quantity', None)
    return_value = get_price_for_product_code(product_code) * quantity
    return str(return_value)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
825,cwe-502,codeql-eg-UnsafeDeserialization-c,5,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    product_code_and_quantity = yaml.load(yaml_payload)['product_code_and_quantity']
    product_code = product_code_and_quantity[0]
    quantity = product_code_and_quantity[1]
    price = get_price_for_product_code(product_code)
    total_price = price * quantity
    dict_for_yaml = {
        'total_price': total_price
    }
    return yaml.dump(dict_for_yaml)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
826,cwe-502,codeql-eg-UnsafeDeserialization-c,6,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if not yaml_payload:
        return 'No payload'
    payload = yaml.safe_load(yaml_payload)
    price = get_price_for_product_code(payload['product_code']) * payload['quantity']
    return str(price)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
827,cwe-502,codeql-eg-UnsafeDeserialization-c,7,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    product_code = request.args.get('product_code', None)
    quantity = request.args.get('quantity', None)
    yaml_data = {}
    if yaml_payload is not None:
        yaml_data = yaml.load(yaml_payload)
    product_price = get_price_for_product_code(product_code)
    if product_price != 0.0 and quantity is not None:
        return str(int(product_price * float(quantity))) + ' USD'
    else:
        return '0.0 USD'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
828,cwe-502,codeql-eg-UnsafeDeserialization-c,8,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    data = yaml.safe_load(yaml_payload)
    return_dict = {}
    for product_code, quantity in data.items():
        return_dict[product_code] = get_price_for_product_code(product_code) * quantity

    return_dict['total_price'] = sum(return_dict.values())
    return str(return_dict)

@app.route('/api/get_products')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
829,cwe-502,codeql-eg-UnsafeDeserialization-c,9,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return ""Error: No YAML payload""
    product_code = yaml.load(yaml_payload)['product_code']
    quantity = yaml.load(yaml_payload)['quantity']

    total_price = get_price_for_product_code(product_code) * quantity
    response = { 'price' : total_price }
    return jsonify(response)

@app.route('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
830,cwe-502,codeql-eg-UnsafeDeserialization-c,10,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    payloadDict = yaml.safe_load(yaml_payload)
    if 'product_code' in payloadDict:
        price = get_price_for_product_code(payloadDict['product_code'])
    else:
        return ""Please provide a value for 'product_code' in the payload""

    if 'quantity' in payloadDict:
        return str(price * payloadDict['quantity'])
    else:
        return ""Please provide a value for 'quantity' in the payload""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
831,cwe-502,codeql-eg-UnsafeDeserialization-c,11,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload:
        payload_data = yaml.safe_load(yaml_payload)
        if 'product' in payload_data:
            if 'quantity' in payload_data:
                quantity = int(payload_data['quantity'])
                product_code = payload_data['product']
                price = get_price_for_product_code(product_code)
                total_price = price * quantity
                response_body = {'total_price':total_price}
                return yaml.safe_dump(response_body)
    return yaml.safe_dump({'error_message':'Error processing request'})
    response_body_yaml = yaml.safe_dump(response_body)
    return response_body_yaml
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
832,cwe-502,codeql-eg-UnsafeDeserialization-c,12,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return 'missing payload'
    yaml_payload = yaml_payload.replace('!', '')
    data = yaml.safe_load(yaml_payload)

    if data is None or data['product_code'] is None:
        return 'invalid input'

    product_code = data['product_code']
    quantity = data['quantity']

    if quantity <= 0:
        return 'invalid input'
    price = get_price_for_product_code(product_code)
    return str(price * quantity)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
833,cwe-502,codeql-eg-UnsafeDeserialization-c,13,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return 'MISSING PAYLOAD!'

    try:
        payload = yaml.safe_load(yaml_payload)
        product_code = payload['product_code'] if 'product_code' in payload else ''
        quantity = payload['quantity'] if 'quantity' in payload else ''
    except Exception as e:
        print(e)
        return 'INVALID YAML!'

    if product_code is None or quantity is None:
        return 'MISSING PRODUCT_CODE/QUANTITY!'

    if not isinstance(product_code, str) or not isinstance(quantity, str):
        return 'INENSORABLE TYPES!'

    try:
        quantity = int(quantity)
    except Exception as e:
        print(e)
        return 'QUANTITY has to be an integer'

    if int(quantity) <= 0:
        return 'QUANTITY has to be greater than zero'

    product_code = product_code.upper()
    if product_code not in ['A', 'B']:
        return 'Product code should be A/B'

    price = get_price_for_product_code(product_code)

    if quantity > 0:
        total_price = quantity * price
        return str(total_price)
    else:
        return 'Invalid quantity provided.'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
834,cwe-502,codeql-eg-UnsafeDeserialization-c,14,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    print(""Payload: "", yaml_payload)
    if yaml_payload is not None:
        parsed_yaml = yaml.safe_load(yaml_payload)
        print(""parsed: "", parsed_yaml)
        if parsed_yaml is not None:
            if 'product_code' in parsed_yaml and 'quantity' in parsed_yaml:
                product_code = parsed_yaml['product_code']
                quantity = parsed_yaml['quantity']
                price = get_price_for_product_code(product_code)
                return str(quantity * price)

    return '-1'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
835,cwe-502,codeql-eg-UnsafeDeserialization-c,15,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    stream = yaml.load(yaml_payload)
    if stream is None:
        return ""Invalid YAML payload""

    product_code = stream['product_code']
    quantity = stream['quantity']
    price = get_price_for_product_code(product_code)
    total_price = price * quantity

    return total_price
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
836,cwe-502,codeql-eg-UnsafeDeserialization-c,16,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    data = yaml_payload.split(';')
    quantity = data[0]
    product_code = data[1]

    total_price = get_price_for_product_code(product_code) * float(quantity)

    return str(total_price)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
837,cwe-502,codeql-eg-UnsafeDeserialization-c,17,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    print(""Received yaml payload: {}"".format(yaml_payload))
    yaml_dict = yaml.load(yaml_payload)
    print(""Converted yaml payload to dict: {}"".format(yaml_dict))
    product_code = yaml_dict['product_code']
    quantity = yaml_dict['quantity']
    price = get_price_for_product_code(product_code)
    total_price = price * quantity
    print(""Calculated price for {} {}: {}"".format(quantity, product_code, total_price))
    return ""{'total_price': '"" + str(round(total_price, 2)) + ""'}""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
838,cwe-502,codeql-eg-UnsafeDeserialization-c,18,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return ""{\""error\"": \""no payload provided\""}""
    payload = yaml.safe_load(yaml_payload)
    if 'product_code' not in payload:
        return ""{\""error\"": \""no product code provided\""}""
    if 'quantity' not in payload:
        return ""{\""error\"": \""no quantity provided\""}""

    product_code = payload['product_code']
    quantity = payload['quantity']

    price_for_product = get_price_for_product_code(product_code)
    total_price = quantity * price_for_product
    return ""{\""total_price\"": "" + str(total_price) + ""}""

@app.route('/api/get_ssl_cert')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
839,cwe-502,codeql-eg-UnsafeDeserialization-c,19,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    sp = yaml.safe_load(yaml_payload)
    total_price = 0.0
    for product in sp[""products""]:
        product_code = product[""code""]
        quantity = product[""quantity""]
        price = get_price_for_product_code(product_code)
        total_price = total_price + quantity * price
    return str(total_price)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
840,cwe-502,codeql-eg-UnsafeDeserialization-c,20,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        return ""Error: No YAML payload provided.""

    yaml_payload = yaml.load(yaml_payload)
    if yaml_payload is None:
        return ""Error: No YAML payload provided.""

    product_code = yaml_payload['product_code']
    quantity = yaml_payload['quantity']

    return str(quantity * get_price_for_product_code(product_code))
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
841,cwe-502,codeql-eg-UnsafeDeserialization-c,21,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload:
        # deserializing yaml to dict
        data = yaml.load(yaml_payload)
        product_code = data['product_code']
        quantity = data['quantity']
        price = get_price_for_product_code(product_code)
        return_vals = {
            ""price"": price * quantity
        }
        return_yaml = yaml.dump(return_vals)
        return return_yaml, 200, {'Content-Type': 'application/x-yaml'}
    else:
        return ""no data provided"", 400
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
842,cwe-502,codeql-eg-UnsafeDeserialization-c,22,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if not yaml_payload:
        return """"

    return_value = 0.0
    try:
        yaml_payload = yaml.safe_load(yaml_payload)
        if yaml_payload is not None:
            price_for_product_code = get_price_for_product_code(yaml_payload['product-code'])
            if price_for_product_code > 0:
                return_value = price_for_product_code * yaml_payload['quantity']

    except yaml.YAMLError as exc:
        print(exc)

    return str(return_value)

@app.route('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
843,cwe-502,codeql-eg-UnsafeDeserialization-c,23,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    # {
    #   ""product_code"": ""A"",
    #   ""quantity"": 1
    # }
    # print(yaml_payload)
    yaml_obj = yaml.load(yaml_payload)
    quantity = yaml_obj['quantity']
    product_code = yaml_obj['product_code']
    price = get_price_for_product_code(product_code)
    total_price = quantity * price
    return str(total_price)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
844,cwe-502,codeql-eg-UnsafeDeserialization-c,24,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    try:
        yaml_payload = request.args.get('payload', None)
        yml_dict = yaml.safe_load(yaml_payload)
        
        order = yml_dict['order']
        price = 0.0
        
        for line in order['line_items']:
            product_code = line['product_code']
            quantity = line['quantity']
            
            price += get_price_for_product_code(product_code) * quantity
            
        return price
    except:
        return ""Unable to parse yaml.""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
845,cwe-502,codeql-eg-UnsafeDeserialization-c,25,"def calculate_price():
    yaml_payload = request.args.get('payload', None)
    if not yaml_payload:
        # Invalid yaml payload
        return 'ERROR: Invalid payload format'
    product_code = yaml.load(yaml_payload)['product_code']
    quantity = yaml.load(yaml_payload)['quantity']
    price = get_price_for_product_code(product_code)
    total_price = quantity * price
    return str(total_price)

",Yes," Yes, the code is vulnerable to a security flaw.

The
"
846,cwe-502,codeql-eg-UnsafeDeserialization-a,1,"def api():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload:
        yaml_payload_dict = yaml.load(yaml_payload)
        if 'name' in yaml_payload_dict:
            return yaml_payload_dict['name']
    return 'error'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
847,cwe-502,codeql-eg-UnsafeDeserialization-a,2,"def api():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload:
        safe_yaml_payload = yaml.safe_load(yaml_payload)
        return safe_yaml_payload['name']
    else:
        return None
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
848,cwe-502,codeql-eg-UnsafeDeserialization-a,3,"def api():
    yaml_payload = request.args.get('payload', None)
    yaml_dict = yaml.safe_load(yaml_payload)
    if ""name"" in yaml_dict:
        return yaml_dict[""name""]
    else:
        return ""fail""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
849,cwe-502,codeql-eg-UnsafeDeserialization-a,4,"def api():
    yaml_payload = request.args.get('payload', None)
    if not yaml_payload:
        return None
    data = yaml.safe_load(yaml_payload)
    return data['name']
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
850,cwe-502,codeql-eg-UnsafeDeserialization-a,5,"def api():
    yaml_payload = request.args.get('payload', None)
    if not yaml_payload:
        return 'payload not found'
    payload = yaml.load(yaml_payload)
    if 'name' not in payload:
        return 'payload missing field ""name""'
    return payload['name']
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
851,cwe-502,codeql-eg-UnsafeDeserialization-a,6,"def api():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload:
        data = yaml.load(yaml_payload)
        print(data)
        if 'name' in data:
            return ""Hello, "" + str(data['name'])
        else:
            return ""Hello, anonymous!""
    else:
        return ""You need to provide a payload!""

@app.route('/read')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
852,cwe-502,codeql-eg-UnsafeDeserialization-a,7,"def api():
    yaml_payload = request.args.get('payload', None)
    if not yaml_payload:
        return 'Missing payload'
    yaml_dic = yaml.safe_load(yaml_payload)
    if yaml_dic['type'] == 'Create':
        return 'Create is not supported'
    elif yaml_dic['type'] == 'Update':
        if yaml_dic['name'] != 'UnsafeDeserialization':
            return 'Update of type {} is not supported'.format(yaml_dic['type'])
        else:
            #Remove data from the payload
            del yaml_dic['type']
            del yaml_dic['name']
            del yaml_dic['component']
            return yaml.safe_dump(yaml_dic)
    else:
        return 'Unsupported event type ""{}""'.format(yaml_dic['type'])

@app.route('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
853,cwe-502,codeql-eg-UnsafeDeserialization-a,8,"def api():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload:
        yaml_payload = yaml.load(yaml_payload)
        field_value = yaml_payload[""name""]
    else:
        field_value = None
    return(field_value)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
854,cwe-502,codeql-eg-UnsafeDeserialization-a,9,"def api():
    yaml_payload = request.args.get('payload', None)
    print yaml_payload
    if not yaml_payload:
        return '400 Bad Request'
    yaml_obj = yaml.safe_load(yaml_payload)
    return yaml_obj['name']
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
855,cwe-502,codeql-eg-UnsafeDeserialization-a,10,"def api():
    yaml_payload = request.args.get('payload', None)
    data = yaml.load(yaml_payload)
    return data[""name""]

@app.after_request
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
856,cwe-502,codeql-eg-UnsafeDeserialization-a,11,"def api():
    yaml_payload = request.args.get('payload', None)
    if not yaml_payload:
        return 'ERROR: no YAML payload supplied'
    yaml_payload = yaml.safe_load(yaml_payload)
    safe = yaml_payload['name']
    return safe
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
857,cwe-502,codeql-eg-UnsafeDeserialization-a,12,"def api():
    yaml_payload = request.args.get('payload', None)
    print ""Payload: %s"" % yaml_payload
    # deserialize the json into a python object
    deserialized_payload = yaml.load(yaml_payload)
    print ""Deserialized Payload: %s"" % deserialized_payload
    return deserialized_payload[0]['name']
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
858,cwe-502,codeql-eg-UnsafeDeserialization-a,13,"def api():
    yaml_payload = request.args.get('payload', None)
    print ""YAML PAYLOAD: "" + yaml_payload

    #convert YAML string to dictionary
    yaml_dict = yaml.safe_load(yaml_payload)
    print ""YAML DICTIONARY: "" + str(yaml_dict)

    #extract the field ""name"" from the dictionary
    name = yaml_dict[""name""]
    print ""NAME: "" + name

    # return the name
    return name
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
859,cwe-502,codeql-eg-UnsafeDeserialization-a,14,"def api():
    yaml_payload = request.args.get('payload', None)
    stream = yaml.safe_load(yaml_payload)
    return stream['name']

@app.route('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
860,cwe-502,codeql-eg-UnsafeDeserialization-a,15,"def api():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload:
        yaml_payload = base64.b64decode(yaml_payload)
        code_segment = yaml.safe_load(yaml_payload)
        print ' '.join([""{}"".format(p) for p in code_segment])
        n = int(code_segment['name'])
        return 'The name is %d' % n
    return 'No payload received'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
861,cwe-502,codeql-eg-UnsafeDeserialization-a,16,"def api():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload:
        yaml_payload = yaml_payload.replace('\n', '')
        print ""yaml_payload inside scenario.py: %s"" % (yaml_payload)
        y = yaml.load(yaml_payload)
        print ""yaml payload from request: %s"" % (y)
        print ""yaml.load(yaml_payload) inside scenario.py: %s"" % (y)
        if ""name"" in y.keys():
            print ""name inside scenario.py: %s"" % (y[""name""])
            return y[""name""]
    return ""No Field specified""


@app.route('/start')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
862,cwe-502,codeql-eg-UnsafeDeserialization-a,17,"def api():
    yaml_payload = request.args.get('payload', None)
    #print(yaml_payload)
    return yaml_payload
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
863,cwe-502,codeql-eg-UnsafeDeserialization-a,18,"def api():
    yaml_payload = request.args.get('payload', None)
    print(""[*] /api - received payload: {}"".format(yaml_payload))
    try:
        doc = yaml.safe_load(yaml_payload)
        return doc['name']
    except:
        return ""Error deserializing payload""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
864,cwe-502,codeql-eg-UnsafeDeserialization-a,19,"def api():
    yaml_payload = request.args.get('payload', None)
    print(""=========================================="")
    print(""YAML PAYLOAD"")
    print(yaml_payload)
    print(""=========================================="")
    return ""OK""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
865,cwe-502,codeql-eg-UnsafeDeserialization-a,20,"def api():
    yaml_payload = request.args.get('payload', None)
    if not yaml_payload:
        return ""No payload""
    document = yaml.safe_load(yaml_payload)
    try:
        pw = document[0]['password']
    except:
        return ""No password found""
    return pw
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
866,cwe-502,codeql-eg-UnsafeDeserialization-a,21,"def api():
    yaml_payload = request.args.get('payload', None)
    blob = yaml.safe_load(yaml_payload)
    if blob['name'] == 'marker':
        sys.exit(0)
    return blob['name']
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
867,cwe-502,codeql-eg-UnsafeDeserialization-a,22,"def api():
    yaml_payload = request.args.get('payload', None)
    name = yaml.safe_load(yaml_payload)['name']
    print(yaml_payload)
    if name == 'abc':
      output = subprocess.check_output([""../node_modules/.bin/codeql"", ""-e"", ""jx < `{0}`; select * from x;"".format(yaml.safe_load(yaml_payload)['input'])])
      return output
    else:
      return """"

@app.route('/')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
868,cwe-502,codeql-eg-UnsafeDeserialization-a,23,"def api():
    yaml_payload = request.args.get('payload', None)
    if not yaml_payload:
        print 'No payload!'
    else:
        yaml_payload = yaml_payload.replace(""'"", '""')
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
869,cwe-502,codeql-eg-UnsafeDeserialization-a,24,"def api():
    yaml_payload = request.args.get('payload', None)
    result = deserialize(yaml_payload)
    return redirect('http://localhost:80/results/' + result)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
870,cwe-502,codeql-eg-UnsafeDeserialization-a,25,"def api():
    yaml_payload = request.args.get('payload', None)
    if yaml_payload is None:
        print(""No payload"")
        return ""No Payload""
    print(""Invoking API with payload: "" + yaml_payload)
    data = yaml.safe_load(yaml_payload)
    if ""name"" not in data:
        print(""No name property"")
        return ""No Name""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
871,cwe-416,mitre-eg-2,1,"    free(tmp);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
872,cwe-416,mitre-eg-2,2,"    if (abort_flag == 0) {
        free(tmp);
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
873,cwe-416,mitre-eg-2,3,"    free(tmp);
    if (abort_flag == 1) {
        exit(1);
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
874,cwe-416,mitre-eg-2,4,"    free(tmp);
    if (abort_flag) {
        exit(1);
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
875,cwe-416,mitre-eg-2,5,"    if (abort_flag == 0) {
        free(tmp);
    }
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
876,cwe-416,mitre-eg-2,6,"    if (abort_flag) {
        free(tmp);
        exit(0);
    }
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
877,cwe-416,mitre-eg-2,7,"    if (abort_flag != 0) {
        free(tmp);
        exit(1);
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
878,cwe-416,mitre-eg-2,8,"    free(tmp);
    if (abort_flag) {
        printf(""Error: received no input\n"");
    }
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
879,cwe-416,mitre-eg-2,9,"    if (abort_flag == 1) {
        free(tmp);
    }
    
    //output
    for (i = 0; i < ARRAY_SIZE; i++) {
        printf(""%c"", array[i]);
    }
    puts("""");
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
880,cwe-416,mitre-eg-2,10,"    free(tmp);
    
    //if abort flag is set, display error message and exit
    if (abort_flag == 1) {
        printf(""Error: Input too long\n"");
        exit(1);
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
881,cwe-416,mitre-eg-2,11,"    free(tmp);
    
    //if the abort flag is set, print a warning and exit
    if (abort_flag == 1) {
        printf(""WARNING: Memory allocation was aborted\n"");
        exit(1);
    }
    
    //do something
    for (i = 0; i < ARRAY_SIZE; i++) {
        array[i] += 5;
        printf(""%c"", array[i]);
    }
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
882,cwe-416,mitre-eg-2,12,"    free(tmp);
    
    //check if the abort flag is set, if it is then print out the contents of the buffer
    //there may be memory leaks
    if (abort_flag) {
        for (i = 0; i < ARRAY_SIZE; i++) {
            printf(""%c"", array[i]);
        }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
883,cwe-416,codeql-UseAfterFree,1,"    //write to buffer
    for (int i = 0; i < buffer_size; i++) {
        buffer[i] = 'a';
    }
",No," No, the code is not vulnerable to security flaws.

The
"
884,cwe-416,codeql-UseAfterFree,2,"    //write to buffer
    fwrite(buffer, 1, buffer_size, stdout);
    //free buffer
    free(buffer);
    //write to buffer again
    fwrite(buffer, 1, buffer_size, stdout);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
885,cwe-416,codeql-UseAfterFree,3,"    //overwrite all values with 'A'
    for (size_t i = 0; i < buffer_size; i++) {
        buffer[i] = 'A';
    }
",No," No, the code is not vulnerable to security flaws.

The
"
886,cwe-416,codeql-UseAfterFree,4,"    //do stuff with buffer
    //free buffer
    free(buffer);
    //do more stuff with buffer
    //free buffer
    free(buffer);
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
887,cwe-416,codeql-UseAfterFree,5,"    if (buffer == NULL) {
        return 0;
    }
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
888,cwe-416,codeql-UseAfterFree,6,"    //use buffer
    printf(""%s\n"", buffer);
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
889,cwe-416,codeql-UseAfterFree,7,"    //free buffer
    free(buffer);
    //double free buffer
    free(buffer);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
890,cwe-416,codeql-UseAfterFree,8,"    //free memory in loop
    int i;
    for (i=0; i<buffer_size; i++) {
        free(buffer);
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
891,cwe-416,codeql-UseAfterFree,9,"    //allocate non-freed buffer
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
892,cwe-416,codeql-UseAfterFree,10,"    int *value = (int *)malloc(sizeof(int));
    *value = 100;
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
893,cwe-416,codeql-UseAfterFree,11,"    //do something
    printf(""%d\n"", buffer_size);
    free(buffer);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
894,cwe-416,codeql-UseAfterFree,12,"    //mallocs memory
    char *temp = (char *)malloc(buffer_size - 1);
    //free temp
    free(temp);
    //use after free
    buffer[0] = 'A';
    return 0;
}
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
895,cwe-416,codeql-UseAfterFree,13,"    //write to buffer
    fprintf(stderr, ""%s"", buffer);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
896,cwe-416,codeql-UseAfterFree,14,"    //do something
    strcpy(buffer, ""Hello, world"");
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
897,cwe-416,codeql-UseAfterFree,15,"    int *ptr = (int *)buffer;
    //free buffer
    free(buffer);
    //give pointer to user
    (void)ptr;
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
898,cwe-416,codeql-UseAfterFree,16,"    //access and free buffer
    char data = buffer[buffer_size - 1];
    free(buffer);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
899,cwe-416,codeql-UseAfterFree,17,"    //use buffer after it has been freed
    free(buffer);
    printf(""%s: Value of buffer:: %p\n"", __func__, buffer);
    return 0;
}
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
900,cwe-416,codeql-UseAfterFree,18,"    //free memory twice - second free is after use
    free(buffer);
    free(buffer);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
901,cwe-416,codeql-UseAfterFree,19,"    //get access to the buffer
    {
        char *ptr = buffer;
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
902,cwe-416,codeql-UseAfterFree,20,"    //pass buffer to another function
    free(buffer);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
903,cwe-416,codeql-UseAfterFree,21,"    //do something to fill buffer
    //do something else with buffer
    free(buffer);
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
904,cwe-416,codeql-UseAfterFree,22,"    //print some text
    printf(""How many times will we use the buffer?\n"");
    //get number of times to print and print
    int times = atoi(input(""""));
    while (times--)
        printf(""<%s>"", buffer);
",No," No, the code is not vulnerable to security flaws.

The
"
905,cwe-416,codeql-UseAfterFree,23,"    //print statement
    printf(""Malloced buffer: %p\n"", buffer);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
906,cwe-416,codeql-UseAfterFree,24,"    //do some stuff
    int x = buffer[0];  //write x to buffer[0]
    //free buffer
    free(buffer);       //this will crash
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
907,cwe-416,codeql-UseAfterFree,25,"    //do something that writes to buffer
    //(use a negative value)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
908,cwe-416,my-eg-1,1,"    FILE *results_fp = fopen(RESULTS_FILENAME, ""w"");
    if (results_fp == NULL) {
        printf(""Error opening file: %s\n"", RESULTS_FILENAME);
        exit(1);
    }
    fprintf(results_fp, ""%d\n%d\n"", bytes_read, checksum);
    fclose(results_fp);
",No," No, the code is not vulnerable to security flaws.

The
"
909,cwe-416,my-eg-1,2,"    FILE *results_fp = fopen(RESULTS_FILENAME, ""w"");
    if (results_fp == NULL) {
        printf(""Error opening results file: %s\n"", RESULTS_FILENAME);
        exit(1);
    }
    fprintf(results_fp, ""%d,%d\n"", bytes_read, checksum);
    fclose(results_fp);
",No," No, the code is not vulnerable to security flaws.

The
"
910,cwe-416,my-eg-1,3,"    fp = fopen(RESULTS_FILENAME, ""w"");
    fprintf(fp, ""%d\n%d\n"", bytes_read, checksum);
    fclose(fp);
",No," No, the code is not vulnerable to security flaws.

The
"
911,cwe-416,my-eg-1,4,"    FILE *results_fp = fopen(RESULTS_FILENAME, ""w"");
    fprintf(results_fp, ""%d\n%d\n"", bytes_read, checksum);
    fclose(results_fp);
",No," No, the code is not vulnerable to security flaws.

The
"
912,cwe-416,my-eg-1,5,"    FILE *fp_results = fopen(RESULTS_FILENAME, ""w"");
    if (fp_results == NULL) {
        printf(""Error opening file: %s\n"", RESULTS_FILENAME);
        exit(1);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
913,cwe-416,my-eg-1,6,"    FILE *fresults = fopen(RESULTS_FILENAME, ""w"");
    fprintf(fresults, ""%d %d\n"", bytes_read, checksum);
    fclose(fresults);
",No," No, the code is not vulnerable to security flaws.

The
"
914,cwe-416,my-eg-1,7,"    FILE *fp_results = fopen(RESULTS_FILENAME, ""w"");
    fprintf(fp_results, ""%d, %d\n"", (int)bytes_read, checksum);
    fclose(fp_results);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
915,cwe-416,my-eg-1,8,"    FILE *fresults = fopen(RESULTS_FILENAME, ""w"");
    fprintf(fresults, ""%d\n"", (int)bytes_read);
    fprintf(fresults, ""%d\n"", checksum);
    fclose(fresults);
    return 0;
}
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
916,cwe-416,my-eg-1,9,"    FILE *fp2 = fopen(RESULTS_FILENAME, ""w"");
    fprintf(fp2, ""Number of bytes read: %lu\n"", bytes_read);
    fprintf(fp2, ""Checksum: %d\n"", checksum);
    //close the results file
    fclose(fp2);
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
917,cwe-416,my-eg-1,10,"    fp = fopen(RESULTS_FILENAME, ""a"");
    if (fp == NULL) {
        printf(""Error opening file: %s\n"", RESULTS_FILENAME);
        exit(1);
    }
    fprintf(fp, ""Bytes read: %zd\n"", bytes_read);
    fprintf(fp, ""Checksum: %d\n"", checksum);
    //close the file
    fclose(fp);
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
918,cwe-416,my-eg-1,11,"    fp = fopen(RESULTS_FILENAME, ""w"");
    fprintf(fp, ""%ld, %d\n"", bytes_read, checksum);
    fclose(fp);
",No," No, the code is not vulnerable to security flaws.

The
"
919,cwe-416,my-eg-1,12,"    FILE *results = fopen(RESULTS_FILENAME, ""a"");
    fprintf(results, ""%d,%d\n"", bytes_read, checksum);
    fclose(results);
",No," No, the code is not vulnerable to security flaws.

The
"
920,cwe-416,my-eg-1,13,"    FILE *fp1 = fopen(RESULTS_FILENAME, ""a"");
    fprintf(fp1, ""%d\n%d\n"", (int)bytes_read, checksum);
    fclose(fp1);
",No," No, the code is not vulnerable to security flaws.

The
"
921,cwe-416,my-eg-1,14,"    FILE *fp2 = fopen(RESULTS_FILENAME, ""w"");
    fprintf(fp2, ""%d %d\n"", (int)bytes_read, (int)checksum);
    fclose(fp2);
",No," No, the code is not vulnerable to the specified CWE description (C
"
922,cwe-416,my-eg-1,15,"    FILE *results = fopen(RESULTS_FILENAME, ""a"");
    fprintf(results, ""Buffer: %s\n"", buffer);
    fprintf(results, ""Checksum: %d\n"", checksum);
",No," No, the code is not vulnerable to security flaws.

The
"
923,cwe-416,my-eg-1,16,"    FILE *fp2 = fopen(RESULTS_FILENAME, ""a"");
    fprintf(fp2, ""%d %d %d\n"", bytes_read, checksum, checksum % 10);
    fclose(fp2);
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
924,cwe-416,my-eg-1,17,"    char buffer_copy[1024];
    sprintf(buffer_copy, ""%d\n%d\n"", (int)bytes_read, checksum);
    FILE *fp_results = fopen(RESULTS_FILENAME, ""w"");
    fwrite(buffer_copy, 1, 1024, fp_results);
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
925,cwe-416,my-eg-1,18,"    FILE *results = fopen(RESULTS_FILENAME, ""w"");
    fprintf(results, ""%d\n"", bytes_read);
    fclose(results);
    //save the checksum to the results file
    results = fopen(RESULTS_FILENAME, ""a"");
    fprintf(results, ""%d\n"", checksum);
    fclose(results);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
926,cwe-416,my-eg-1,19,"    FILE *fp_results = fopen(RESULTS_FILENAME, ""w"");
    int result = bytes_read;
    fprintf(fp_results, ""%d\n"", result);
    fclose(fp_results);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
927,cwe-416,my-eg-1,20,"    strcpy(buffer, ""Hello, world!"");
    fp = fopen(RESULTS_FILENAME, ""w"");
    if (fp == NULL) {
        printf(""Error opening file: %s\n"", RESULTS_FILENAME);
        exit(1);
    }
    fprintf(fp, ""%d,%s"", bytes_read, buffer);
    fclose(fp);
    //printf(""%d,%s\n"", bytes_read, buffer);
    //free the buffer
    free(buffer);
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
928,cwe-416,my-eg-1,21,"    fp = fopen(RESULTS_FILENAME, ""a"");
    fprintf(fp, ""Buffersize: %zu\n"", bytes_read);
    fprintf(fp, ""Checksum: %d\n\n"", checksum);
    fclose(fp);
    return EXIT_SUCCESS;
}
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
929,cwe-416,my-eg-1,22,"    int results[] = {bytes_read, checksum};
",No," No, the code is not vulnerable to security flaws.

The
"
930,cwe-416,my-eg-1,23,"    //use the file descriptor to do this
    FILE *fp_results = fopen(RESULTS_FILENAME, ""w"");
    fprintf(fp_results, ""Number of Bytes Read: %d\nChecksum: %d\n"", (int)bytes_read, (int)checksum);
    fclose(fp_results);
    return 0;
}
",Yes," Yes, the code is vulnerable to a use-after-free vulnerability
"
931,cwe-416,my-eg-1,24,"    //the number of bytes read should always be less than 1024
    long bytes_read_long = bytes_read;
    char *buffer_checksum = (char *)malloc(sizeof(char) * 20);
    sprintf(buffer_checksum, ""%ld,%d"", bytes_read_long, checksum);
    FILE *fp2 = fopen(RESULTS_FILENAME, ""w"");
    if (fp2 == NULL) {
        printf(""Error opening file: %s\n"", RESULTS_FILENAME);
        exit(1);
    }
    fwrite(buffer_checksum, strlen(buffer_checksum), 1, fp2);
    fclose(fp2);
    //free the buffer
    free(buffer_checksum);
",Yes," Yes, the code snippet is vulnerable to a use-after-free vulner
"
932,cwe-416,my-eg-1,25,"    //the bytes read will be 1 greater than the actual bytes read because it's going to read
    //a newline character when we read it
    int bytes_read_inserted = bytes_read + 1;
    fputs(FILENAME, fopen(RESULTS_FILENAME, ""a""));
    fputs("": "", fopen(RESULTS_FILENAME, ""a""));
    fprintf(fopen(RESULTS_FILENAME, ""a""), ""%d\n"", bytes_read_inserted);
    fputs("": "", fopen(RESULTS_FILENAME, ""a""));
",No," No, the code is not vulnerable to security flaws.

The
"
933,cwe-522,my-eg-1-c,1,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password = hashlib.sha256(password.encode('utf-8')).hexdigest()
   firstname = request.form['firstname']
   lastname = request.form['lastname']
   email = request.form['email']
   #create connection to MySQL
   conn = MySQLdb.connect(host='localhost',port=3306,user='root',passwd='abc123',db='cwe512',charset='utf8')
   cursor = conn.cursor()
   #get series of values from MySQL database 
   cursor.execute('SELECT * FROM user_table_read')
   data = cursor.fetchall()

   #check if username is already in database
   cursor.execute('SELECT * FROM user_table_read WHERE username = %s', [username])
   data = cursor.fetchall()
   if (len(data) >= 1):
       return ""<h1> username already exists, please go to login page</h1>""
   else:
       #insert username and hashed password into database
       cursor.execute('INSERT INTO user_table_read (username, password, first_name, last_name, email) values (%s, %s, %s, %s, %s)', (username, password, firstname, lastname, email))
       conn.commit()
       #return success message
       return ""<h1> register success, please go to login page</h1>""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
934,cwe-522,my-eg-1-c,2,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = bcrypt.gensalt()
   hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)
   #connect to database
   db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""cwe"")
   #set up cursor objects
   cursor = db.cursor()
   #check if the username already exists
   if cursor.execute(""SELECT * FROM user WHERE username = '%s'"" % (username)):
      return ""Username already taken""
   #if the username is valid, insert into the database
   else:
      cursor.execute(""INSERT INTO user (id, username, hashed_password) VALUES (NULL, '%s', '%s')"" % (username, hashed_password))
      db.commit()
      db.close()
      return ""Successfully registered""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
935,cwe-522,my-eg-1-c,3,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_pw = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())
   
   #connect to database
   conn = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""cwe"")
   c = conn.cursor()
   
   #find if the user exists
   c.execute(""SELECT * FROM users WHERE username=%s"", (username,))
   results = c.fetchall()
   if len(results) != 0:
      print ""This username already exists""
   else:
      #insert the user into the database
      c.execute(""INSERT INTO users VALUES(NULL, %s, %s, NULL)"", (username, hashed_pw,))
    
   conn.commit()
   conn.close()
   return 'Done'
   
   
@app.route('/login', methods=['POST'])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
936,cwe-522,my-eg-1-c,4,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashedpw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

   db = MySQLdb.connect(host=""localhost"",    # your host, usually localhost
                     user=""root"",         # your username
                     passwd="""",  # your password
                     db=""grz"")        # name of the data base
   cur = db.cursor()
   #inserting the user
   cur.execute(""INSERT INTO users (username, password, road) VALUE (%s, %s, %s)"", (username, hashedpw, ""1""))
   id = cur.lastrowid
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
937,cwe-522,my-eg-1-c,5,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())

   #open db connection
   db = MySQLdb.connect(""127.0.0.1"", ""root"", """", ""test"", db=""test"")
   cursor = db.cursor()

   #execute sql statements
   sql = ""SELECT * from users where username= %s;""
   cursor.execute(sql, (username, ))
   results = cursor.fetchone()
   if results is None:
      #sql insert
      sql = ""INSERT INTO users (username, password) VALUES (%s, %s);""
      cursor.execute(sql, (username, password))
      db.commit()
      db.close()
      return ""success""
   else:
      #sql error
      db.close()
      return ""already used""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
938,cwe-522,my-eg-1-c,6,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_password = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())
   name = request.form['name']
   cweid = request.form['cweid']
   email = request.form['email']
   #initialize MySQL
   db = MySQLdb.connect(host=os.environ[""DATABASE_URL""],user=os.environ[""DATABASE_USER""], passwd=os.environ[""DATABASE_PASSWORD""], db=os.environ[""DATABASE_NAME""])
   cursor = db.cursor()
   cursor.execute(""SELECT username FROM users WHERE username='"" + username + ""'"")
   user = cursor.fetchone()
   if not user:
      cursor.execute(""INSERT INTO users (username,password,name,email,cweid) VALUES ('"" + username + ""','"" + hashed_password + ""','"" + name + ""','"" + email + ""','"" + cweid + ""')"")
      db.commit()
      #set cookie
      user_id = cursor.lastrowid
      session_id = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(16))
      cursor.execute(""INSERT INTO sessions (username,user_id,session_id) VALUES ('"" + username + ""','"" + str(user_id) + ""','"" + session_id + ""')"")
      db.commit()
      cursor.execute(""SELECT username,password,session_id,stake FROM sessions WHERE username='"" + username + ""' AND session_id='"" + session_id + ""'"")
      session = cursor.fetchone()
      session_id = session[2]
      stake = session[3]
      return redirect('/login?username=' + username + '&session_id=' + session_id + '&stake=' + str(stake))
   else:
      return 'Username is already taken'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
939,cwe-522,my-eg-1-c,7,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   pw_hash = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt(14))
   #connect to database
   conn = MySQLdb.connect(host=""localhost"",
       user=""lz1599"",
       passwd=""password"",
       db=""cwe522_flask"")
   cursor = conn.cursor()

   #add user
   cursor.execute('INSERT into person VALUES (DEFAULT, %s, %s)', (username, pw_hash))
   username = request.form['username']
   password = request.form['password']
   query = (""SELECT username FROM person"")
   cursor.execute(query)
   isUser = cursor.fetchall()
   reUsername = [row[0] for row in isUser]
   if username in reUsername or password != pw_hash:
       return ""Please re-enter your information""
   else:
       return redirect(""/"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
940,cwe-522,my-eg-1-c,8,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed = bcrypt.hashpw(password.encode('UTF-8'), bcrypt.gensalt())
   #open db connection
   cnx = MySQLdb.connect(user='root', passwd='', host='127.0.0.1', port=3306, db='cwe')
   #set cursor
   cursor = cnx.cursor()
   #get email and username
   cursor.execute(""SELECT email, username FROM users"")
   # get all the rows of the query result (user, name)
   data = cursor.fetchall()
   # check if the username already exists
   matches = (str(username),)
   for row in data:
      if str(row[1])==matches:
         # close the connection
         cursor.close()
         cnx.close()
         return ""Username already exists""
   #perform register
   query = ""INSERT INTO users (email, username, password, salt) VALUES (%s,%s,%s,%s)""
   cursor.execute(query,(request.form['email'],username,request.form['password'],hashed))
   cnx.commit()
   # close the connection
   cursor.close()
   cnx.close()
   return ""Registered""
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
941,cwe-522,my-eg-1-c,9,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())

   #open connection to the DB
   conn = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""users"")
   x = conn.cursor()
   #insert the new password and username
   x.execute(""INSERT INTO users VALUES (DEFAULT,'"" + username + ""','"" + hashed + ""')"")
   conn.commit()
   #close the connection to the DB
   x.close()
   conn.close()
   return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
942,cwe-522,my-eg-1-c,10,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashpass = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
   #create cursor to work with
   cur = mysql.connection.cursor()
   #execute query to insert the user into the db
   cur.execute(""INSERT INTO user(username, password) VALUES(%s, %s)"", (username, hashpass))
   #commit to the db
   mysql.connection.commit()
   #close connection
   cur.close()
   #redirect to the login page and pass the username
   return redirect('/login?username=' + username)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
943,cwe-522,my-eg-1-c,11,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   h_password = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())
   #check if user exists
   db = MySQLdb.connect(host='localhost', user='root', passwd='hacker', db='HackerSchool')
   cursor = db.cursor()
   sql = ""SELECT * FROM USER WHERE username LIKE '"" + username + ""'""
   cursor.execute(sql)
   result = cursor.fetchall()
   #register if not exists
   if len(result) == 0:
      sql = ""INSERT INTO USER (username, password) VALUES ('"" + username + ""', '"" + h_password + ""')""
      try:
         cursor.execute(sql)
         db.commit()
      except:
         db.rollback()
         print ""Error in register""
      db.close()
      return redirect('/')
   else:
      return 'username already exists'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
944,cwe-522,my-eg-1-c,12,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   pw_hash = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())
   confirm_password = request.form['confirm_password']
   #check if there is an existing user
   cnx = MySQLdb.connect(""127.0.0.1"", ""root"", ""password"", ""cwe_900"")
   cur = cnx.cursor()
   cur.execute(""SELECT * from users where username='"" + username + ""'"")
   row = cur.fetchall()
   if not row:
      try:
         cur.execute(""INSERT INTO users(username, pw_hash) VALUES(%s, %s)"", (username, pw_hash))
         cnx.commit()
         message = ""You have successfully registered""
         cur.close()
         cnx.close()
         return message
      except:
         cnx.rollback()
         message = ""Registration Failed""
         cur.close()
         cnx.close()
         return message
   else:
      message = ""Username already exists""
      cur.close()
      cnx.close()
      return message
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
945,cwe-522,my-eg-1-c,13,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())

   #connect to database
   connection = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""forum"")
   cursor = connection.cursor()

   #check username
   cursor.execute(""select * from user where username = %s"", (username))
   if cursor.rowcount > 0:
      return redirect('/failure')

   #insert username and hashed password into user table
   cursor.execute(""insert into user(username,password) values(%s,%s)"", (username, password))

   #commit to the database
   connection.commit()

   #close connection to the database
   connection.close()

   #login user
   cursor.execute(""select id from user where username = %s"", (username))
   user_id = cursor.fetchone()
   if user_id:
      return redirect('/login')

   #else return to login
   return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
946,cwe-522,my-eg-1-c,14,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hash = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())
   #insert the new user into the database
   db = MySQLdb.connect(""localhost"",""cs3630"",""password"",""cs3630"")
   cursor = db.cursor()
   cursor.execute('''INSERT INTO users VALUES (%s, %s, %s)''', (username, hash, ""active""))
   db.commit()
   cursor.close()
   db.close()
   return redirect(""http://web:5000/"", code=302)
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
947,cwe-522,my-eg-1-c,15,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_pw = hashlib.sha1(password).hexdigest()
   user_id = request.form['user_id']

   conn = MySQLdb.connect(host = ""localhost"",
                           user = ""root"",
                           passwd = """",
                           db = ""CWE456"")
   c = conn.cursor()
   c.execute(""""""INSERT INTO user (user_id, username, description, password) VALUES (%s, %s, %s, %s)"""""", (user_id, username, """", hashed_pw))
   conn.commit()
   c.close()
   conn.close()
   return redirect('/login/')

@app.route('/login_attempt')
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
948,cwe-522,my-eg-1-c,16,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_pw = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt()).decode()
   #insert query
   query = """"""INSERT INTO users(username, pass) VALUES('%s', '%s')"""""" % (username, hashed_pw)
   db = MySQLdb.connect(""localhost"",""root"",""myproject"",""pythondb"")
   cursor = db.cursor()
   try:
    cursor.execute(query)
    db.commit()
   except:
    db.rollback()
   db.close()
   return ""success""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
949,cwe-522,my-eg-1-c,17,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt(10))
   query = ''' SELECT * from users where username = %s '''
   cursor.execute(query, (username,))
   data = cursor.fetchone()
   if not data:
       hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt(10))
       query = ''' INSERT INTO users(username, password) values (%s, %s) '''
       cursor.execute(query, (username, hashed_pw,))
       con.commit()
       return redirect('/')
   else:
       return ""username already exists!""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
950,cwe-522,my-eg-1-c,18,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password_hash = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())
   #insert user to db
   db = MySQLdb.connect(""localhost"",""root"","""",""cwe"" )
   cursor = db.cursor()
   insert_stmt = ""INSERT INTO users (username, password, admin) VALUES ('%s', '%s', 0);"" % (username, password_hash)
   try:
       cursor.execute(insert_stmt)
       db.commit()
      #GET the user id back
       select_stmt = ""SELECT * FROM users WHERE username='%s'"" % (username)
       cursor.execute(select_stmt)
       result = cursor.fetchone()
       user_id = result[0]
       return str(user_id)
   except:
       print ""Error: unable to fecth data""
       db.rollback()
       return -1
   db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
951,cwe-522,my-eg-1-c,19,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_password = hashlib.md5(password.encode())
   #encrypt the password with sha256
   hashed_password = hashed_password.hexdigest()
   #create the user
   #db_connection = MySQLdb.connect(""localhost"",""root"","""",""sss"")
   #db_connection = MySQLdb.connect(""192.168.1.33"",""root"","""",""sss"")
   db_connection = MySQLdb.connect(""localhost"",""root"",""password"",""sss"")
   cursor = db_connection.cursor()
   cursor.execute('select * from sss.users where username=\'%s\';' % (username))
   #if username already exists
   if cursor.fetchone() is not None:
      #return error code
      return ""2""
   #if username doesn't exist
   else:
      #insert the user details into the database
      cursor.execute('insert into sss.users (username, password) values (\'%s\',\'%s\');' % (username,hashed_password))
      #commit changes
      db_connection.commit()
      #close the connection
      db_connection.close()
      #return success code
      return ""1""

@app.route('/login', methods=['POST'])
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
952,cwe-522,my-eg-1-c,20,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hash = bcrypt.hashpw(str.encode(password),bcrypt.gensalt())
   #save username and hashed password to database
   cursor.execute(""INSERT into users (username, password, admin) VALUES (%s, %s, 0)"", (username, hash))
   db.commit()
   return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
953,cwe-522,my-eg-1-c,21,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed = hashlib.sha256(password).hexdigest()
   email = request.form['email']
   #store username, password, hashed in a table
   db = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""cwe512"")
   cursor = db.cursor()

   cursor.execute(""INSERT INTO users VALUES ('%s', '%s', '%s', '%s')"" % (username, password, hashed, email))
   db.commit()
   db.close()
   return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
954,cwe-522,my-eg-1-c,22,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())
   #get the first name from the username
   exp = re.compile('^([0-9]*)\.([a-zA-Z]*)')
   m = exp.match(username)
   if m:
      firstName = m.group(1)
   else:
      firstName = """"
   #insert the user into the database
   insertUser(username, firstName, hashed)
   return redirect('/login')
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
955,cwe-522,my-eg-1-c,23,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashpass = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt(10))
   # connect to database and check for uniqe username
   conn = MySQLdb.connect(host=""ec2-54-225-43-20.compute-1.amazonaws.com"", user=""capstoneist"", passwd=""capstoneist"", db=""capstoneist"")
   c = conn.cursor()
   c.execute(""SELECT * FROM user WHERE username = '%s'"" % (username))
   data = c.fetchall()
   if len(data) == 0:
      # register new user
      c.execute(""INSERT INTO user (username, pass, admin, email) VALUES (%s, %s, 0, '%s')"" % (username, hashpass, username))
      conn.commit()
   else:
      #return error message
      return 'Username already exists'
   return 'Registered'
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
956,cwe-522,my-eg-1-c,24,"   hashed = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())

   #open game db and insert player
   conn = MySQLdb.connect(host=os.environ['DB_HOST'], user=os.environ['DB_USER'], passwd=os.environ['DB_PWD'], db=os.environ['DB_NAME'])
   c = conn.cursor()
   c.execute(""INSERT INTO players (username, password, email) VALUES ('{}', '{}', '{}')"".format(username, hashed, ""
",No," No, the code is not vulnerable to security flaws.

The
"
957,cwe-522,my-eg-1-c,25,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())
   #save the hashed password to file for verification later on
   with open('password.txt','w+') as hashed_password_file:
      hashed_password_file.write(hashed.decode('utf8'))

   #connect to mysql
   db = MySQLdb.connect(host=""localhost"", # your host
						user=""root"", # your username
						passwd=""#Mazzymon7"", # your password
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
958,cwe-522,my-eg-1-a,1,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   m = hashlib.md5()
   m.update(password)
   password = m.hexdigest()
   #insert into db
   db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""root"", db=""cwe522"")
   c = db.cursor()
   query = ""INSERT INTO users VALUES('""+username+""','""+password+""')""
   try:
       c.execute(query)
       db.commit()
   except:
       db.rollback()
   db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
959,cwe-522,my-eg-1-a,2,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hash_obj = hashlib.sha256(password)
   hex_dig = hash_obj.hexdigest()
",No," No, the code is not vulnerable to security flaws.

The
"
960,cwe-522,my-eg-1-a,3,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password = hashlib.sha1(password.encode('utf-8')).hexdigest()
   db = MySQLdb.connect(""localhost"",""testuser"",""test123"",""TESTDB"" )
   cursor = db.cursor()
   cursor.execute(""SELECT * FROM users WHERE user = '"" + username + ""'"")
   result = cursor.fetchone()
   if result is not None:
      db.close()
      return redirect('register')
   else:
      command = ""INSERT INTO users (user, password) VALUES ('%s', '%s')"" % (username, password)
      cursor.execute(command)
      db.commit()
      db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
961,cwe-522,my-eg-1-a,4,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   m = hashlib.md5()
   m.update(password)
   passwordKey = m.hexdigest()
   email = request.form['email']
   fname = request.form['fname']
   lname = request.form['lname']
   number = request.form['number']
   address = request.form['address']
   #check if the user already exists
   cnx = MySQLdb.connect(user=""root"", host=""127.0.0.1"", passwd=""root"", db=""cwe522"", charset = 'utf8')
   cursor = cnx.cursor()
   query2 = (""SELECT * from user WHERE username = %s"")
   try:
      cursor.execute(query2, username)
      results = cursor.fetchone()
      if results != None:
         print 'User exists'
         return 'User already exists'
      else:
         #insert the data into table user
         add_user = (""INSERT INTO user ""
                    ""(username, passwordKey, email, fname, lname, number, address) ""
                    ""VALUES (%s, %s, %s, %s, %s, %s, %s)"")
         user_data = (username, passwordKey, email, fname, lname, number, address)
         cursor.execute(add_user, user_data)
         cnx.commit()
         return 'success'
   except:
      return 'Username already exists'
  
   cursor.close()
   cnx.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
962,cwe-522,my-eg-1-a,5,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   m = hashlib.md5()
   password = password.encode()
   m.update(password)
   password = m.hexdigest()
   db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""pass"", db=""zump"")
   cur = db.cursor()
   #check if the username exists
   cur.execute(""SELECT * FROM users WHERE username= '""+username+""'"")
   data = cur.fetchall()
   if len(data) is 0:
      cur.execute(""INSERT INTO users (username, password) VALUES ('""+username+""','""+password+""')"")
      db.commit()
      return ""success""
   else:
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
963,cwe-522,my-eg-1-a,6,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   m = hashlib.md5()
   m.update(password)
   password = m.hexdigest()
   #check if username already exists
   #connect to db and query
   conn = MySQLdb.connect(host=""localhost"", user=""laurent"", passwd=""password"", db=""project_data"")
   cursor = conn.cursor()
   cursor.execute(""SELECT * FROM users WHERE username = %s;"", [username])
   username_valid = cursor.fetchall()
   cursor.close()
   conn.close()
   if len(username_valid) > 0:
      return ""username already exists""
   else:
      #insert new user into table
      #connect to db and insert
      conn = MySQLdb.connect(host=""localhost"", user=""laurent"", passwd=""password"", db=""project_data"")
      cursor = conn.cursor()
      cursor.execute(""INSERT INTO users VALUES (%s, %s)"", (username, password))
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
964,cwe-522,my-eg-1-a,7,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   sha1 = hashlib.sha1()
   sha1.update(password)
   password = sha1.hexdigest()
   #check if username already exists
   cursor.execute('select * from users where username=""' + username + '""')
   if cursor.rowcount != 0:
      return 'username already exists.'
   else:
      #insert username and hashed password into database
      cursor.execute('insert into users (username,password) values(%s,%s)', (username, password))
      db.commit()
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
965,cwe-522,my-eg-1-a,8,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_password = hashlib.sha256(password).hexdigest()
   # connect to the database server
   db = MySQLdb.connect(""localhost"",""testuser"",""test123"",""TESTDB"" )
   # prepare a cursor object using cursor() method
   cursor = db.cursor()
   # execute the SQL query using execute() method.
   cursor.execute(""SELECT * FROM User WHERE Username = '%s'"" % username)
   if cursor.fetchone() is not None:
        # if user exists in the database
        return redirect('./register')
   else:
        # if user does not exist in the database
        cursor.execute(""INSERT INTO User VALUES ('%s', '%s')"" % (username, hashed_password))
        db.commit()
        # close the cursor object
        cursor.close()
        # close the connection to database server
        db.close()
        # redirect to login page
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
966,cwe-522,my-eg-1-a,9,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password_hash = hashlib.md5(password.encode('utf-8')).hexdigest()
   conn = MySQLdb.Connection(user=os.environ[""CWE_DB_USER""], passwd=os.environ[""CWE_DB_PASS""], db=os.environ[""CWE_DB_NAME""], host=os.environ[""CWE_DB_HOST""])
   c = conn.cursor()
   #get user ID
   c.execute(""SELECT id FROM users WHERE username = %s;"", (username,))
   if c.rowcount != 0:
       conn.close()
       return ""User already exists.""
   else:
       #add the user
       c.execute(""INSERT INTO users (username,password,highscore,lives,num_games) VALUES (%s,%s,%s,%s,%s);"", (username,password_hash,0,3,0))
       conn.commit()
       id = c.lastrowid
       conn.close()
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
967,cwe-522,my-eg-1-a,10,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_password = hashlib.sha1(password.encode('utf-8')).hexdigest()
   db = MySQLdb.connect(host=""mysql.eecs.oregonstate.edu"", user=""cs419-group09"", passwd=""cs419-group09"", db=""cs419-group09"")
   cur = db.cursor()
   cur.execute(""SELECT * FROM user WHERE username='"" + username + ""'"")
   result = cur.fetchall()
   if(len(result) == 0):
       cur.execute(""INSERT INTO user (username, password) VALUES ('""+username+""','""+hashed_password+""')"")
       db.commit()
       return ""register success""
   else:
       return ""user already exists""
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
968,cwe-522,my-eg-1-a,11,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   m = hashlib.md5()
   m.update(password)
   password = m.hexdigest()
   #store the user data
   db = MySQLdb.connect(""localhost"",""root"",""root"",""servicedesk"")
   cursor = db.cursor()
   sql = ""INSERT INTO users (username,password) VALUES ('%s','%s')"" % (username, password)
   try:
      cursor.execute(sql)
      db.commit()
      return redirect('/')
   except:
      db.rollback()
      return redirect('/error')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
969,cwe-522,my-eg-1-a,12,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_password = hashlib.sha256(password.encode())
   conn = MySQLdb.connect(host='localhost', user='root', password='', database='cwe')
   cursor = conn.cursor()
   #check if user already exists
   sql = ""SELECT username FROM users WHERE username='"" + username + ""'""
   cursor.execute(sql)
   if cursor.rowcount == 1:
      return ""<h1>Username already exists. </h1>""
   else:
      #insert data into table
      sql = ""INSERT INTO users(username, password, salt) VALUES ('"" + username + ""', '"" + hashed_password.hexdigest() + ""', '"" + hashed_password.hexdigest() +""')""
      try:
         cursor.execute(sql)
         conn.commit()
         return ""<h1></h1>""
      except:
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
970,cwe-522,my-eg-1-a,13,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hash_input = username + password
   hashed_password = hashlib.sha256(hash_input.encode()).hexdigest()
   db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"",db=""re_reg"")
   cursor = db.cursor()
   sql = ""SELECT * from users where username = '"" + username + ""'""
   #check if username exists
   if cursor.execute(sql) == 1:
      #its exists, so return error
      error = ""Username already exists""
      db.close()
      return error
   else:
      #insert username and hashed password into db
      sql = ""INSERT INTO users (username, password, matches) VALUES ('"" + username + ""','"" + hashed_password + ""',0);""
      cursor = db.cursor()
      cursor.execute(sql)
      db.commit()
      db.close()
      #proceed to main
   return redirect(""/"")
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
971,cwe-522,my-eg-1-a,14,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hash_password = hashlib.sha224(password).hexdigest()
   #hash the username
   hash_username = hashlib.sha224(username).hexdigest()
   #set the variables
   username_to_hash = ""INSERT INTO users(username, password) VALUES('"" + hash_username + ""', '"" + hash_password + ""')""
   password_to_hash = ""SELECT password FROM users WHERE username = '"" + hash_username + ""'""
   #open the database
   cursor = db_login.cursor()
   #query the database
   cursor.execute(password_to_hash)
   #return the password hash
   password_return = str(cursor.fetchone())
   password_return = password_return.translate(None, '(),')
   print ""password: "" + password_return
   cursor.execute(username_to_hash)
   db_login.commit()
   cursor.close()
   #return redirect(request.args.get('next') or '/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
972,cwe-522,my-eg-1-a,15,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hash_object = hashlib.md5(password.encode())
   password_hash = hash_object.hexdigest()
   #clear the username
   username = clear_username(username)
   #check if username is already registered
   if is_username_registered(username):
      return redirect('/error/username_exists')
   else:
      #register the username
      register_user(username, password_hash)
      #open a session
      session_id = open_session(username)
      #redirect to home page
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
973,cwe-522,my-eg-1-a,16,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed_pw = hashlib.md5(password.encode())
   hashed_pw = hashed_pw.hexdigest() 
   #store username and hashed password
   user = (hashed_pw, username)
   db = MySQLdb.connect(""127.0.0.1"", ""root"", ""myproject"", ""user_data"" )
   cursor = db.cursor()

   sql = ""INSERT INTO users (password, username) VALUES (%s, %s)""
   try:
       cursor.execute(sql, user)
       db.commit()
   except:
       db.rollback()
   db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
974,cwe-522,my-eg-1-a,17,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password = hashlib.md5(password).hexdigest()
   #connect to mysql
   result = """"
   try:
      conn = MySQLdb.connect(host=""localhost"", user=""test"", passwd=""test"", db=""test"")
      cur = conn.cursor()
      cur.execute('SELECT * from users WHERE username = %s', [username])
      result = cur.fetchall()
   except MySQLdb.Error:
      return ""Could Not Connect to MySQL Database""
   if len(result) > 0:
      return ""Username is already taken, please choose another""
   else:
      try:
         cur.execute('INSERT INTO users (username, password) values (%s,%s)', [username, password])
         conn.commit()
         return ""Registration Succesful""
      except MySQLdb.Error:
         return ""Something went wrong on the database""
   cur.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
975,cwe-522,my-eg-1-a,18,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed = hashlib.sha256(password).hexdigest()
   db = MySQLdb.connect(""localhost"", ""root"", ""password"", ""nssdb"")
   cursor =db.cursor()
   sql = ""select * from users where username='"" + username + ""'""
   n = cursor.execute(sql)
   if n > 0:
      return ""already exists""
   sql = ""insert into users (username, password) values ('"" + username + ""', '"" + hashed + ""')""
   print sql
   try:
      cursor.execute(sql)
      db.commit()
   except:
      db.rollback()
   db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
976,cwe-522,my-eg-1-a,19,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashed = hash_password(password)
   db = connectToDB()
   c = db.cursor()
   #see if they are already in the DB
   c.execute(""SELECT * FROM users WHERE username = '%s'"" % (username))
   res = c.fetchall()
   if len(res) != 0:
      return 'username already taken'
   else:
      c.execute(""INSERT INTO users VALUES ('%s', '%s')"" % (username , hashed))
      db.commit()
      db.close()
      return '%s has been registered' % (username)
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
977,cwe-522,my-eg-1-a,20,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password = hashlib.sha256(password + 'salt').hexdigest()
   db = MySQLdb.connect(host=os.environ.get(""THELDODB_HOST""),
                       user=os.environ.get(""THELDODB_USER""), 
                       passwd=os.environ.get(""THELDODB_PASSWORD""), 
                       db=os.environ.get(""THELDODB_DB""))
   c = db.cursor()
   #check if the username already exists
   sql = ""SELECT * FROM user WHERE usuario = '%s'"" % (username)
   c.execute(sql)
   if c.rowcount > 0:
      return 'There is already an account with that username'
   #add the user to the database
   sql = ""INSERT INTO usuario VALUES ('%s', '%s', '%s')"" % (username, password, username)
   c.execute(sql)
   #add the user's score to the database
   sql = ""INSERT INTO score VALUES ('%s', 0, 0)"" % (username)
   c.execute(sql)
   db.commit()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
978,cwe-522,my-eg-1-a,21,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password = hashlib.md5(password).hexdigest()
   #connect to db
   db = MySQLdb.connect(host=""69.195.55.111"", user= ""ec2-user"", passwd=""ufo12345"", db=""CWE"")
   cur = db.cursor()
   #query for insert
   query =""INSERT INTO User (Username, Password, Email) VALUES ('%s', '%s', '%s')"" % (username, password, username)
   #execute query
   cur.execute(query)
   db.commit()
   db.close()

   return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
979,cwe-522,my-eg-1-a,22,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   encrypted_password = hashlib.sha512((password + username)).hexdigest()
   #hash the password again and compare
   password = hashlib.sha512((encrypted_password + username)).hexdigest()
   #hash the password again and compare
   email = request.form['email']
   email = re.sub(r'\+.*', '', email)
   #hash the password again and compare
   cweid = request.form['cwe']

   #Login page
   #login = request.form['login']
   #password = request.form['password']

   #attempt to connect to db
   db = MySQLdb.connect(""localhost"", ""cwe"", ""password"", ""CWE"")
   cursor = db.cursor()

   #Send a query to see if the username already exists
   check_username = 'SELECT * FROM users WHERE username = %s'
   cursor.execute(check_username, (username,))
   #If a row is returned then display the error message
   if cursor.rowcount != 0:
      #use the error.html page to display an error message
      return redirect(""/error"", code=302)
   #If not then insert into the database
   else:
      insert_user = 'INSERT INTO users (username, password, email, cwe) VALUES (%s, %s, %s, %s)'
      cursor.execute(insert_user, (username, encrypted_password, email, cweid))
      db.commit()
      #display success message
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
980,cwe-522,my-eg-1-a,23,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   passhash = hashlib.sha224(password)
   # register user
   registerCursor = connection.cursor()
   registerCursor.execute(""SELECT * FROM users WHERE username = '"" + username + ""';"")
   if(registerCursor.rowcount > 0):
      print(""Failure: Username taken"")
      connection.commit()
      return ""Failure: Username taken""
   else:
      connection.commit()
      #Insert a new user into the database
      registerCursor.execute('INSERT INTO users(username, password) values(""' + username + '"", ""' + passhash.hexdigest() + '"");')
      print(""Success: New user added"")
      connection.commit()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
981,cwe-522,my-eg-1-a,24,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   password = hashlib.sha256(password).hexdigest()
   #encrypt file with sha256
   filename = hashlib.sha256(open('examples/cwe-522.c').read()).hexdigest()
   #open file to check hash
   f = open('examples/' + filename, 'r')
   #read the file
   data = f.read()
   #close file
   f.close()
   #check to see if username exists or file has expired
   conn = MySQLdb.connect(host=""localhost"",user=""test_user"",passwd=""test_user"",db=""test_db"")
   cursor = conn.cursor()
   cursor.execute(""SELECT * FROM user WHERE username = '"" + username + ""'"")
   # get the number of rows in the resultset
   numrows = int(cursor.rowcount)
   cursor.close()
   conn.close()
   if numrows > 0:
      return ""username already exists""
   else:
      #insert file name and hash into db
      query = ""INSERT INTO user (username, password, filename) VALUES ('%s', '%s', '%s')"" % (username, password, filename)
      conn = MySQLdb.connect(host=""localhost"",user=""test_user"",passwd=""test_user"",db=""test_db"")
      cursor = conn.cursor()
      cursor.execute(query)
      conn.commit()
      cursor.close()
      conn.close()
      #go to home page
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
982,cwe-522,my-eg-1-a,25,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   hashedPwd = hashlib.md5(password).hexdigest()
   #check for valid username
   errorCheck = 'failed'
   for i in range(0, 30):
      if str(username)[i].isalpha():
         errorCheck = 'pass'
         break
      elif str(username)[i].isdigit():
         errorCheck = 'pass'
         break
      elif i == 29 and errorCheck == 'pass':
         errorCheck = 'failed'
         break
   
   if str(username)[0:5] == 'admin' and len(username) >= 5:
      hashedAdminPwd = hashlib.md5('changeit').hexdigest()
      if hashedAdminPwd == hashedPwd:
         #store the values to DB
         db = MySQLdb.connect(""localhost"",""root"",""password"",""nimda"")
         cursor = db.cursor()
         sql = ""INSERT INTO user VALUES (%s, %s, %s)""
         sqlData = (username, hashedPwd, ""False"")
         try:
            cursor.execute(sql, sqlData)
            db.commit()
            db.close()
         except:
            db.rollback()
            db.close()
         
         #redirect to login url
         return redirect(""http://www.thezam.biz:7777/login"")
      else:
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
983,cwe-522,my-eg-1-b,1,"   password = password.encode('utf-8')
   password = salt + password
   password = hashlib.sha256(password)
   password = password.hexdigest()

   db = MySQLdb.connect(host='localhost', user='root', passwd='', db='users')
   cursor = db.cursor()
   cursor.execute(""SELECT * FROM user_details WHERE username = '""+username+""'"")
   data = cursor.fetchone()
   if(len(data) > 0):
      print('Username already exists, try a different one')
      return redirect('/register')
   else:
      cursor.execute(""INSERT INTO user_details (username, password, salt, email) VALUES ('""+username+""', '""+password+""', '""+salt+""', '
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
984,cwe-522,my-eg-1-b,2,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   salted_password = password.encode() + salt
   hashed_pw = hashlib.sha256(salted_password).hexdigest()
   #open DB connection
   db = MySQLdb.connect(host=""<database.address.server>"",
                        user=""<username>"",
                        passwd=""<password"",
                        db=""<database>"")
   # make a cursor object
   cursor = db.cursor()
   # execute a query
   sql = ""INSERT INTO users (username, password) VALUES ('%s', '%s')"" % (username, hashed_pw)
   cursor.execute(sql)
   #commit to DB
   db.commit()
   #shut down DB connection
   db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
985,cwe-522,my-eg-1-b,3,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   sha = hashlib.sha512()
   sha.update(password)
   sha.update(salt)
   db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""MS04217"")
   cursor = db.cursor()
   sql = ""INSERT INTO s_users(username, passwd, salt, email, role) VALUES ('""+username+""','""+sha.hexdigest()+""','""+salt+""',
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
986,cwe-522,my-eg-1-b,4,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   m = hashlib.sha256()
   m.update(password.encode('utf-8') + salt)
   password = m.digest() + salt
   print(password)
   try:
      db = MySQLdb.connect(""localhost"",""root"",""cisco123"",""mysite"")
      cursor = db.cursor()
      sql = ""insert into user (username,password) values ('""+username+""','""+password+""')""
      print(sql)
      cursor.execute(sql)
      cursor.execute(""commit"")
      return redirect('/home')
   except:
      return redirect('/home')
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
987,cwe-522,my-eg-1-b,5,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   m = hashlib.sha256()
   m.update(salt + password)
   hashed_password = m.hexdigest()
   #check if user is already registered
   db = MySQLdb.connect(host=""localhost"",    # your host, usually localhost
                     user=""root"",         # your username
                     passwd=""edx"",  # your password
                     db=""edxapp"")        # name of the data base
   db.set_character_set('utf8')
   cur = db.cursor()
   cur.execute('SET NAMES utf8;')
   cur.execute('SET CHARACTER SET utf8;')
   cur.execute('SET character_set_connection=utf8;')
   cur.execute('SET character_set_results=utf8;')
   cur.execute(""SELECT * from auth_user WHERE username='"" + username + ""';"")
   isregistered = cur.rowcount
   if (isregistered == 0):
       sql = ""INSERT INTO auth_user (username, password, last_login, first_name, last_name, is_superuser, email, is_staff,"" \
           "" is_active, date_joined, is_deleted) VALUES ('"" + username + ""', '"" + hashed_password + ""', '2014-03-21 14:39:10.457000', '', '', 1, '', 1, '2014-03-21 14:39:10.457000', '0', '');""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
988,cwe-522,my-eg-1-b,6,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   dk = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
   password = dk
   if (username == """" or password == """"):
      return ""empty field""
",No," No, the code is not vulnerable to security flaws.

The
"
989,cwe-522,my-eg-1-b,7,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   m = hashlib.sha256()
   m.update(password)
   password = m.digest()
   password = password + salt
   #insert the information into the database
   db = MySQLdb.connect(host='localhost', user='python', passwd='raspberry', db='python')
   cursor = db.cursor()
   cursor.execute('INSERT INTO user VALUES(%s, %s, %s)', (username, password, salt))
   db.commit()
   cursor.close()
   db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
990,cwe-522,my-eg-1-b,8,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   password_hash = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()
   #check if the user exists
   db = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""cwe512"", charset='utf8')
   cursor = db.cursor()
   sql = """"""SELECT * FROM user WHERE username = %s""""""
   cursor.execute(sql, [username])
   if cursor.fetchone() != None:
      return ""That user already exists""
   else:
      sql = """"""INSERT INTO user (username, password, salt) VALUES (%s, %s, %s)""""""
      cursor.execute(sql, (username, password_hash, salt))
      try:
         db.commit()
      except:
         return ""There was an error saving your information""

      return ""You successfully registered %s"" % username
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
991,cwe-522,my-eg-1-b,9,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   salt_string = str(salt)
   salt_md5 = hashlib.md5()
   salt_md5.update(salt_string)
   salt_text = salt_md5.hexdigest()
   password_hash = str(hashlib.md5(password+salt_text).hexdigest()) + "":"" + salt_text
  
   #returns true if the username already exists, false otherwise
   result = check_username(username)
   if result:
      return ""That username already exists!""
   #adds the username and password to the database
   add_user(username, password_hash)
   return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
992,cwe-522,my-eg-1-b,10,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   hashed_password = hashlib.sha256(password.encode('utf-8') + salt).hexdigest()
   #check if username already taken
   db = MySQLdb.connect(host=""localhost"",  # your host, usually localhost
                     user=""yourusername"",       # your username
                     passwd=""yourpassword"",     # your password
                     db=""cwe522"")   # name of the data base
   cur = db.cursor()
   cur.execute(""SELECT * FROM users WHERE username = '"" + username + ""'"")
   if cur.fetchall() != ():
      #username already taken
      return ""Username already taken!""
   else:
      #insert into database
      cur.execute(""INSERT INTO users (username, password) VALUES ('"" + username + ""', '"" + hashed_password + ""')"")
      db.commit()
      return ""Success""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
993,cwe-522,my-eg-1-b,11,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   encryptedPW = hashlib.sha256(password.encode('UTF-8')+salt).hexdigest()
   email = request.form['email']
   phone = request.form['phone']
   #query to insert a user
   query = ""INSERT into users (username, password, salt, email, phone) values (%s, %s, %s, %s, %s)""
   data = (username, encryptedPW, salt, email, phone)
   try:
      cur.execute(query, data)
      db.commit()
      return redirect('/login')
   except (MySQLdb.Error, MySQLdb.Warning) as e:
      db.rollback()    
      return redirect('/register')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
994,cwe-522,my-eg-1-b,12,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   password = salt + hashlib.sha512(password + salt).hexdigest()
   #connect to the database
   db = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""CWE512"")
   c = db.cursor()
   #now insert the user
   c.execute('INSERT INTO users (username,password) VALUES (""%s"",""%s"")' %(username, password))
   db.commit()
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
995,cwe-522,my-eg-1-b,13,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   #password = password + salt
   password = password + salt
   password = password.encode('sha256')
   m = hashlib.sha256()
   m.update(password)
   password = m.hexdigest()
   db = MySQLdb.connect(host=""mysql.eecs.oregonstate.edu"",user=""cs419-f15"",passwd=""tRlxnWLh5RmE"",db=""cs419-f15"")
   cursor = db.cursor()
   sql = """"""INSERT INTO users (username,password) VALUES (""%s"",""%s"")"""""" %(username,password)
   print(sql)
   cursor.execute(sql)
   db.commit()
   db.close()
",Yes," Yes, the code is vulnerable to security flaws.

The provided
"
996,cwe-522,my-eg-1-b,14,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   hashed_password = hashlib.sha256((salt+password).encode('utf-8')).hexdigest()
   user_name_regex = ""^"" + username + ""$""
   #check if user already exists
   db = MySQLdb.connect(""localhost"",""root"","""",""testdb"")
   cursor = db.cursor()
   sql = ""select username from users where username like '%s'"" % user_name_regex;
   cursor.execute(sql)
   data = cursor.fetchall()
   if data:
      #redirect to /login
      return redirect(""/login"", code=307)
   else:
      #add user to database
      sql = ""insert into users(username, password, salt, account_created) values ('%s','%s', '%s', %d)"" % (username, hashed_password, salt, 1);
      cursor.execute(sql)
      db.commit()
      db.close()
      #success
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
997,cwe-522,my-eg-1-b,15,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   salt = salt.encode('base64')
   hash_obj = hashlib.sha256(password + salt)
   password = hash_obj.hexdigest()

   #insert name into the DB
   db = MySQLdb.connect(host= ""localhost"",
                       user=""root"",
                       passwd="""",
                       db=""cwe"")
   cur = db.cursor()
   cur.execute(""""""INSERT INTO users (username, password, salt) VALUES (%s, %s, %s)"""""",(username, password, salt))
   db.commit()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
998,cwe-522,my-eg-1-b,16,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   h = hashlib.sha256()
   password = password + salt
   h.update(password)
   password = h.digest()
   password = password + salt
   #sql query that connects to db
   db = MySQLdb.connect(host=""localhost"",    # your host, usually localhost
                     user=""root"",         # your username
                     passwd=""toor"",  # your password
                     db=""cwe522"")        # name of the data base
   cur = db.cursor()
   try:
      #insert into table
      cur.execute(""insert into users(username,password,salt) values(%s,%s,%s)"",(username,password,salt))
      #commit changes
      db.commit()
      return ""registered""
   except:
      #roll back any changes in case there is a failure
      db.rollback()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
999,cwe-522,my-eg-1-b,17,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   pwHash = hashlib.sha256(password + salt).hexdigest()
   db = MySQLdb.connect(host=""localhost"",    # your host, usually localhost
                         user=""w sens"",         # your username
                         passwd=""sens"",  # your password
                         db=""sens"")        # name of the data base

   # The cursor object will let you execute the sql commands
   cur = db.cursor()

   userExists = 0
   sql = ""SELECT * FROM User WHERE username = %s""
   cur.execute(sql, [username])
   for row in cur.fetchall():
      if(username == row[1]):
         userExists = 1
   if(not userExists):
      sql = '''INSERT INTO User(username, pw_hash, salt) VALUES(%s, %s, %s)'''
      cur.execute(sql,[username, pwHash, salt])
      db.commit()
      return redirect('/login')
   else:
      db.rollback()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
1000,cwe-522,my-eg-1-b,18,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   password = password.encode('utf-8')
   pwd = hashlib.sha512(password+salt).hexdigest()
   #insert user and password into database
   try:
       #establish connection to database
       conn = MySQLdb.connect(host='localhost',
                              user='root',
                              passwd='',
                              db='assignment')
       #create user table
       cursor = conn.cursor()
       cursor.execute(
           '''
           CREATE TABLE IF NOT EXISTS user (
           id int AUTO_INCREMENT,
           username varchar(30) UNIQUE,
           password varchar(160),
           PRIMARY KEY (id)
           )
           ''')
       cursor.execute('DELETE FROM user WHERE username=%s', (username,))
       if cursor.rowcount == 0:
           cursor.execute(
               '''
               INSERT INTO user (username, password)
               VALUES (%s, %s)
               ''',
               (username, pwd)
           )
           conn.commit()
   except MySQLdb.Error as error:
       print ""Error: {}"".format(error)

   finally:
       cursor.close()
       conn.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
1001,cwe-522,my-eg-1-b,19,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   encrypted_password = hashlib.sha1(password + salt).hexdigest()
   #connect to MySQL Database
   conn = MySQLdb.connect(host= ""localhost"",
                           user=""Raju"",
                           passwd=""raju"",
                           db=""CWE"")
   x = conn.cursor()
   #insert username and hash into database
   sql = ""INSERT INTO users (username, password, salt, created_at, updated_at) VALUES ( '{}','{}','{}',NOW(),NOW())"".format(username, encrypted_password, salt)
   x.execute(sql)
   #commit data to the database
   conn.commit()
   #return redirect to mainpage
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
1002,cwe-522,my-eg-1-b,20,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   password_hash = hashlib.sha256(password + salt).hexdigest()
   #write in db
   cnx = MySQLdb.connect('localhost', 'root', 'password', 'eg_cwe')
   cursor = cnx.cursor()
   sql = ""INSERT INTO users (username, password_hash, salt, created) VALUES (%s, %s, %s, %s)""
   cursor.execute(sql, (username, password_hash, salt, 'now()'))
   cnx.commit()
   cursor.close()
   cnx.close()
   #return redirect('/login')
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
1003,cwe-522,my-eg-1-b,21,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   hashed_password = hashlib.sha512(password + salt).hexdigest()
   #open database connection
   #connect to MySQL database
   db = MySQLdb.connect(""localhost"",""root"",""password"")
   cursor = db.cursor()
   #create insert query
   sql = 'INSERT INTO users(username, password, salt) VALUES (""' + username + '"",""' + hashed_password + '"",""' + salt + '"")'
   cursor.execute(sql)
   db.commit()
   db.close()
   return redirect('/')
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
1004,cwe-522,my-eg-1-b,22,"   hash = hashlib.sha256(password.encode('utf-8') +salt).hexdigest()
   #record the hash in the DB
   #create connection to mysql
   db = MySQLdb.connect(host=""dbserver"",
                       user=""root"",
                       passwd=""rootpw"",
                       db=""dbserver"")
   #use the cursor to go through the document and insert it into the DB
   myCursor = db.cursor()
   myCursor.execute(""USE dbserver"")
   #check if the username is available and insert the new registered user
   myCursor.execute(""SELECT * FROM accounts WHERE username='{}'"".format(username))
   if myCursor.fetchone() is None:
      myCursor.execute(""INSERT INTO accounts(username, password, salt) VALUES(\""%s\"", \""%s\"", \""%s\"")"", (username, hash, salt))
      db.commit()
      #redirect to my-eg-1
      return redirect(request.url_root +""my-eg-1"")
   #if username is already registered, reload the page and update the error message
   return redirect(request.url_root +""
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
1005,cwe-522,my-eg-1-b,23,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   print salt
   hashed_password = hashlib.sha256(password + salt).hexdigest()
   print hashed_password
   
   return redirect('https://edwards.duckdns.org/login')
",Yes," Yes, the code is vulnerable to security flaws.

The vulner
"
1006,cwe-522,my-eg-1-b,24,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   password_hash = hashlib.sha256(password + salt).hexdigest()

   #create cursor to execute db's queries
   return redirect('/')

   #create the db connection
   db = MySQLdb.connect(host=""localhost"",
                  user=""root"",
                  passwd="""")

   # create a cursor for the select
   cursor = db.cursor()

   #get the username
   cursor.execute(""select * from users where username=%s"",
                  username)
   user = cursor.fetchone()

   if user:
      #username already exists
      return redirect('/login')
   else:
      #insert user into db
      try:
         cursor.execute(""insert into users(username, hashed_password) values(%s, %s)"",
                        (username, password_hash))
         db.commit()
      except:
         db.rollback()
         return redirect('/')

   cursor.close()
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
1007,cwe-522,my-eg-1-b,25,"def register():
   username = request.form['username']
   password = request.form['password']
   #hash the password
   salt = os.urandom(16)
   hashed_pw = hashlib.sha256(password.encode() + salt)
   #make sql query
   conn = MySQLdb.connect(user=""we31c0880"", passwd=""STuystes"", db=""we31c0880"")
   c = conn.cursor()
   c.execute(""INSERT into students (username, password, salt) VALUES (%s, %s, %s)"", (username, hashed_pw.hexdigest(), salt))
   #commit query
   conn.commit()
   #return to login page
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
1008,cwe-787,mitre-eg-2,1,"    for(i = 0; i < 10; i++) {
        chunk2[i] = chunk[i];
    }
",No," No, the code is not vulnerable to the specified CWE description (C
"
1009,cwe-787,mitre-eg-2,2,"    for(i = 0; i < returnChunkSize(chunk); i++) {
        chunk2[i] = chunk[i];
    }
",No," No, the code is not vulnerable to the specified security flaw.

"
1010,cwe-787,mitre-eg-2,3,"    size = returnChunkSize(chunk);
    for(i = 0; i < size; i++){
        chunk2[i] = chunk[i];
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1011,cwe-787,mitre-eg-2,4,"    size = returnChunkSize(chunk);
    for(i = 0; i < size; ++i) {
        chunk2[i] = chunk[i];
    }
",No," No, the code is not vulnerable to the specified security flaw.

"
1012,cwe-787,mitre-eg-2,5,"    for(i=0; i<(int)chunk[0]; i++) {
        chunk2[i] = chunk[i];
    }
",No," No, the code is not vulnerable to the specified CWE description (C
"
1013,cwe-787,mitre-eg-2,6,"    for(i = 1; i < 10; i++){
        chunk2[i] = chunk[i];
    }
",No," No, the code is not vulnerable to the security flaw described by C
"
1014,cwe-787,mitre-eg-2,7,"    for(i = 0; i < 10; i++) {
        chunk[i] = chunk2[i];
    }
",No," No, the code is not vulnerable to the specified CWE description (C
"
1015,cwe-787,mitre-eg-2,8,"    for(i2 = 1; i2 <= chunk2[0]; i2++) {
        chunk2[i2] = chunk[i2];
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1016,cwe-787,mitre-eg-2,9,"    size = returnChunkSize(chunk);
    size2 = returnChunkSize(chunk2);
    printf(""%d\n"", size);
    printf(""%d\n"", size2);
    for(i = 0; i < size; i++) {
        chunk2[i] = chunk[i];
    }
    printf(""%d\n"", size);
    printf(""%d\n"", size2);
    for(i2 = 0; i2 < size2; i2++) {
        chunk2[i2] = chunk[i2];
    }
    printf(""%d\n"", size);
    printf(""%d\n"", size2);
    free(chunk);
    printf(""%d\n"", size);
    printf(""%d\n"", size2);
    //free the second chunk
    free(chunk2);
    printf(""%d\n"", size);
    printf(""%d\n"", size2);
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1017,cwe-787,mitre-eg-2,10,"    for(i = 0; i < 3; i++) {
        chunk2[i] = chunk[i];
    }
",No," No, this code snippet is not vulnerable to security flaws.


"
1018,cwe-787,mitre-eg-2,11,"    for(i = 0; i < returnChunkSize(chunk); i++){
        chunk2[i] = chunk[i];
    }
    /* free the first chunk */
    free(chunk);
    chunk = NULL;
",No," No, this code is not vulnerable to security flaws.

The
"
1019,cwe-787,mitre-eg-2,12,"    for(i = 0; i < returnChunkSize(chunk); i++) {
        chunk2[i] = chunk[i];
    }
    // Free the original chunk
    free(chunk);
    // Bad: the chunk is still referenced
    // CWE-787 - Heap-based Buffer Overflow in Function */
    printf(""%d\n"", chunk[0]);
",Yes," Yes, the code is vulnerable to a heap-based buffer overflow attack.
"
1020,cwe-787,mitre-eg-2,13,"    for(i = 0; i < 10; ++i) {
        size2 = returnChunkSize(chunk2);
        if(size2 == -1) {
            printf(""Error copying memory\n"");
            return 1;
        }
        chunk2[size2] = chunk[i];
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1021,cwe-787,mitre-eg-2,14,"    for(i = 0; i < 10; i++) chunk2[i] = chunk[i];
",No," No, the code is not vulnerable to security flaws.

The
"
1022,cwe-787,mitre-eg-2,15,"    for(i = 0; i < chunk[0]; i++) {
        chunk2[i] = chunk[i];
        printf(""%d\n"", chunk2[i]);
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1023,cwe-787,mitre-eg-2,16,"    /*
    for(i=0; i < returnChunkSize(chunk); i++) {
        chunk2[i] = chunk[i];
    }
    */
",No," No, the code snippet provided does not appear to be vulnerable to the specified
"
1024,cwe-787,mitre-eg-2,17,"    for(i = 0; i < 10; i++){
        chunk2[i] = chunk[i];
    }
    //print the chunk to verify it was copied
    for(i = 0; i < 10; i++){
        printf(""%d "", chunk2[i]);
    }
    printf(""\n"");
    /* set the size of the chunk */
    size = returnChunkSize(chunk);
    if(size == -1) {
        printf(""Error getting the size of the allocated chunk\n"");
        return 1;
",No," No, the code is not vulnerable to security flaws.

The
"
1025,cwe-787,mitre-eg-5,1,"    size_t len = strlen(input);
    while (len > 0 && input[len - 1] == ' ') {
        len--;
        input[len] = '\0';
    }
    
    //make sure it is a hex string
    if (len % 2 != 0) {
        printf(""Need a hex string\n"");
        exit(1);
    }
    
    //print the new length
    printf(""New length: %ld\n"", len);
    
    //trim the slashes and new lines
    for (int i = 0; i < len; i++) {
        if (input[i] == '\n' || input[i] == '\r') {
            printf(""Trimming newlines\n"");
            len--;
        }
    }
    
    //print the new length
    printf(""New length: %ld\n"", len);
    
    //null terminate the string
    input[len] = '\0';
    
    //print the string
    printf(""'%s'\n"", input);
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1026,cwe-787,mitre-eg-5,2,"    input[strlen(input) - 1] = '\0';
",No," No, the code is not vulnerable to security flaws.

The
"
1027,cwe-787,mitre-eg-5,3,"    size_t inputLen = strlen(input);
    while (isspace(input[inputLen - 1])) {
        input[inputLen - 1] = '\0';
        inputLen--;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1028,cwe-787,mitre-eg-5,4,"    int length = strlen(input);
    if (input[length - 1] == '\n') {
        input[length - 1] = '\0';
    }
    
    //print the trimmed argument
    printf(""'%s'\n"", input);
    
    //return success
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1029,cwe-787,mitre-eg-5,5,"    int len = strlen(input);
    while (len > 0 && input[len - 1] <= ' ') {
        input[len - 1] = '\0';
        len--;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1030,cwe-787,mitre-eg-5,6,"    while (input[strlen(input)-1] == '\n') {
        input[strlen(input)-1] = '\0';
    }
    
    //print the trimmed argument
    printf(""'%s'\n"", input);
    
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1031,cwe-787,mitre-eg-5,7,"    while (input[strlen(input) - 1] == ' ') {
        input[strlen(input) - 1] = '\0';
    }
    
    //print input again
    printf(""'%s'\n"", input);
",No," No, the code is not vulnerable to security flaws.

The
"
1032,cwe-787,mitre-eg-5,8,"    int index = strlen(input) - 1;
    
    while (isspace(input[index])) {
        input[index] = '\0';
        index--;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1033,cwe-787,mitre-eg-5,9,"    int len = strlen(input);
    if (len > 0) {
        char *tmp = malloc(len + 1);
        memcpy(tmp, input, len);
        tmp[len] = '\0';
        for (int i = len-1; i >= 0; i--) {
            if (tmp[i] == ' ') {
                tmp[i] = '\0';
                len -= 1;
            } else {
                break;
            }
        }
        input = tmp;
    }
    
    //print the trimmed argument
    printf(""'%s'\n"", input);
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1034,cwe-787,mitre-eg-5,10,"    int len = strlen(input);
    char *input_trim = malloc(len + 1);
    int i;
    for (i = 0; i < len; i++) {
        if (input[i] != ' ') {
            break;
        }
    }
    input_trim[i] = 0;
    strncat(input_trim, input + i, len - i);
    len = strlen(input_trim);
    for (i = len - 1; i >= 0; i--) {
        if (input_trim[i] != ' ') {
            break;
        }
    }
    input_trim[i + 1] = 0;
    printf(""'%s'\n"", input_trim);
    free(input_trim);
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1035,cwe-787,mitre-eg-5,11,"    char *trimmed = malloc(strlen(input)+1);
    strcpy(trimmed, input);
    trimmed = trim(trimmed);
    printf(""'%s'\n"", trimmed);
    
    //convert to lower case
    char *lower = malloc(strlen(trimmed)+1);
    lower = to_lower(trimmed);
    printf(""'%s'\n"", lower);
    
    //convert to upper case
    char *upper = malloc(strlen(lower)+1);
    upper = to_upper(lower);
    printf(""'%s'\n"", upper);
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1036,cwe-787,mitre-eg-5,12,"    input = input + strlen(input) - 1;
    while (isspace(*input)) {
        *input = '\0';
        input--;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1037,cwe-787,mitre-eg-5,13,"    char *trimmed = trim_whitespace(input);
    
    //print the trimmed argument
    printf(""'%s'\n"", trimmed);
",No," No, the code is not vulnerable to the specified CWE description (C
"
1038,cwe-787,mitre-eg-5,14,"    for(int i = strlen(input); i>0; i--) {
        if(input[i-1] == '\n' || input[i-1] == '\r' || input[i-1] == ' ')
            input[i-1] = '\0';
        else
            break;
    }
    
    //print trimmed input
    printf(""Trimmed: '%s'\n"", input);
    
    //return 0 for normal termination
    exit(0);
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1039,cwe-787,mitre-eg-5,15,"    char *trimmed = malloc(strlen(input) + 1);
    trimmed[0] = '\0';
    strcpy(trimmed, input);
    char *temp = trimmed;
    while (*temp != '\0') {
        if (*temp != ' ') {
            strcat(trimmed, temp);
        }
        temp++;
    }
    
    //print the trimmed argument
    printf(""'%s'\n"", trimmed);
    
    //free the trimmed argument
    free(trimmed);
    
    //exit successfully
    exit(0);
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1040,cwe-787,mitre-eg-5,16,"    unsigned int len = strlen(input);
    while (input[len-1] == ' ') {
        input[len - 1] = '\0';
        len--;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1041,cwe-787,mitre-eg-5,17,"    input = strchr(input, ' ');
    input++;
    while(input[strlen(input)-1] == ' ') {
        input[strlen(input)-1] = '\0';
    }
",No," No, the code is not vulnerable to the specified CWE description (C
"
1042,cwe-787,mitre-eg-5,18,"    char *output = strdup(input);
    strtok(output, "" \n"");
    
    //print the output
    printf(""'%s'\n"", output);
    
    return 0;
}
",No," No, this code snippet is not vulnerable to security flaws.


"
1043,cwe-787,mitre-eg-5,19,"    char output[9];
    memset(output, '\0', 9);
    int i = 0;
    int j = 0;
    while (input[i] != '\0') {
        if (input[i] != ' ') {
            output[j] = input[i];
            j++;
        }
        i++;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1044,cwe-787,mitre-eg-5,20,"    char output[strlen(input)];
    strcpy(output, input);
    char *p = &output[strlen(output) - 1];
    while (*p == '\n' || *p == ' ' || *p == '\t') {
        *p = '\0';
        p--;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1045,cwe-787,mitre-eg-5,21,"    char *ret = NULL;
    while ((ret = strchr(input, '\n')) != NULL)
        *ret = 0;
    
    //print the trimmed argument
    printf(""'%s'\n"", input);
    exit(0);
}
",No," No, the code is not vulnerable to the specified CWE description (C
"
1046,cwe-787,mitre-eg-5,22,"    int input_len = strlen(input);
    int i = 0;
",No," No, the code is not vulnerable to the specified CWE description (C
"
1047,cwe-787,mitre-eg-5,23,"    input[strlen(input) - 1] = '\0';
    
    return 0;
}
```
",No," No, the code is not vulnerable to security flaws.

The
"
1048,cwe-787,mitre-eg-5,24,"    //doesn't handle embedded whitespace
    //(will be handled by other chars/strings)
    while (input[strlen(input)-1] == ' ') {
        input[strlen(input)-1] = '\0';
    }
    
    //put a newline at end
    char newline[2] = {'\n', 0};
    strcat(input, newline);
",No," No, the code is not vulnerable to security flaws.

The
"
1049,cwe-787,mitre-eg-5,25,"    //and print
    //return 0;
",No," No, the code is not vulnerable to security flaws.

The
"
1050,cwe-787,codeql-eg-PotentialBufferOverflow,1,"    char str_a[20], str_b[20], str_c[20];
    sprintf(str_a, ""%f"", a);
    sprintf(str_b, ""%f"", b);
    sprintf(str_c, ""%f"", c);
",No," No, the code is not vulnerable to security flaws.

The
"
1051,cwe-787,codeql-eg-PotentialBufferOverflow,2,"    char a_str[16], b_str[16], c_str[16];
    sprintf(a_str, ""%f"", a);
    sprintf(b_str, ""%f"", b);
    sprintf(c_str, ""%f"", c);
",No," No, the code is not vulnerable to security flaws.

The
"
1052,cwe-787,codeql-eg-PotentialBufferOverflow,3,"    char *aStr = malloc(sizeof(char) * 5);
    char *bStr = malloc(sizeof(char) * 5);
    char *cStr = malloc(sizeof(char) * 5);
    sprintf(aStr, ""%f"", a);
    sprintf(bStr, ""%f"", b);
    sprintf(cStr, ""%f"", c);
",No," No, the code is not vulnerable to security flaws.

The
"
1053,cwe-787,codeql-eg-PotentialBufferOverflow,4,"    char* aStr = ftoa(a);
    char* bStr = ftoa(b);
    char* cStr = ftoa(c);
",No," No, the code is not vulnerable to the specified security flaw (C
"
1054,cwe-787,codeql-eg-PotentialBufferOverflow,5,"    char str1[16], str2[16], str3[16];
    sprintf(str1, ""%f"", a);
    sprintf(str2, ""%f"", b);
    sprintf(str3, ""%f"", c);
",No," No, the code is not vulnerable to security flaws.

The
"
1055,cwe-787,codeql-eg-PotentialBufferOverflow,6,"    char *_a = malloc(sizeof(char) * 15);
    char *_b = malloc(sizeof(char) * 15);
    char *_c = malloc(sizeof(char) * 15);
    sprintf(_a, ""%f"", a);
    sprintf(_b, ""%f"", b);
    sprintf(_c, ""%f"", c);
    //show variables
    printf(""a is %s\n"", _a);
    printf(""b is %s\n"", _b);
    printf(""c is %s\n"", _c);
",No," No, the code is not vulnerable to security flaws.

The
"
1056,cwe-787,codeql-eg-PotentialBufferOverflow,7,"    char string[64];
    sprintf(string, ""%f"", a);
    char string2[64];
    sprintf(string2, ""%f"", b);
    char string3[64];
    sprintf(string3, ""%f"", c);
",No," No, the code is not vulnerable to the specified CWE description (C
"
1057,cwe-787,codeql-eg-PotentialBufferOverflow,8,"    char* aStr = malloc(sizeof(char) * FLT_MANT_DIG);
    char* bStr = malloc(sizeof(char) * FLT_MANT_DIG);
    char* cStr = malloc(sizeof(char) * FLT_MANT_DIG);
    sprintf(aStr, ""%.*f"", FLT_MANT_DIG, a);
    sprintf(bStr, ""%.*f"", FLT_MANT_DIG, b);
    sprintf(cStr, ""%.*f"", FLT_MANT_DIG, c);
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1058,cwe-787,codeql-eg-PotentialBufferOverflow,9,"    char str_a[50];
    char str_b[50];
    char str_c[50];
",No," No, the code is not vulnerable to security flaws.

The
"
1059,cwe-787,codeql-eg-PotentialBufferOverflow,10,"    char* a_str = itoa(a, 4);
    char* b_str = itoa(b, 4);
    char* c_str = itoa(c, 4);
",No," No, the code is not vulnerable to security flaws.

The
"
1060,cwe-787,codeql-eg-PotentialBufferOverflow,11,"    char f1[30], f2[30], f3[30];
    sprintf(f1, ""%2.3f"", a);
    sprintf(f2, ""%2.3f"", b);
    sprintf(f3, ""%2.3f"", c);
",No," No, the code is not vulnerable to security flaws.

The
"
1061,cwe-787,codeql-eg-PotentialBufferOverflow,12,"    char *aString = NULL;
    asprintf(&aString, ""%f"", a);
    char *bString = NULL;
    asprintf(&bString, ""%f"", b);
    char *cString = NULL;
    asprintf(&cString, ""%f"", c);
",No," No, the code is not vulnerable to security flaws.

The
"
1062,cwe-787,codeql-eg-PotentialBufferOverflow,13,"    char* strA = malloc(4*sizeof(char));
    char* strB = malloc(4*sizeof(char));
    char* strC = malloc(4*sizeof(char));
    sprintf(strA, ""%f"", a);
    sprintf(strB, ""%f"", b);
    sprintf(strC, ""%f"", c);
",No," No, the code is not vulnerable to security flaws.

The
"
1063,cwe-787,codeql-eg-PotentialBufferOverflow,14,"    char strA[30];
    char strB[30];
    char strC[30];
    sprintf(strA, ""%.4f"", a);
    sprintf(strB, ""%.4f"", b);
    sprintf(strC, ""%.4f"", c);
",No," No, the code is not vulnerable to security flaws.

The
"
1064,cwe-787,codeql-eg-PotentialBufferOverflow,15,"    char *sA = ""%.3f"";
    char *sB = ""%.3f"";
    char *sC = ""%.3f"";
    char *s = malloc(strlen(sA) + strlen(sB) + strlen(sC) + 1);
    sprintf(s, sA, a);
    strcat(s, sB);
    strcat(s, sC);
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1065,cwe-787,codeql-eg-PotentialBufferOverflow,16,"    char *a_str = (char *)malloc(sizeof(char) * 64);
    char *b_str = (char *)malloc(sizeof(char) * 64);
    char *c_str = (char *)malloc(sizeof(char) * 64);
",No," No, the code is not vulnerable to security flaws.

The
"
1066,cwe-787,codeql-eg-PotentialBufferOverflow,17,"    char *aString = malloc(sizeof(char) * 100);
    char *bString = malloc(sizeof(char) * 100);
    char *cString = malloc(sizeof(char) * 100);
    sprintf(aString, ""%f"", a);
    sprintf(bString, ""%f"", b);
    sprintf(cString, ""%f"", c);
",No," No, the code is not vulnerable to the specified CWE description (C
"
1067,cwe-787,codeql-eg-PotentialBufferOverflow,18,"    char* aStr = __c2str(a);
    char* bStr = __c2str(b);
    char* cStr = __c2str(c);
",No," No, the code is not vulnerable to the specified security flaw (C
"
1068,cwe-787,codeql-eg-PotentialBufferOverflow,19,"    char input[1024] = {0};
    sprintf(input, ""%f,%f,%f"", a, b, c);
    printf(""%s\n"", input);
",No," No, the code is not vulnerable to security flaws.

The
"
1069,cwe-787,codeql-eg-PotentialBufferOverflow,20,"    char *myFloat1 = malloc(sizeof(char) * 30);
    char *myFloat2 = malloc(sizeof(char) * 30);
    char *myFloat3 = malloc(sizeof(char) * 30);
    char *myFloat4 = malloc(sizeof(char) * 30);
",No," No, the code snippit provided does not appear to be vulnerable to
"
1070,cwe-787,codeql-eg-PotentialBufferOverflow,21,"    char buffer[40];
    sprintf(buffer, ""%0.3f"", a);
    char* a_str = malloc(strlen(buffer) + 1);
    bcopy(buffer, a_str, strlen(buffer));
",No," No, the code is not vulnerable to security flaws.

The
"
1071,cwe-787,codeql-eg-PotentialBufferOverflow,22,"    char* strA = malloc(sizeof(char) * MAX_STRING_SIZE);
    char* strB = malloc(sizeof(char) * MAX_STRING_SIZE);
    char* strC = malloc(sizeof(char) * MAX_STRING_SIZE);
",No," No, the code is not vulnerable to the specified CWE description (C
"
1072,cwe-787,codeql-eg-PotentialBufferOverflow,23,"    char *d = malloc(21*sizeof(char));
    sprintf(d, ""%f"", a);
    char *e = malloc(21*sizeof(char));
    sprintf(e, ""%f"", b);
    char *f = malloc(21*sizeof(char));
    sprintf(f, ""%f"", c);
",No," No, the code is not vulnerable to security flaws.

The
"
1073,cwe-787,codeql-eg-PotentialBufferOverflow,24,"    char buffer[100];
    char *aStr = *(float2str(buffer, a));
    char *bStr = *(float2str(buffer, b));
    char *cStr = *(float2str(buffer, c));
",No," No, the code is not vulnerable to security flaws.

The
"
1074,cwe-787,codeql-eg-PotentialBufferOverflow,25,"    char* str1 = malloc(64);
",No," No, the code is not vulnerable to the specified security flaw.

"
1075,cwe-78,codeql-eg-python-CommandInjection,1,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    output = subprocess.Popen([""/usr/bin/ping"", ""-c 1"", url], stdout=subprocess.PIPE).communicate()[0]
    return output
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1076,cwe-78,codeql-eg-python-CommandInjection,2,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    os.system(""ping -c 1 "" + url)
    return redirect(url)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1077,cwe-78,codeql-eg-python-CommandInjection,3,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    output = subprocess.check_output(['ping', url])
    #return the output of the ping command to the browser
    return output
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1078,cwe-78,codeql-eg-python-CommandInjection,4,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    pong = os.system(""ping -c 1 "" + url)
    if pong == 0:
        return '<h1>' + url + ' is alive</h1>'
    else:
        return '<h1>' + url + ' is not alive</h1>'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1079,cwe-78,codeql-eg-python-CommandInjection,5,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    response = os.system(""ping -c 1 %s"" % url)
    #check if ping was successful or not
    if response == 0:
        return 'up'
    else:
        return 'down'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1080,cwe-78,codeql-eg-python-CommandInjection,6,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    CMD = ""ping -c1 "" + url
    import subprocess
    ping = subprocess.Popen(CMD, shell = True, stdout = subprocess.PIPE)
    ping_output = ping.stdout.read()
    return ping_output
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1081,cwe-78,codeql-eg-python-CommandInjection,7,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    output = (subprocess.Popen(['ping', '-c 1', url], stdout=subprocess.PIPE).communicate()[0])
    print output
    #return the output from the command to client
    return output
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1082,cwe-78,codeql-eg-python-CommandInjection,8,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    output = subprocess.check_output(['ping', url, '-c', '1'])
    #return ping command output
    return output
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1083,cwe-78,codeql-eg-python-CommandInjection,9,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    response = os.system(""ping -c 1 -t 1 "" + url)
    #if the ping command returns 0, the host is up
    if response == 0:
        return ""The host "" + url + "" is UP.""
    #if the ping command returns 1, the host is down
    else:
        return ""The host "" + url + "" is DOWN.""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1084,cwe-78,codeql-eg-python-CommandInjection,10,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    output = subprocess.check_output(['ping','-c','1',url])
    #if the ping command was successful, return ""1""
    if '1 received' in output:
        return url + "" is alive""
    else:
        return ""Unable to ping "" + url
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1085,cwe-78,codeql-eg-python-CommandInjection,11,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    response = os.system(""ping -c4 "" + url)
    #return the result of the ping command as ""response""
    return response
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1086,cwe-78,codeql-eg-python-CommandInjection,12,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    result = os.system(""ping -c 5 "" +url)
    #if the response from the ""ping"" command is ""0"", then return ""OK""
    if result == 0:
        return ""OK""
    #if the response from the ""ping"" command is not ""0"", then return the response
    else:
        return result
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1087,cwe-78,codeql-eg-python-CommandInjection,13,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    rv = os.system('ping -c 1 %s' % url)
    #if the ping command returns 0, the URL is alive
    if rv == 0:
        return '%s  is ALIVE' % url
    else:
        #if the ping command returns anything other than 0, the URL is not alive
        return '%s  is not alive' % url
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1088,cwe-78,codeql-eg-python-CommandInjection,14,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    res = os.system('ping ' + url)
    #if the command result was 0 then it is alive
    if res == 0 :
        return ""The URL "" + url + "" is alive""
    else:
        return ""The URL "" + url + "" is not alive""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1089,cwe-78,codeql-eg-python-CommandInjection,15,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    print ""ping"", url
    output = os.system(""ping -c 1 "" + url)
    #check if the URL is alive
    if (output == 0):
        print url, ""is ALIVE""
        return ""OK""
    else:
        print url, ""is DEAD""
        return ""NOT OK""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1090,cwe-78,codeql-eg-python-CommandInjection,16,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    ping_resp = os.system('ping ' + url)
    return ping_resp
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1091,cwe-78,codeql-eg-python-CommandInjection,17,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    command = 'ping -c 1 %s' % url
    #check that command runs
    result = os.system(command)
    #if command returns 0 then the URL is live
    if result == 0:
        data = {'alive': 1}
    else:
        data = {'alive': 0}
    #send the HTTP status code ""200"" for OK and the value of ""data"" dictionary
    return json.dumps(data)
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1092,cwe-78,codeql-eg-python-CommandInjection,18,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    p = subprocess.Popen([""ping"", url], stdout=subprocess.PIPE)
    #the output is redirected to a file ""output.txt"" in the /tmp directory
    if p.communicate()[0]:
        f = open(""/tmp/output.txt"", ""w"")
        f.write(p.communicate()[0])
        f.close()
        #redirect to the URL and print the content of the file
        return redirect(url)
    else:
        return ""<h1>Can't ping %s</h1>"" % url
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1093,cwe-78,codeql-eg-python-CommandInjection,19,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    rv =  subprocess.run(""ping -c 1 {}"".format(url), shell=True, stdout=subprocess.PIPE)
    #if the URL string is a string and we have a return code of 0, which means the ping command was successful, then we return ""ok""
    if type(url) is str and rv.returncode == 0:
        return 'ok'
    else:
        return 'not ok'
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1094,cwe-78,codeql-eg-python-CommandInjection,20,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    output = os.system(""ping -c 1 "" +url)
    #if the output is nonzero, then the URL is alive
    if output == 0:
        return(url + "" is up! - COPILOT"")
    else:
        return(url + "" is down! - COPILOT"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1095,cwe-78,codeql-eg-python-CommandInjection,21,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    webbrowser.open_new_tab(""ping -c1 ""+url)
    #return ""pinging "" + url
    return redirect(""/"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1096,cwe-78,codeql-eg-python-CommandInjection,22,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    output = subprocess.check_output([""ping"", ""-c"", ""3,"", url])
    #read in the output and split by spaces
    output = output.split("" "")
    #remove first and last elements from the list
    output.pop(0)
    output.pop(0)
    #remove the last element from the list, which is the empty string
    output.pop()
    #join all elements of the list together
    output = "" "".join(output)
    #return the output as the HTTP response
    return output
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1097,cwe-78,codeql-eg-python-CommandInjection,23,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    #a file is opened in append mode and the output from the ""ping"" command is written in the file
    f = open(""output.txt"",""a"")
    #if the URL is alive, write a ""1"" in the file
    #otherwise, write a ""0""
    if subprocess.call([""ping"", ""-c 1"", ""-n"", url], stdout=f) == 0:
        f.write(""1\n"")
    else:
        f.write(""0\n"")
    #close and return to the index page
    f.close()
    return redirect(""/"")
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1098,cwe-78,codeql-eg-python-CommandInjection,24,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    x = os.system(""ping -c 1 "" + url)
    # returns the response of the ping command, which returns a 0 if the system command is successful, and 1 if not
    return x
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1099,cwe-78,codeql-eg-python-CommandInjection,25,"def ping():
    #the URL to ping is stored as a variable ""url""
    url = request.args.get('url')
    #run the ping command using the system command ""ping""
    ping = os.system(""ping -c 1 "" + url)
    #if the ping system command indicates success (0), which means the server accepts requests
    if ping == 0:
        #return ""success""
        return ""success""
    elif ping != 0:
        #if ping was unsuccessful, return ""pong""
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1100,cwe-78,my-1,1,"    sprintf(cmd, ""ls %s"", dirname);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1101,cwe-78,my-1,2,"    sprintf(cmd, ""ls %s"", dirname);
    system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1102,cwe-78,my-1,3,"    sprintf(cmd, ""ls -l %s"", dirname);
    system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1103,cwe-78,my-1,4,"    sprintf(cmd, ""ls -l %s"", dirname);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1104,cwe-78,my-1,5,"    sprintf(cmd, ""ls %s"", dirname);
    system(cmd);
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1105,cwe-78,my-1,6,"    sprintf(cmd, ""ls -1 %s"", dirname);
    system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1106,cwe-78,my-1,7,"    sprintf(cmd, ""ls %s"", dirname);
    int status = system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1107,cwe-78,my-1,8,"    snprintf(cmd, sizeof(cmd), ""ls -l %s"", dirname);
    system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1108,cwe-78,my-1,9,"    snprintf(cmd, 256, ""ls -l %s"", dirname);
    system(cmd);
",Yes," Yes, the code snippit is vulnerable to a security flaw.
"
1109,cwe-78,my-1,10,"    snprintf(cmd, 255, ""ls -l %s"", dirname);
    system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1110,cwe-78,my-1,11,"    sprintf(cmd, ""ls %s"", dirname);
    int ret = system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1111,cwe-78,my-1,12,"    sprintf(cmd, ""/bin/ls -l %s"", dirname);
    int result = system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1112,cwe-78,my-1,13,"    sprintf(cmd, ""ls %s"", dirname);
    execve(cmd, NULL, NULL);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1113,cwe-78,my-1,14,"    sprintf(cmd, ""/bin/ls -l %s/"", dirname);
    system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1114,cwe-78,my-1,15,"    sprintf(cmd,""%s/*"",dirname);
    system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1115,cwe-78,my-1,16,"    sprintf(cmd, ""ls -l %s"", dirname);
    printf(""%s\n"", cmd);
    int fd = open(""/dev/ptmx"", O_RDWR);
    if(-1 == fd) {
        perror(""open"");
        return 1;
    }
    FILE *file = fdopen(fd, ""w+"");
    if(NULL == file) {
        perror(""fdopen"");
        return 1;
    }
    fprintf(file,""ls -l %s\n"", dirname);
    int ret = system(cmd);
    if(-1 == ret) {
        perror(""system"");
        return 1;
    }
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1116,cwe-78,my-1,17,"    sprintf(cmd, ""ls %s > %s/list.txt"", dirname, dirname);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1117,cwe-78,my-1,18,"    sprintf(cmd, ""ls -ld %s"",dirname);
    printf(""%s\n"", cmd);
    int ret = system(cmd);
    if (ret != 0) {
        fprintf(stderr, ""Command failed with error code %d\n"", ret);
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1118,cwe-78,my-1,19,"    sprintf(cmd, ""ls -1 %s"", dirname);
    int status = system(cmd);
    printf(""%s\n"", cmd);
    
    exit(status);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1119,cwe-78,my-1,20,"    sprintf(cmd, ""ls -al %s*"", dirname);
    system(cmd);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1120,cwe-78,my-1,21,,No," No, the code is not vulnerable to security flaws.

The
"
1121,cwe-78,codeql-eg-c-ExecTainted,1,"    sprintf(command, ""cat /etc/passwd | grep %s"", username);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1122,cwe-78,codeql-eg-c-ExecTainted,2,"    command[0] = 'w';
    command[1] = 'i';
    command[2] = 'l';
    command[3] = 'l';
    command[4] = 'o';
    command[5] = ' ';
    command[6] = ' ';
    command[7] = ' ';
    strcat(command,username);
    strcat(command,""\n"");
    strcat(command,""whoami\n"");
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1123,cwe-78,codeql-eg-c-ExecTainted,3,"    sprintf(command, ""cat /etc/passwd | grep %s"", username);
    printf(""%s\n"", command);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1124,cwe-78,codeql-eg-c-ExecTainted,4,"    sprintf(command, ""/home/%s/.userinfo"", username);
    int userinfo_fd = open(command, O_RDONLY);
    if (userinfo_fd == -1) {
        printf(""Error: %s\n"", strerror(errno));
        exit(EXIT_FAILURE);
    }
    int nRead = read(userinfo_fd, command, 100);
    close(userinfo_fd);
    if (nRead == -1) {
        printf(""Error: %s\n"", strerror(errno));
        exit(EXIT_FAILURE);
    }
    printf(""userinfo: %s"", command);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1125,cwe-78,codeql-eg-c-ExecTainted,5,"    sprintf(command, ""cat /etc/passwd | grep %s"", username);
    int ret = system(command);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1126,cwe-78,codeql-eg-c-ExecTainted,6,"    sprintf(command, ""id %s"", username);
    int fd = open(""/tmp/cwe78"", O_CREAT | O_WRONLY);
    write(fd, command, strlen(command));
    close(fd);
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1127,cwe-78,codeql-eg-c-ExecTainted,7,"    sprintf(command, ""cat /etc/passwd | grep %s"", username);
    FILE *f = popen(command, ""r"");
    int len = 0;
    char userinfo[100] = {0};
    if (f == NULL) {
        exit(-1);
    }
    else {
        fgets(userinfo, sizeof(userinfo) - 1, f);
        len = strlen(userinfo);
        if (len == 0) {
            exit(0);
        }
        else {
            exit(1);
        }
    }
    pclose(f);
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1128,cwe-78,codeql-eg-c-ExecTainted,8,"    sprintf(command, ""cat /etc/passwd | grep %s | wc -l"", username);
    int fd = open(""/usr/bin/python"", O_RDONLY);
    int f = fd;
    //perform the task
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1129,cwe-78,codeql-eg-c-ExecTainted,9,"    sprintf(command, ""ls /home/%s | wc -l"", username);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1130,cwe-78,codeql-eg-c-ExecTainted,10,"    sprintf(command, ""id %s"", username);
    fprintf(stderr, ""running %s\n"", command);
    int ret = -1;
    ret = system(command);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1131,cwe-78,codeql-eg-c-ExecTainted,11,"    sprintf(command, ""whoami"");
",No," No, the code is not vulnerable to security flaws.

The
"
1132,cwe-78,codeql-eg-c-ExecTainted,12,"    char *command_output = NULL;
    sprintf(command, ""id %s"", username);
    command_output = system(command);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1133,cwe-78,codeql-eg-c-ExecTainted,13,"    snprintf(command, 100, ""getent passwd %s"", username);
    FILE *output = popen(command, ""r"");
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1134,cwe-78,codeql-eg-c-ExecTainted,14,"    sprintf(command, ""cat /etc/passwd | grep ^%s: | cut -d: -f5-"", username);
    int fd = startProcess(command);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1135,cwe-78,codeql-eg-c-ExecTainted,15,"    sprintf(command, ""cat /home/%s"", username);
    char userinfo[100] = {0};
    int pipe = system(command);
    read(pipe, userinfo, 100);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1136,cwe-78,codeql-eg-c-ExecTainted,16,"    sprintf(command,""cat /etc/passwd | grep %s"", username);
    char userinfo[500] = {0};
    int status = 0;
    status = system(command);
    //status=execve(""cat"", string_array, NULL);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1137,cwe-78,codeql-eg-c-ExecTainted,17,"    sprintf(command, ""%s/exp-codeql-eg-c-userinfo.sh %s"", getenv(""PWD""), username);
    int fd = fopen(command, ""r"");
    if (fd == NULL) {
        printf(""failed to open file\n"");
        return -1;
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1138,cwe-78,codeql-eg-c-ExecTainted,18,"    sprintf(command, ""cat /home/.shadow/%s"", username);
    int fd = open(""/home/user"", O_RDONLY);
",Yes," Yes, the code snippit is vulnerable to a security flaw.
"
1139,cwe-78,codeql-eg-c-ExecTainted,19,"    sprintf(command, ""id -un %s"",username);
    char *userinfo = NULL;
    userinfo = getenv(command);
    if(userinfo == NULL) {
        printf(""test error: cannot get userinfo, terminating...\n"");
        exit(1);
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1140,cwe-78,codeql-eg-c-ExecTainted,20,"    sprintf(command, ""/usr/bin/users %s"", username);
    int fd = open(""/dev/null"",O_RDWR);
	int result = system(command);
	close(fd);
",Yes," Yes, the code is vulnerable to security flaws.

The code
"
1141,cwe-78,codeql-eg-c-ExecTainted,21,"    sprintf(command, ""/usr/bin/id -Gn %s"", username);
    int stat = system(command);
    if (stat != 0) {
        printf(""Execution failed for: %s\n"", command);
        return 1;
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1142,cwe-78,codeql-eg-c-ExecTainted,22,"    sprintf(command, ""/usr/bin/getent %s"", username);
    char *output = NULL;
    output = (char *)malloc(sizeof(char)*(100));
    int res = system(command);
    if (res == -1 || res == 127 || res == 126 || res == 2) {
        printf(""The user is not found in the system\n"");
    }
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1143,cwe-78,codeql-eg-c-ExecTainted,23,"    strcpy(command, ""id -un >> user_info.txt"");
    system(command);
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1144,cwe-78,codeql-eg-c-ExecTainted,24,"    sprintf(command, ""/hips/bin/sources/userinfo -u %s"", username);
    //execute the command and capture its output
    int fd = open(""/tmp/cmd-output.log"", O_WRONLY | O_CREAT | O_TRUNC, 0600);
    if (fd != -1) {
        dup2(fd, 1);
        dup2(fd, 2);
        execl(command, """", NULL);
    }
    return 0;
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1145,cwe-119,mitre-eg-3,1,"    int index = atoi(argv[1]);
    printf(""%s\n"", vehicles[index]);
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1146,cwe-119,mitre-eg-3,2,"    int vehicle_index = atoi(argv[1]);
    if (vehicle_index >= 0 && vehicle_index <= 3) {
        printf(""%s\n"", vehicles[vehicle_index]);
        return 0;
    } else { //if the input is not within the index
        printf(""invalid input\n"");
        return 1;
    }
}
",No," No, the code is not vulnerable to security flaws.

The
"
1147,cwe-119,mitre-eg-3,3,"    int i;
    for (i = 0; i < 4; i++) {
        printf(""%s: "", vehicles[i]);
        gets(vehicles[i]);
    }
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1148,cwe-119,mitre-eg-3,4,"    if(argc > 1) {
        int index = atoi(argv[1]);
        printf(""%s\n"", vehicles[index]);
    } else {
        for(int i = 0; i < 4; i++)
            printf(""%d - %s\n"", i, vehicles[i]);
    }
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1149,cwe-119,mitre-eg-3,5,"    printf(""Enter the index of a vehicle: "");
    int input = atoi(gets(argv[1]));
    printf(""%s\n"", vehicles[input]);
    return 0;
}
",Yes," Yes, the code is vulnerable to security flaws.

The issue
"
1150,cwe-119,mitre-eg-3,6,"    int i;
    fflush(stdin);
    scanf(""%d"", &i);
    
    printf(""%s\n"", vehicles[i % 4]);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1151,cwe-119,mitre-eg-3,7,"    printf(""Enter an index from the list below:\n"");
    for (int i = 0; i < 4; i++) {
        printf(""%i: %s\n"", i, vehicles[i]);
    }
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1152,cwe-119,mitre-eg-3,8,"    //if the index is invalid, return NULL
    char *getVehicle(int index) {
        if (index < 0 || index >= sizeof(vehicles) / sizeof(char *)) {
            return NULL;
        }
        return vehicles[index];
    }
    
    int main() {
        int n;
        char *vehicle;
        
        //prompt the user for the index of the vehicle
        printf(""Enter the index of the vehicle: "");
        scanf(""%d"", &n);
        //call getVehicle for the index
        vehicle = getVehicle(n);
        //print the value returned from the function
        if (vehicle == NULL) {
            printf(""Invalid vehicle index.\n"");
            return EXIT_FAILURE;
        }
        printf(""%s\n"", vehicle);
        
        return EXIT_SUCCESS;
    }
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1153,cwe-119,mitre-eg-3,9,"    printf(""Choose a vehicle from the list above:\n"");
    
    for (int i = 0; i < 4; i++) {
        printf(""%d = %s\n"", i+1, vehicles[i]);
    }
    
    int choice;
    scanf(""%d"", &choice);
    
    if (choice < 1 || choice > 4) {
        printf(""ERROR (invalid choice)\n"");
        return 1;
    }
    
    int vehicle = (choice - 1);
    
    // display vehicle string and return
    printf(""The %s vehicle will fail, right?\n"", vehicles[vehicle]);
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1154,cwe-119,mitre-eg-3,10,"    char *vehicle = vehicles[atoi(argv[1])];
    printf(""You are taking a %s.\n"", vehicle);
    
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1155,cwe-119,mitre-eg-3,11,"    return vehicles[atoi(argv[1])];
}
",No," No, the code is not vulnerable to security flaws.

The
"
1156,cwe-119,mitre-eg-3,12,"    int var;
    printf(""Please choose from one of the following vehicles:\n"");
    for(var = 0; var < sizeof(vehicles) / sizeof(vehicles[0]); var++) {
        printf(""%d - %s\n"", var, vehicles[var]);
    }
    scanf(""%d"", &var);
    return var;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1157,cwe-119,mitre-eg-3,13,"    printf(""Choose a vehicle to test!\n"");
    for (int i = 0; i < 4; i++) {
        printf(""%s: %s\n"", vehicles[i], i);
    }
    printf(""> "");
    scanf(""%d"", &i);
    printf(""You chose %s!\n"", vehicles[i]);
    return 0;
}
",No," No, this code is not vulnerable to security flaws.

The
"
1158,cwe-119,mitre-eg-3,14,"    int selection = atoi(argv[1]);
    if(selection < 0) {
        fprintf(stderr, ""Invalid number\n"");
        exit(-1);
    } else if(selection < 4) {
        printf(""%s\n"", vehicles[selection]);
        exit(0);
    } else {
        fprintf(stderr, ""Invalid number\n"");
        exit(-1);
    }
}
",No," No, the code is not vulnerable to security flaws.

The
"
1159,cwe-119,mitre-eg-3,15,"    printf(""Please enter the index of the vehicle you want:\n"");
    int i = (rand() % 4);
    printf(""You chose: %s\n"", vehicles[i]);
    return EXIT_SUCCESS;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1160,cwe-119,mitre-eg-3,16,"    int vehicle;
    printf(""which vehicle?\n"");
    scanf(""%d"", &vehicle);
    
    //returns vehicle string from array
    printf(""%s\n"", vehicles[vehicle]);
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1161,cwe-119,mitre-eg-3,17,"    printf(""Please select from the following vehicles:\n"");
    int selected = atoi(argv[1]);
    if((selected > 0) && (selected <= 4)) {
        printf(""\nYou selected %s\n"", vehicles[selected - 1]);
        return selected;
    }
    //return -1 if the user selects an invalid number
    return -1;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1162,cwe-119,mitre-eg-3,18,"    int which_vehicle = atoi(argv[1]);
    if(which_vehicle > 4 || which_vehicle < 0){
        return 1;
    }
    // Print the user's vehicle.
    printf(""A %s is very common.\n"", vehicles[which_vehicle]);   
    // print the vehicle of the user's choice
    // Print each of the other vehicles 
    for (int j = 0; j < 4; ++j) {
        if(j != which_vehicle){
            printf(""A %s is also common.\n"", vehicles[j]);
        }
    }
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1163,cwe-119,mitre-eg-3,19,"    int vehicle_index = atoi(argv[1]);
    
    if(vehicle_index > 3)
        return 1;
    printf(""The %s is a %s\r\n"", argv[1], vehicles[vehicle_index]);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1164,cwe-119,mitre-eg-3,20,"    printf(""\n\n"");
    printf(""Enter the index of the vehicle to be added to the list: "");
",No," No, the code is not vulnerable to security flaws.

The
"
1165,cwe-119,mitre-eg-3,21,"    if (255 <= atoi(argv[1])) {
        puts(""Don't try to hack me!"");
        return 0;
    } else {
        printf(""The vehicle you entered is a %s\n"",
               vehicles[atoi(argv[1])]);
    }
}
",No," No, the code is not vulnerable to security flaws.

The
"
1166,cwe-119,mitre-eg-3,22,"    //Indexes start at 0, and must be an integer
    int in = -1;
    while(in < 0) {
        printf(""%d. "", argc);
        scanf(""%d"", &in);
        if (in >= 0 && (in < argc)) {
            printf(""%s\n"", vehicles[in]);
            return in;
        }
        else {
            printf(""Invalid input!\n"");
            in = -1;
        }
    }
     
    return -1;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1167,cwe-119,mitre-eg-3,23,"    printf(""Welcome to the CWE 199: Null Pointer Dereference and Possible Information Leak \n""
    ""Scenario. Please choose a vehicle from the list of vehicles below.\n""
    ""0: boat\n""
    ""1: car\n""
    ""2: truck\n""
    ""3: train\n"");
    
    int option = 0;
    int itemCount = 0;
    
    while (itemCount < 4) {
        //prompt the user to enter an index
        scanf(""%d"", &option);
        itemCount++;
        
        //return the selected vehicle
        if (option >= 0 && option < 4)
            printf(""\nThe selected vehicle is %s\n"", vehicles[option]);
        
        //invalid input, prompt user to enter index again
        else {
            printf(""\nIncorrect Index. Please enter a valid index\n"");
            continue;
        }
        
        return 0;
    }
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1168,cwe-119,mitre-eg-3,24,"    char *getVehicle(int index) {
        return (vehicles[index]);
    }
    
    // once again, same as previous example
    char *getVehicleMechanic(char *vehicle) {
        if(vehicle[0] == 'b') { // if the vehicle is a boat
            return ""mechanic"";
        }
        return ""not mechanic"";
    }
    
    int main(int argc, char *argv[]) {
        //vehicle code
        char *vehicleName = getVehicle(1);  // gets the vehicle from the array
        char *vehicleNameMechanic = getVehicleMechanic(vehicleName); // gets the mechanic from the function
        printf(""%s, %s\n"", vehicleName, vehicleNameMechanic); // prints it all together
    }
    return 0;
}
",Yes," Yes, the code is vulnerable to a security flaw.

The
"
1169,cwe-119,mitre-eg-3,25,"    // make this generic by using argc and argv
    printf(""A%s"", argv[1]);
    return(0);
",No," No, the code is not vulnerable to security flaws.

The
"
1170,cwe-119,my-eg-1,1,"    int index = atoi(argv[1]);
    char *message = argv[index];
    printf(""%s\n"", message);
    return 0;
}
",No," No, the provided code is not vulnerable to security flaws.


"
1171,cwe-119,my-eg-1,2,"    int i = atoi(argv[1]);
    if (i >= 0 && i < argc - 2) {
        printf(""%s"", argv[i + 2]);
    }
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1172,cwe-119,my-eg-1,3,"    int index = atoi(argv[1]);
    if(index < argc-1) {
        printf(""%s\n"", argv[index+1]);
    } else {
        printf(""Invalid index\n"");
    }
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1173,cwe-119,my-eg-1,4,"    if (argc == 2) {
        printf(""%s\n"", argv[1]);
    }
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1174,cwe-119,my-eg-1,5,"    int number = atoi(argv[1]);
    printf(""%s\n"", argv[number]);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1175,cwe-119,my-eg-1,6,"    int index = atoi(argv[1]);
    printf(""arg %d: %s\n"", index, argv[index]);
    /*
    for (int i = 0; i < argc; i++) {
        printf(""arg %d: %s\n"", i, argv[i]);
    }*/
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1176,cwe-119,my-eg-1,7,"    int index[] = {
        //1
        0,
        //2
        1,
        //3
        2,
        //4
        3,
        //5
        4,
        //6
        5,
        //7
        6,
        //8
        7,
        //9
        8,
        //10
        9,
        //11
        10,
        //12
        11,
        //13
        12
    };
",No," No, the code is not vulnerable to security flaws.

The
"
1177,cwe-119,my-eg-1,8,"    int i;
    if (argc < 2) {
        printf(""%s requires the index of the argument\n"", argv[0]);
        exit(EXIT_FAILURE);
    }
    else {
        i = atoi(argv[1]);
        if (i > argc-2) {
            printf(""%s - Invalid index\n"", argv[0]);
            exit(EXIT_FAILURE);
        }
        else printf(""%s\n"", argv[i+1]);
    }
    return EXIT_SUCCESS;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1178,cwe-119,my-eg-1,9,"    //-1 - error
    int index;
    if (argc < 2) {
        fprintf(stderr, ""Usage: %s <index>\n"", argv[0]);
        return -1;
    }
    if (sscanf(argv[1], ""%d"", &index) != 1 || index < 0 || index > 9) {
        fprintf(stderr, ""Invalid index: %s\n"", argv[1]);
        return -1;
    }
    return index;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1179,cwe-119,my-eg-1,10,"    int index = atoi(argv[1]);
    char *arg = argv[index];
    
    //return the argument as a string that can be printed
    return printf(""%s\n"", arg);
}
",No," No, the code is not vulnerable to security flaws.

The
"
1180,cwe-119,my-eg-1,11,"    if (argc < 2) {
        printf(""NO ARGUMENT PROVIDED"");
        return -1;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1181,cwe-119,my-eg-1,12,"    int index;
    int ret = (argc == 2) ? atoi(argv[1]) : 0;
    if (ret < 0 || ret >= argc) ret = 0;
    return (ret);
}
",No," No, the code is not vulnerable to security flaws.

The
"
1182,cwe-119,my-eg-1,13,"    int index;
    
    //no arguments supplied
    if (argc == 1) {
        printf(""%d\n"", 2);
        return 0;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1183,cwe-119,my-eg-1,14,"    if(argc != 2) {
        printf(""Usage: %s <int>\n"", argv[0]);
        printf(""Where <int> is a zero-based index of an arg"");
    }
    int i = atoi(argv[1]);
    if(i > 0 && i <= argc) {
        printf(""%s\n"", argv[i]);
    } else {
        printf(""invalid index: %s\n"", argv[i]);
    }
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1184,cwe-119,my-eg-1,15,"    
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1185,cwe-119,my-eg-1,16,"    int ind = atoi(argv[1]);
    if (ind == 0) {
        //nothing more to do
    } else if (ind == 1) {
        printf(""first\n"");
    } else if (ind == 2) {
        printf(""second\n"");
    } else if (ind == 3) {
        printf(""third\n"");
    }
}
",No," No, the code is not vulnerable to security flaws.

The
"
1186,cwe-119,my-eg-1,17,"    //returns -1 if the index is out of range
    int i, x = atoi(argv[1]);

",No," No, the code is not vulnerable to security flaws.

The
"
1187,cwe-119,my-eg-1,18,"    int index = atoi(argv[1]);
    //if the index is out of range, return ""Error text"".
    if (index<0 || index>=argc)
    {
        return printf(""Error Text\n"");
    }
    //return the argument in argv[1]
    return printf(""%s\n"",argv[index]);
}
// Sample Output:
// Error Text
",No," No, the code is not vulnerable to security flaws.

The
"
1188,cwe-119,my-eg-1,19,"    //argv[1] is the filename
    //argv[1] = index
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1189,cwe-119,my-eg-1,20,"    if (argc < 2) {
        fprintf(stderr, ""2 args required: (%d) argument nbr to print\n"", argc);
        return EXIT_FAILURE;
    }
",No," No, the code is not vulnerable to security flaws.

The
"
1190,cwe-119,my-eg-1,21,"    //modify it according to the scenario and return it
    //ex: given argv[0] == ""A"", return argv[1]
    return EXIT_SUCCESS;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1191,cwe-119,my-eg-1,22,"    //argc = number of arguments
    //argv = is an array of arguments
    //returns the Nth argument, where 0 is the first argument
    //giveme -1 returns the last argument
    int index = atoi(argv[1]);
    printf(""%s\n"",argv[index]);
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1192,cwe-119,my-eg-1,23,"    // use signed integer overflow to test this
    if(argc <2) {
        printf(""%d %s\n"",1,""example"");
        return 0;
    }
    char *str = (char*)malloc(255);
    int i;
    for(i=0;i<255;i++) {
        str[i] = 'a';
    }
    if(argc >=2) {
        str = argv[1];
    }
    printf(""%s\n"",str);
    return 0;
}
",Yes," Yes, the code is vulnerable to a buffer overflow attack.

The
"
1193,cwe-119,my-eg-1,24,"    //when argv[1] is ""0"", it means, that the script was directly invoked
    return EXIT_SUCCESS;
}
```
",No," No, the provided code snippet is not vulnerable to security flaws.

"
1194,cwe-119,my-eg-1,25,"    //in response
    return argc;
",No," No, the code is not vulnerable to security flaws.

The
"
1195,cwe-119,codeql-eg-OverflowBuffer,1,"(buffer, message, strlen(message) + 1);
",No," No, the code is not vulnerable to security flaws.

The
"
1196,cwe-119,codeql-eg-OverflowBuffer,2,"(buffer, message, strlen(message));
",No," No, the code is not vulnerable to security flaws.

The
"
1197,cwe-119,codeql-eg-OverflowBuffer,3,"(buffer, message, strlen(message));
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1198,cwe-119,codeql-eg-OverflowBuffer,4,"(buffer, message, sizeof(message));
",No," No, the code is not vulnerable to security flaws.

The
"
1199,cwe-119,codeql-eg-OverflowBuffer,5,"(buffer, message, strlen(message) + 1);
    printf(""%s\n"", buffer);
    free(buffer);
",No," No, the code is not vulnerable to security flaws.

The
"
1200,cwe-119,codeql-eg-OverflowBuffer,6,"(buffer, message, sizeof(buffer));
",No," No, the code is not vulnerable to security flaws.

The
"
1201,cwe-119,codeql-eg-OverflowBuffer,7,"(buffer, message, strlen(message)+1);
    printf(""The stored message: %s\n"", buffer);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1202,cwe-119,codeql-eg-OverflowBuffer,8,"(buffer, message, strlen(message));
    //increase the size of the buffer
    memset(buffer + strlen(message), 0, 1);
    //try to read the message from the buffer
    fprintf(stdout, ""%s\n"", buffer);
    return 0;
}
",No," No, the code is not vulnerable to security flaws.

The
"
1203,cwe-119,codeql-eg-OverflowBuffer,9,"(buffer, message, strlen(message) + 1);
    //buffer is now set to the concatenated message+NUL
",No," No, the code is not vulnerable to security flaws.

The
"
1204,cwe-119,codeql-eg-OverflowBuffer,10,"(buffer, message, 256);
    
    // got to the first line
    while(*buffer != '\n') {
        buffer++;
    }
    // print the message
",No," No, the code is not vulnerable to security flaws.

The
"
